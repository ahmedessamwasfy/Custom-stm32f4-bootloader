
BootloaderV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000186c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a18  08001a18  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  08001a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
  7 .bss          000002f0  200001c4  200001c4  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004b4  200004b4  000201c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000053a1  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001164  00000000  00000000  00025595  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d0  00000000  00000000  00026700  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000448  00000000  00000000  00026bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000022f3  00000000  00000000  00027018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f7f  00000000  00000000  0002930b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002b28a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010e0  00000000  00000000  0002b308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c4 	.word	0x200001c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001a00 	.word	0x08001a00

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001c8 	.word	0x200001c8
 80001e8:	08001a00 	.word	0x08001a00

080001ec <main>:
 * @note
 * @param   none
 * @retval  none
 */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0


	SysTick_Init();
 80001f0:	f000 fe6e 	bl	8000ed0 <SysTick_Init>
	  NVIC_Init();
 80001f4:	f001 f98e 	bl	8001514 <NVIC_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001f8:	b662      	cpsie	i
	  //__disable_irq();
	  __enable_irq();



	  Flash_USART1_GPIO_Config();
 80001fa:	f000 f85b 	bl	80002b4 <Flash_USART1_GPIO_Config>
	  Flash_USART1_Init();
 80001fe:	f000 f85f 	bl	80002c0 <Flash_USART1_Init>
	  Flash_USART1_TX_DMA_Config();
 8000202:	f000 f86f 	bl	80002e4 <Flash_USART1_TX_DMA_Config>
	  Flash_USART1_RX_DMA_Config();
 8000206:	f000 f873 	bl	80002f0 <Flash_USART1_RX_DMA_Config>
	  myUSART1_Enable();
 800020a:	f001 f875 	bl	80012f8 <myUSART1_Enable>
//	  USART1_RECIEVE_CallBack_function_Set(USART1_Recive_IRQ_Callback);


	  Flash_Init();
 800020e:	f000 f8dd 	bl	80003cc <Flash_Init>

	  SysTick_Init();
 8000212:	f000 fe5d 	bl	8000ed0 <SysTick_Init>
	  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000216:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <main+0x94>)
 8000218:	2207      	movs	r2, #7
 800021a:	601a      	str	r2, [r3, #0]


	  /*
	   * init the push button and LEDs
	   * */
	  GPIO_Init_LED(EVAL_ALL_LEDs);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fe7b 	bl	8000f18 <GPIO_Init_LED>
	  GPIO_Init_PB();
 8000222:	f000 fec7 	bl	8000fb4 <GPIO_Init_PB>


	  GPIO_TurnON_LED(EVAL_GREEN_LED);
 8000226:	2000      	movs	r0, #0
 8000228:	f000 fef6 	bl	8001018 <GPIO_TurnON_LED>

	  /* Delay for half second after initialization */
	  SysTick_Delay(3000);
 800022c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000230:	f000 fe36 	bl	8000ea0 <SysTick_Delay>


	  /*
	   * 1. check the push button if checked
	   * */
	  PushButton_Result= GPIO_Result_PB();
 8000234:	f000 fedc 	bl	8000ff0 <GPIO_Result_PB>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0x98>)
 800023e:	701a      	strb	r2, [r3, #0]
	  /*
	   * 2. if checked jump to flash main
	   * */


	  if (1==PushButton_Result){
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x98>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b01      	cmp	r3, #1
 8000248:	d105      	bne.n	8000256 <main+0x6a>
		    GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 800024a:	2000      	movs	r0, #0
 800024c:	f000 ff0a 	bl	8001064 <GPIO_TurnOFF_LED>

		    Flash_Main();
 8000250:	f000 f8e2 	bl	8000418 <Flash_Main>
 8000254:	e013      	b.n	800027e <main+0x92>
	  }
	  else{
		  /*
		   * 3. if not checked check the validity of primary image if available boot it by calling jump function
		   * */
		   if(OK==Main_IMG_Available()){
 8000256:	f000 fc39 	bl	8000acc <Main_IMG_Available>
 800025a:	4603      	mov	r3, r0
 800025c:	2b01      	cmp	r3, #1
 800025e:	d102      	bne.n	8000266 <main+0x7a>

			   Jump_To_Main_IMG();
 8000260:	f000 fc6c 	bl	8000b3c <Jump_To_Main_IMG>
 8000264:	e00b      	b.n	800027e <main+0x92>
		   }
		   /*
		    * 4. else check the secondary and boot it
		    * */
		   else if(OK==Secondary_IMG_Available()){
 8000266:	f000 fc4d 	bl	8000b04 <Secondary_IMG_Available>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <main+0x8a>
			   Jump_To_Secondary_IMG();
 8000270:	f000 fd10 	bl	8000c94 <Jump_To_Secondary_IMG>
 8000274:	e003      	b.n	800027e <main+0x92>
		   }
		   /*
		    * 5. else go into halt mode with RED led ON
		    * */
		   else{
			    GPIO_TurnON_LED(EVAL_RED_LED);
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fece 	bl	8001018 <GPIO_TurnON_LED>
			    while(1);
 800027c:	e7fe      	b.n	800027c <main+0x90>
		   }

	  }

	  /* Infinite loop */
	  while(1);
 800027e:	e7fe      	b.n	800027e <main+0x92>
 8000280:	e000e010 	.word	0xe000e010
 8000284:	20000204 	.word	0x20000204

08000288 <DMA2_Stream_5_Enable>:
 * @note
 * @param   None
 * @retval  None
 */
void DMA2_Stream_5_Enable()
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* Clear all interrupt flags */
	DMA2_HISR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <DMA2_Stream_5_Enable+0x24>)
 800028e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000292:	601a      	str	r2, [r3, #0]
      | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

  /* Enable DMA 2 stream 7 */
	DMA2_CR(5) |= DMA_SxCR_EN;
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <DMA2_Stream_5_Enable+0x28>)
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <DMA2_Stream_5_Enable+0x28>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]
//	DMA2_Stream5->CR |= DMA_SxCR_EN;
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40026404 	.word	0x40026404
 80002b0:	40026488 	.word	0x40026488

080002b4 <Flash_USART1_GPIO_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_GPIO_Config(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	 myUSART1_GPIO_Config();
 80002b8:	f001 f800 	bl	80012bc <myUSART1_GPIO_Config>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <Flash_USART1_Init>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_Init(void){
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	 // myUSART1_Init();

	  /* Configure USART1 */
	  /* Enable USART1 clock */
	  RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <Flash_USART1_Init+0x1c>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	645a      	str	r2, [r3, #68]	; 0x44
	   *
	   * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	   * DIV_Mantissa = 48 = 0x30
	   *
	   * BRR          = 0x30D */
	  USART1->BRR = 0x30D;
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <Flash_USART1_Init+0x20>)
 80002cc:	f240 320d 	movw	r2, #781	; 0x30d
 80002d0:	811a      	strh	r2, [r3, #8]

}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40011000 	.word	0x40011000

080002e4 <Flash_USART1_TX_DMA_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_TX_DMA_Config(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	  USART1_TX_DMA_Config();
 80002e8:	f001 f840 	bl	800136c <USART1_TX_DMA_Config>

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <Flash_USART1_RX_DMA_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_RX_DMA_Config(void){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	 //USART1_RX_DMA_Config();


	  /* Enable DMA clock in RCC */
	  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <Flash_USART1_RX_DMA_Config+0xcc>)
 80002f6:	4b31      	ldr	r3, [pc, #196]	; (80003bc <Flash_USART1_RX_DMA_Config+0xcc>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30

	  /* Make sure that the DMA2 stream 5 is disabled */
	  if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR))
 8000300:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b01      	cmp	r3, #1
 800030a:	d10c      	bne.n	8000326 <Flash_USART1_RX_DMA_Config+0x36>
	  {
	    /* DMA 2 stream 5 is enabled, shall be disabled first */
	    DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 800030c:	4a2c      	ldr	r2, [pc, #176]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800030e:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f023 0301 	bic.w	r3, r3, #1
 8000316:	6013      	str	r3, [r2, #0]

	    /* Wait until EN bit is cleared */
	    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR))
 8000318:	bf00      	nop
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	2b01      	cmp	r3, #1
 8000324:	d0f9      	beq.n	800031a <Flash_USART1_RX_DMA_Config+0x2a>
	  {
	    /* Do nothing, stream 5 is not enabled */
	  }

	  /* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
	  DMA2_Stream5->CR &= ~DMA_SxCR_CHSEL;
 8000326:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000328:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000330:	6013      	str	r3, [r2, #0]
	  DMA2_Stream5->CR |= DMA_SxCR_CHSEL_2;
 8000332:	4a23      	ldr	r2, [pc, #140]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800033c:	6013      	str	r3, [r2, #0]

	  /* Select stream priority very high */
	  DMA2_Stream5->CR |= DMA_SxCR_PL;
 800033e:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000348:	6013      	str	r3, [r2, #0]

	  /* Select the data transfer direction peripheral-to-memory */
	  DMA2_Stream5->CR &= ~DMA_SxCR_DIR;
 800034a:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000354:	6013      	str	r3, [r2, #0]

	  /* Select memory and peripherals sizes byte (8-bit) */
	  DMA2_Stream5->CR &= ~DMA_SxCR_MSIZE;
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000358:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000360:	6013      	str	r3, [r2, #0]
	  DMA2_Stream5->CR &= ~DMA_SxCR_PSIZE;
 8000362:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800036c:	6013      	str	r3, [r2, #0]

	  /* Select FIFO mode */
	  DMA2_Stream5->FCR |= DMA_SxFCR_DMDIS;
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6153      	str	r3, [r2, #20]

	  /* Select FIFO threshold level half FIFO */
	  DMA2_Stream5->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 800037a:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f043 0303 	orr.w	r3, r3, #3
 8000384:	6153      	str	r3, [r2, #20]

	  /* Select memory incremented mode, peripheral shall has fixed address */
	  DMA2_Stream5->CR |= DMA_SxCR_MINC;
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000390:	6013      	str	r3, [r2, #0]

	  /* Enable DMA transfer complete interrupt */
	  DMA2_Stream5->CR |= DMA_SxCR_TCIE;
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f043 0310 	orr.w	r3, r3, #16
 800039c:	6013      	str	r3, [r2, #0]

	  /* Set peripheral address */
	  DMA2_Stream5->PAR = (uint32_t)&USART1->DR;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 80003a0:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <Flash_USART1_RX_DMA_Config+0xd4>)
 80003a2:	609a      	str	r2, [r3, #8]

	  /* Set memory address */
	  DMA2_Stream5->M0AR = (uint32_t)FlashRxDMABuffer;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <Flash_USART1_RX_DMA_Config+0xd8>)
 80003a8:	60da      	str	r2, [r3, #12]

	  /* Set number of data items */
	  DMA2_Stream5->NDTR = MAX_BUFFER_LENGTH;
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <Flash_USART1_RX_DMA_Config+0xd0>)
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	605a      	str	r2, [r3, #4]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40026488 	.word	0x40026488
 80003c4:	40011004 	.word	0x40011004
 80003c8:	20000430 	.word	0x20000430

080003cc <Flash_Init>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_Init(void){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

	  /* Write KEY1 */
	  FLASH->KEYR = 0x45670123;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <Flash_Init+0x40>)
 80003d2:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <Flash_Init+0x44>)
 80003d4:	605a      	str	r2, [r3, #4]

	  /* Write KEY2 */
	  FLASH->KEYR = 0xCDEF89AB;
 80003d6:	4b0d      	ldr	r3, [pc, #52]	; (800040c <Flash_Init+0x40>)
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <Flash_Init+0x48>)
 80003da:	605a      	str	r2, [r3, #4]

	  /* Select flash parallelism x32 */
	  FLASH->CR &= ~FLASH_CR_PSIZE;
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <Flash_Init+0x40>)
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <Flash_Init+0x40>)
 80003e0:	691b      	ldr	r3, [r3, #16]
 80003e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003e6:	6113      	str	r3, [r2, #16]
	  FLASH->CR |= FLASH_CR_PSIZE_1;
 80003e8:	4a08      	ldr	r2, [pc, #32]	; (800040c <Flash_Init+0x40>)
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <Flash_Init+0x40>)
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6113      	str	r3, [r2, #16]

	  /* Enable Error Interrupt */
	 // FLASH->CR |= FLASH_CR_ERIE;

	  /* Write lock bit */
	  FLASH->CR |= FLASH_CR_LOCK;
 80003f4:	4a05      	ldr	r2, [pc, #20]	; (800040c <Flash_Init+0x40>)
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <Flash_Init+0x40>)
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003fe:	6113      	str	r3, [r2, #16]

}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023c00 	.word	0x40023c00
 8000410:	45670123 	.word	0x45670123
 8000414:	cdef89ab 	.word	0xcdef89ab

08000418 <Flash_Main>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_Main(void){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	switch(Flash_currentState){
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <Flash_Main+0xb4>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <Flash_Main+0x12>
 8000424:	2b01      	cmp	r3, #1
 8000426:	d040      	beq.n	80004aa <Flash_Main+0x92>
		      /* Go to next state */
		      Flash_currentState = FLASH_WAIT_FOR_CMD;
		      break;

		    default:
		      break;
 8000428:	e04e      	b.n	80004c8 <Flash_Main+0xb0>
		strTransmit_with_DMA(line, sizeof(line));
 800042a:	212f      	movs	r1, #47	; 0x2f
 800042c:	4828      	ldr	r0, [pc, #160]	; (80004d0 <Flash_Main+0xb8>)
 800042e:	f000 ff1b 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(hello, sizeof(hello));
 8000432:	211e      	movs	r1, #30
 8000434:	4827      	ldr	r0, [pc, #156]	; (80004d4 <Flash_Main+0xbc>)
 8000436:	f000 ff17 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(select_cmd, sizeof(select_cmd));
 800043a:	2124      	movs	r1, #36	; 0x24
 800043c:	4826      	ldr	r0, [pc, #152]	; (80004d8 <Flash_Main+0xc0>)
 800043e:	f000 ff13 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000442:	212f      	movs	r1, #47	; 0x2f
 8000444:	4822      	ldr	r0, [pc, #136]	; (80004d0 <Flash_Main+0xb8>)
 8000446:	f000 ff0f 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(Lock, sizeof(Lock));
 800044a:	210e      	movs	r1, #14
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <Flash_Main+0xc4>)
 800044e:	f000 ff0b 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(unlock, sizeof(unlock));
 8000452:	2110      	movs	r1, #16
 8000454:	4822      	ldr	r0, [pc, #136]	; (80004e0 <Flash_Main+0xc8>)
 8000456:	f000 ff07 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(write_data, sizeof(write_data));
 800045a:	210e      	movs	r1, #14
 800045c:	4821      	ldr	r0, [pc, #132]	; (80004e4 <Flash_Main+0xcc>)
 800045e:	f000 ff03 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(read_data, sizeof(read_data));
 8000462:	210d      	movs	r1, #13
 8000464:	4820      	ldr	r0, [pc, #128]	; (80004e8 <Flash_Main+0xd0>)
 8000466:	f000 feff 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(erase, sizeof(erase));
 800046a:	2110      	movs	r1, #16
 800046c:	481f      	ldr	r0, [pc, #124]	; (80004ec <Flash_Main+0xd4>)
 800046e:	f000 fefb 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(write_protect, sizeof(write_protect));
 8000472:	2114      	movs	r1, #20
 8000474:	481e      	ldr	r0, [pc, #120]	; (80004f0 <Flash_Main+0xd8>)
 8000476:	f000 fef7 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(remove_write_protect, sizeof(remove_write_protect));
 800047a:	211b      	movs	r1, #27
 800047c:	481d      	ldr	r0, [pc, #116]	; (80004f4 <Flash_Main+0xdc>)
 800047e:	f000 fef3 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(ob_unlock, sizeof(ob_unlock));
 8000482:	2117      	movs	r1, #23
 8000484:	481c      	ldr	r0, [pc, #112]	; (80004f8 <Flash_Main+0xe0>)
 8000486:	f000 feef 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(ob_lock, sizeof(ob_lock));
 800048a:	2115      	movs	r1, #21
 800048c:	481b      	ldr	r0, [pc, #108]	; (80004fc <Flash_Main+0xe4>)
 800048e:	f000 feeb 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(jump, sizeof(jump));
 8000492:	2110      	movs	r1, #16
 8000494:	481a      	ldr	r0, [pc, #104]	; (8000500 <Flash_Main+0xe8>)
 8000496:	f000 fee7 	bl	8001268 <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 800049a:	212f      	movs	r1, #47	; 0x2f
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <Flash_Main+0xb8>)
 800049e:	f000 fee3 	bl	8001268 <strTransmit_with_DMA>
		Flash_currentState = FLASH_WAIT_FOR_CMD;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <Flash_Main+0xb4>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
	            break;
 80004a8:	e00e      	b.n	80004c8 <Flash_Main+0xb0>
		      if(0 != FlashRxMessageLength)
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <Flash_Main+0xec>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d006      	beq.n	80004c0 <Flash_Main+0xa8>
		        process_command();
 80004b2:	f000 f91d 	bl	80006f0 <process_command>
		        check_errors();
 80004b6:	f000 f89f 	bl	80005f8 <check_errors>
		        FlashRxMessageLength = 0;
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <Flash_Main+0xec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
		      Flash_currentState = FLASH_WAIT_FOR_CMD;
 80004c0:	4b02      	ldr	r3, [pc, #8]	; (80004cc <Flash_Main+0xb4>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
		      break;
 80004c6:	bf00      	nop

	}



}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200001ed 	.word	0x200001ed
 80004d0:	20000104 	.word	0x20000104
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000020 	.word	0x20000020
 80004dc:	20000044 	.word	0x20000044
 80004e0:	20000054 	.word	0x20000054
 80004e4:	20000064 	.word	0x20000064
 80004e8:	20000074 	.word	0x20000074
 80004ec:	20000084 	.word	0x20000084
 80004f0:	20000094 	.word	0x20000094
 80004f4:	200000a8 	.word	0x200000a8
 80004f8:	200000c4 	.word	0x200000c4
 80004fc:	200000dc 	.word	0x200000dc
 8000500:	200000f4 	.word	0x200000f4
 8000504:	20000420 	.word	0x20000420

08000508 <FLASH_USART1_IRQ_Callback>:


void FLASH_USART1_IRQ_Callback(void){
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	/* Check if idle line detected */
	  if((USART1->SR & USART_SR_IDLE) == USART_SR_IDLE)
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <FLASH_USART1_IRQ_Callback+0x2c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	b29b      	uxth	r3, r3
 8000512:	f003 0310 	and.w	r3, r3, #16
 8000516:	2b10      	cmp	r3, #16
 8000518:	d107      	bne.n	800052a <FLASH_USART1_IRQ_Callback+0x22>
	  {
	    /* Read data register to clear idle line flag */
	    (void)USART1->DR;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <FLASH_USART1_IRQ_Callback+0x2c>)
 800051c:	889b      	ldrh	r3, [r3, #4]

	    /* Disable DMA stream for RX */
	    DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <FLASH_USART1_IRQ_Callback+0x30>)
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <FLASH_USART1_IRQ_Callback+0x30>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	6013      	str	r3, [r2, #0]
	  else
	  {
	    /* No new data received */
	  }

	}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40011000 	.word	0x40011000
 8000538:	40026488 	.word	0x40026488

0800053c <FLASH_USART1_TX_DMA_IRQ_Callback>:

void FLASH_USART1_TX_DMA_IRQ_Callback(void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	 /* Check transfer complete flag */
		  if(DMA_HISR_TCIF7 == (DMA_HISR_TCIF7 & DMA2->HISR))
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800054c:	d103      	bne.n	8000556 <FLASH_USART1_TX_DMA_IRQ_Callback+0x1a>
		  {
		    /* Clear all interrupt flags */
		    DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000550:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000554:	60da      	str	r2, [r3, #12]
		  else
		  {
		    /* Do nothing, this interrupt is not handled */
		  }

}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40026400 	.word	0x40026400

08000564 <FLASH_USART1_RX_DMA_IRQ_Callback>:

void FLASH_USART1_RX_DMA_IRQ_Callback(void){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
	 /* Check transfer complete flag */
	  if(DMA_HISR_TCIF5 == (DMA_HISR_TCIF5 & DMA2->HISR))
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000576:	d127      	bne.n	80005c8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x64>
	  {
		    /* Calculate amount of data received */
		  FlashRxMessageLength=MAX_BUFFER_LENGTH -  DMA2_Stream5->NDTR;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	b2da      	uxtb	r2, r3
 800057e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 8000588:	701a      	strb	r2, [r3, #0]

		  for (int index=0 ; index<FlashRxMessageLength ; index++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00b      	b.n	80005a8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x44>
			  FlashRxBuffer[index]=FlashRxDMABuffer[index];
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	7819      	ldrb	r1, [r3, #0]
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <FLASH_USART1_RX_DMA_IRQ_Callback+0x80>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	460a      	mov	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
		  for (int index=0 ; index<FlashRxMessageLength ; index++){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3301      	adds	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dced      	bgt.n	8000590 <FLASH_USART1_RX_DMA_IRQ_Callback+0x2c>
		  }
		  /* Clear all interrupt flags */
		      DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 80005b6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80005ba:	60da      	str	r2, [r3, #12]
		          | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

		      /* Enable DMA 2 stream 5 */
		      DMA2_Stream5->CR |= DMA_SxCR_EN;
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
	    /* Do nothing, this interrupt is not handled */

	}


}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40026400 	.word	0x40026400
 80005d8:	40026488 	.word	0x40026488
 80005dc:	20000420 	.word	0x20000420
 80005e0:	20000430 	.word	0x20000430
 80005e4:	2000028c 	.word	0x2000028c

080005e8 <FLASH_IRQ_Callback>:

void FLASH_IRQ_Callback(void){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

//	if (FLASH->SR|FLASH_SR_SOP==TRUE);
	//else if (FLASH->SR|FLASH_SR_EOP==TRUE);

}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <check_errors>:
/**
 * @brief   Check flash errors
 * @param   none
 * @retval  none
 */
static void check_errors(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

	  if(FLASH_SR_PGSERR == (FLASH->SR & FLASH_SR_PGSERR))
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <check_errors+0xd8>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000604:	2b80      	cmp	r3, #128	; 0x80
 8000606:	d112      	bne.n	800062e <check_errors+0x36>
	  {
	    /* Programming sequence error */
		  strTransmit_with_DMA(NACK, sizeof(NACK));
 8000608:	2105      	movs	r1, #5
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <check_errors+0xdc>)
 800060c:	f000 fe2c 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(error_PGSERR, sizeof(error_PGSERR));
 8000610:	211b      	movs	r1, #27
 8000612:	4831      	ldr	r0, [pc, #196]	; (80006d8 <check_errors+0xe0>)
 8000614:	f000 fe28 	bl	8001268 <strTransmit_with_DMA>
	    strTransmit_with_DMA(line, sizeof(line));
 8000618:	212f      	movs	r1, #47	; 0x2f
 800061a:	4830      	ldr	r0, [pc, #192]	; (80006dc <check_errors+0xe4>)
 800061c:	f000 fe24 	bl	8001268 <strTransmit_with_DMA>

	    /* Clear */
	    FLASH->SR |= FLASH_SR_PGSERR;
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <check_errors+0xd8>)
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <check_errors+0xd8>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062a:	60d3      	str	r3, [r2, #12]
	  {
		    /* No Error */
			  strTransmit_with_DMA(ACK, sizeof(ACK));

	  }
}
 800062c:	e04e      	b.n	80006cc <check_errors+0xd4>
	  else if(FLASH_SR_PGPERR == (FLASH->SR & FLASH_SR_PGPERR))
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <check_errors+0xd8>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	2b40      	cmp	r3, #64	; 0x40
 8000638:	d112      	bne.n	8000660 <check_errors+0x68>
		  strTransmit_with_DMA(NACK, sizeof(NACK));
 800063a:	2105      	movs	r1, #5
 800063c:	4825      	ldr	r0, [pc, #148]	; (80006d4 <check_errors+0xdc>)
 800063e:	f000 fe13 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(error_PGPERR, sizeof(error_PGPERR));
 8000642:	211e      	movs	r1, #30
 8000644:	4826      	ldr	r0, [pc, #152]	; (80006e0 <check_errors+0xe8>)
 8000646:	f000 fe0f 	bl	8001268 <strTransmit_with_DMA>
	    strTransmit_with_DMA(line, sizeof(line));
 800064a:	212f      	movs	r1, #47	; 0x2f
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <check_errors+0xe4>)
 800064e:	f000 fe0b 	bl	8001268 <strTransmit_with_DMA>
	    FLASH->SR |= FLASH_SR_PGPERR;
 8000652:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <check_errors+0xd8>)
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <check_errors+0xd8>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	60d3      	str	r3, [r2, #12]
}
 800065e:	e035      	b.n	80006cc <check_errors+0xd4>
	  else if(FLASH_SR_PGAERR == (FLASH->SR & FLASH_SR_PGAERR))
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <check_errors+0xd8>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	2b20      	cmp	r3, #32
 800066a:	d112      	bne.n	8000692 <check_errors+0x9a>
		  strTransmit_with_DMA(NACK, sizeof(NACK));
 800066c:	2105      	movs	r1, #5
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <check_errors+0xdc>)
 8000670:	f000 fdfa 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(error_PGAERR, sizeof(error_PGAERR));
 8000674:	211c      	movs	r1, #28
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <check_errors+0xec>)
 8000678:	f000 fdf6 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(line, sizeof(line));
 800067c:	212f      	movs	r1, #47	; 0x2f
 800067e:	4817      	ldr	r0, [pc, #92]	; (80006dc <check_errors+0xe4>)
 8000680:	f000 fdf2 	bl	8001268 <strTransmit_with_DMA>
	    FLASH->SR |= FLASH_SR_PGAERR;
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <check_errors+0xd8>)
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <check_errors+0xd8>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	e01c      	b.n	80006cc <check_errors+0xd4>
	  else if(FLASH_SR_WRPERR == (FLASH->SR & FLASH_SR_WRPERR))
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <check_errors+0xd8>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	2b10      	cmp	r3, #16
 800069c:	d112      	bne.n	80006c4 <check_errors+0xcc>
		  strTransmit_with_DMA(NACK, sizeof(NACK));
 800069e:	2105      	movs	r1, #5
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <check_errors+0xdc>)
 80006a2:	f000 fde1 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(error_WRPERR, sizeof(error_WRPERR));
 80006a6:	2117      	movs	r1, #23
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <check_errors+0xf0>)
 80006aa:	f000 fddd 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA(line, sizeof(line));
 80006ae:	212f      	movs	r1, #47	; 0x2f
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <check_errors+0xe4>)
 80006b2:	f000 fdd9 	bl	8001268 <strTransmit_with_DMA>
	    FLASH->SR |= FLASH_SR_WRPERR;
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <check_errors+0xd8>)
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <check_errors+0xd8>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	60d3      	str	r3, [r2, #12]
}
 80006c2:	e003      	b.n	80006cc <check_errors+0xd4>
			  strTransmit_with_DMA(ACK, sizeof(ACK));
 80006c4:	2104      	movs	r1, #4
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <check_errors+0xf4>)
 80006c8:	f000 fdce 	bl	8001268 <strTransmit_with_DMA>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023c00 	.word	0x40023c00
 80006d4:	200001a8 	.word	0x200001a8
 80006d8:	20000134 	.word	0x20000134
 80006dc:	20000104 	.word	0x20000104
 80006e0:	20000150 	.word	0x20000150
 80006e4:	20000170 	.word	0x20000170
 80006e8:	2000018c 	.word	0x2000018c
 80006ec:	200001a4 	.word	0x200001a4

080006f0 <process_command>:
/**
 * @brief   Process flash command
 * @param   none
 * @retval  none
 */
static void process_command(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

	u32 command_address=0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
	u32 command_data=0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
	u32 command_result=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
	u32 sector_num=0;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
	/* Process received command */
	  switch (FlashRxBuffer[0])
 8000706:	4b8d      	ldr	r3, [pc, #564]	; (800093c <process_command+0x24c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	2b09      	cmp	r3, #9
 800070e:	f200 81c3 	bhi.w	8000a98 <process_command+0x3a8>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <process_command+0x28>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000741 	.word	0x08000741
 800071c:	0800074f 	.word	0x0800074f
 8000720:	0800075d 	.word	0x0800075d
 8000724:	080007c7 	.word	0x080007c7
 8000728:	080007ed 	.word	0x080007ed
 800072c:	08000851 	.word	0x08000851
 8000730:	080008bb 	.word	0x080008bb
 8000734:	08000921 	.word	0x08000921
 8000738:	0800092f 	.word	0x0800092f
 800073c:	08000959 	.word	0x08000959
	  {
	  case 1 : /*flash lock*/
		  /* Write lock bit */
		  FLASH->CR |= FLASH_CR_LOCK;
 8000740:	4a7f      	ldr	r2, [pc, #508]	; (8000940 <process_command+0x250>)
 8000742:	4b7f      	ldr	r3, [pc, #508]	; (8000940 <process_command+0x250>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	6113      	str	r3, [r2, #16]

//		  strTransmit_with_DMA(locked, sizeof(locked));
//		  strTransmit_with_DMA(line, sizeof(line));
		  break;
 800074c:	e1a5      	b.n	8000a9a <process_command+0x3aa>
	  case 2 : /*flash Unlock*/

	      /* Write KEY1 */
	      FLASH->KEYR = 0x45670123;
 800074e:	4b7c      	ldr	r3, [pc, #496]	; (8000940 <process_command+0x250>)
 8000750:	4a7c      	ldr	r2, [pc, #496]	; (8000944 <process_command+0x254>)
 8000752:	605a      	str	r2, [r3, #4]

	      /* Write KEY2 */
	      FLASH->KEYR = 0xCDEF89AB;
 8000754:	4b7a      	ldr	r3, [pc, #488]	; (8000940 <process_command+0x250>)
 8000756:	4a7c      	ldr	r2, [pc, #496]	; (8000948 <process_command+0x258>)
 8000758:	605a      	str	r2, [r3, #4]

//		   strTransmit_with_DMA(unlocked, sizeof(unlocked));
//		   strTransmit_with_DMA(line, sizeof(line));

		  break;
 800075a:	e19e      	b.n	8000a9a <process_command+0x3aa>
	  case 3 : /*Write Data*/
		  /*example 0x081E0000 put 41 48 4d 45    * 03 00 00 1E 08  41 48 4d 45 *  */
		  	  	/* Wait bsy flag */
		        while(0 != (FLASH->SR & FLASH_SR_BSY))
 800075c:	bf00      	nop
 800075e:	4b78      	ldr	r3, [pc, #480]	; (8000940 <process_command+0x250>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f9      	bne.n	800075e <process_command+0x6e>
		        {
		          /* Waiting */
		        }

		        /* Enable flash programming */
		        FLASH->CR |= FLASH_CR_PG;
 800076a:	4a75      	ldr	r2, [pc, #468]	; (8000940 <process_command+0x250>)
 800076c:	4b74      	ldr	r3, [pc, #464]	; (8000940 <process_command+0x250>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6113      	str	r3, [r2, #16]

		        /* Write data into flash */
		        command_address=*(u32*)&FlashRxBuffer[1]; // bygeeb awl el address(value in RxBuffre[1]) w ba3den bygeed el address bta3o w ba3den by3mlo cast L 32 34an ya5do kolo ba3d kda by3mlo derefrence 34an ygeb kol el address)
 8000776:	4b75      	ldr	r3, [pc, #468]	; (800094c <process_command+0x25c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	617b      	str	r3, [r7, #20]
//		        command_data = *(u32*) & FlashRxBuffer[5];

		        for(u8 idx=0 ; idx<4 ; ++idx){
 800077c:	2300      	movs	r3, #0
 800077e:	76fb      	strb	r3, [r7, #27]
 8000780:	e017      	b.n	80007b2 <process_command+0xc2>
//			        command_address=*(u32*)&FlashRxBuffer[1]; // bygeeb awl el address(value in RxBuffre[1]) w ba3den bygeed el address bta3o w ba3den by3mlo cast L 32 34an ya5do kolo ba3d kda by3mlo derefrence 34an ygeb kol el address

			        command_data = *(u32*) & FlashRxBuffer[5+(idx*4)];
 8000782:	7efb      	ldrb	r3, [r7, #27]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	3305      	adds	r3, #5
 8000788:	4a6c      	ldr	r2, [pc, #432]	; (800093c <process_command+0x24c>)
 800078a:	4413      	add	r3, r2
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	613b      	str	r3, [r7, #16]


			        *((volatile uint32_t*)(command_address)+idx) = command_data;
 8000790:	7efb      	ldrb	r3, [r7, #27]
 8000792:	009a      	lsls	r2, r3, #2
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	461a      	mov	r2, r3
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	6013      	str	r3, [r2, #0]

//			        command_address+=4;
			        while(0 != (FLASH->SR & FLASH_SR_BSY))
 800079e:	bf00      	nop
 80007a0:	4b67      	ldr	r3, [pc, #412]	; (8000940 <process_command+0x250>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f9      	bne.n	80007a0 <process_command+0xb0>
		        for(u8 idx=0 ; idx<4 ; ++idx){
 80007ac:	7efb      	ldrb	r3, [r7, #27]
 80007ae:	3301      	adds	r3, #1
 80007b0:	76fb      	strb	r3, [r7, #27]
 80007b2:	7efb      	ldrb	r3, [r7, #27]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d9e4      	bls.n	8000782 <process_command+0x92>

//		        *(volatile uint32_t*)(command_address) = command_data;


		              /* Disable flash programming */
		              FLASH->CR &= ~FLASH_CR_PG;
 80007b8:	4a61      	ldr	r2, [pc, #388]	; (8000940 <process_command+0x250>)
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <process_command+0x250>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6113      	str	r3, [r2, #16]

//		              strTransmit_with_DMA(programmed, sizeof(programmed));
//		              strTransmit_with_DMA(line, sizeof(line));
		              break;
 80007c4:	e169      	b.n	8000a9a <process_command+0x3aa>

		  break;
	  case 4 : /*Read Data*/
  	  	  	/* Wait bsy flag */
	        while(0 != (FLASH->SR & FLASH_SR_BSY))
 80007c6:	bf00      	nop
 80007c8:	4b5d      	ldr	r3, [pc, #372]	; (8000940 <process_command+0x250>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f9      	bne.n	80007c8 <process_command+0xd8>
	        {
	          /* Waiting */
	        }
	        /*example 0x081E0000      * 04 00 00 1E 08 *  note we use little endian so   last byte will be the first to reead    */

	        command_address=*(u32*)&FlashRxBuffer[1];
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <process_command+0x25c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
	        command_result=* (u32 *) command_address;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	607b      	str	r3, [r7, #4]
	        strTransmit_with_DMA((char*)&command_result, sizeof(command_result));
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2104      	movs	r1, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fd3f 	bl	8001268 <strTransmit_with_DMA>


		  break;
 80007ea:	e156      	b.n	8000a9a <process_command+0x3aa>
	  case 5 : /*Sector Erase*/
  	  	  	/* Wait bsy flag */
	        while(0 != (FLASH->SR & FLASH_SR_BSY))
 80007ec:	bf00      	nop
 80007ee:	4b54      	ldr	r3, [pc, #336]	; (8000940 <process_command+0x250>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f9      	bne.n	80007ee <process_command+0xfe>
	        {
	          /* Waiting */
	        }
	        /* example erase sector 17	 		* 5 17 *    */
	        /* Enable flash Sector Erase */
	        FLASH->CR |= FLASH_CR_SER;
 80007fa:	4a51      	ldr	r2, [pc, #324]	; (8000940 <process_command+0x250>)
 80007fc:	4b50      	ldr	r3, [pc, #320]	; (8000940 <process_command+0x250>)
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6113      	str	r3, [r2, #16]

	        /* Select sector to erase */
	        /* Check sector number for bank 2 */
	         sector_num = FlashRxBuffer[1];
 8000806:	4b4d      	ldr	r3, [pc, #308]	; (800093c <process_command+0x24c>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	61fb      	str	r3, [r7, #28]
	        if(12 <= sector_num)
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	2b0b      	cmp	r3, #11
 8000810:	d902      	bls.n	8000818 <process_command+0x128>
	        {
	          /* Bank 2 */
	          sector_num = sector_num + 4;
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	61fb      	str	r3, [r7, #28]
	        {

	        }

	        /* Write sector number */
	        FLASH->CR |= (FLASH_CR_SNB & (sector_num << 3));
 8000818:	4949      	ldr	r1, [pc, #292]	; (8000940 <process_command+0x250>)
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <process_command+0x250>)
 800081c:	691a      	ldr	r2, [r3, #16]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	610b      	str	r3, [r1, #16]

	        /* Start sector erase */
	        FLASH->CR |= FLASH_CR_STRT;
 8000828:	4a45      	ldr	r2, [pc, #276]	; (8000940 <process_command+0x250>)
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <process_command+0x250>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000832:	6113      	str	r3, [r2, #16]

	        /* Wait bsy flag */
	        while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000834:	bf00      	nop
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <process_command+0x250>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f9      	bne.n	8000836 <process_command+0x146>
	        {
	          /* Waiting */
	        }

	        /* Disable sector erase */
	        FLASH->CR &= ~FLASH_CR_SER;
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <process_command+0x250>)
 8000844:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <process_command+0x250>)
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	f023 0302 	bic.w	r3, r3, #2
 800084c:	6113      	str	r3, [r2, #16]


	//        strTransmit_with_DMA(erased, sizeof(erased));
	//       strTransmit_with_DMA(line, sizeof(line));
	        break;
 800084e:	e124      	b.n	8000a9a <process_command+0x3aa>
		  break;
	  case 6 : /*Write Protection*/
		  /* Wait bsy flag */
		        while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000850:	bf00      	nop
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <process_command+0x250>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f9      	bne.n	8000852 <process_command+0x162>
		        {
		          /* Waiting */
		        }

		        /* Check sector number */
		        sector_num = FlashRxBuffer[1];
 800085e:	4b37      	ldr	r3, [pc, #220]	; (800093c <process_command+0x24c>)
 8000860:	785b      	ldrb	r3, [r3, #1]
 8000862:	61fb      	str	r3, [r7, #28]
		        if(12 <= sector_num)
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b0b      	cmp	r3, #11
 8000868:	d90e      	bls.n	8000888 <process_command+0x198>
		        {
		          /* Bank 2 */
		          sector_num = sector_num - 12;
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b0c      	subs	r3, #12
 800086e:	61fb      	str	r3, [r7, #28]
		          FLASH->OPTCR1 &= ~((1 << sector_num) << 16);
 8000870:	4933      	ldr	r1, [pc, #204]	; (8000940 <process_command+0x250>)
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <process_command+0x250>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	2001      	movs	r0, #1
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	fa00 f202 	lsl.w	r2, r0, r2
 800087e:	0412      	lsls	r2, r2, #16
 8000880:	43d2      	mvns	r2, r2
 8000882:	4013      	ands	r3, r2
 8000884:	618b      	str	r3, [r1, #24]
 8000886:	e00a      	b.n	800089e <process_command+0x1ae>
		        }
		        else
		        {
		          /* Bank 2 */
		          FLASH->OPTCR &= ~((1 << sector_num) << 16);
 8000888:	492d      	ldr	r1, [pc, #180]	; (8000940 <process_command+0x250>)
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <process_command+0x250>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	2001      	movs	r0, #1
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	43d2      	mvns	r2, r2
 800089a:	4013      	ands	r3, r2
 800089c:	614b      	str	r3, [r1, #20]
		        }

		        /* Start sector write protection */
		        FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <process_command+0x250>)
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <process_command+0x250>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6153      	str	r3, [r2, #20]

		        /* Wait bsy flag */
		        while(0 != (FLASH->SR & FLASH_SR_BSY))
 80008aa:	bf00      	nop
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <process_command+0x250>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f9      	bne.n	80008ac <process_command+0x1bc>
		        }

	//	        strTransmit_with_DMA(protected, sizeof(protected));
	//	        strTransmit_with_DMA(line, sizeof(line));

		  break;
 80008b8:	e0ef      	b.n	8000a9a <process_command+0x3aa>
	  case 7 : /*Remove write protection*/
		  while (0 != (FLASH->SR &  FLASH_SR_BSY)){
 80008ba:	bf00      	nop
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <process_command+0x250>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f9      	bne.n	80008bc <process_command+0x1cc>

			  /* Waiting */
		  }

	        sector_num = FlashRxBuffer[1];
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <process_command+0x24c>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	61fb      	str	r3, [r7, #28]
	        if(12 <= sector_num)
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	2b0b      	cmp	r3, #11
 80008d2:	d90d      	bls.n	80008f0 <process_command+0x200>
	        {
	          /* Bank 2 */
	          sector_num = sector_num - 12;
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	3b0c      	subs	r3, #12
 80008d8:	61fb      	str	r3, [r7, #28]
	          FLASH->OPTCR1 |= ((1 << sector_num) << 16);
 80008da:	4919      	ldr	r1, [pc, #100]	; (8000940 <process_command+0x250>)
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <process_command+0x250>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	2001      	movs	r0, #1
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	fa00 f202 	lsl.w	r2, r0, r2
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4313      	orrs	r3, r2
 80008ec:	618b      	str	r3, [r1, #24]
 80008ee:	e009      	b.n	8000904 <process_command+0x214>
	        }
	        else
	        {
	          /* Bank 2 */
	          FLASH->OPTCR |= ((1 << sector_num) << 16);
 80008f0:	4913      	ldr	r1, [pc, #76]	; (8000940 <process_command+0x250>)
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <process_command+0x250>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	2001      	movs	r0, #1
 80008f8:	69fa      	ldr	r2, [r7, #28]
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	0412      	lsls	r2, r2, #16
 8000900:	4313      	orrs	r3, r2
 8000902:	614b      	str	r3, [r1, #20]
	        }

	        /* Start sector write protection */
	        FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <process_command+0x250>)
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <process_command+0x250>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6153      	str	r3, [r2, #20]


	        /* Wait bsy flag */
	        while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000910:	bf00      	nop
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <process_command+0x250>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f9      	bne.n	8000912 <process_command+0x222>
	  //      strTransmit_with_DMA(line, sizeof(line));




		  break;
 800091e:	e0bc      	b.n	8000a9a <process_command+0x3aa>
	  case 8 : /* Option Bytes Unlock */
	      /* Write OPTKEY1 */
	      FLASH->OPTKEYR = 0x08192A3B;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <process_command+0x250>)
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <process_command+0x260>)
 8000924:	609a      	str	r2, [r3, #8]

	      /* Write OPTKEY2 */
	      FLASH->OPTKEYR = 0x4C5D6E7F;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <process_command+0x250>)
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <process_command+0x264>)
 800092a:	609a      	str	r2, [r3, #8]

	  //    strTransmit_with_DMA(ob_unlocked, sizeof(ob_unlocked));
	  //    strTransmit_with_DMA(line, sizeof(line));
		  break;
 800092c:	e0b5      	b.n	8000a9a <process_command+0x3aa>
	  case 9 :/* Option Bytes Lock */
	      /* Write lock bit */
	      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <process_command+0x250>)
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <process_command+0x250>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6153      	str	r3, [r2, #20]

	  //    strTransmit_with_DMA(ob_locked, sizeof(ob_locked));
	  //    strTransmit_with_DMA(line, sizeof(line));
	      break;
 800093a:	e0ae      	b.n	8000a9a <process_command+0x3aa>
 800093c:	2000028c 	.word	0x2000028c
 8000940:	40023c00 	.word	0x40023c00
 8000944:	45670123 	.word	0x45670123
 8000948:	cdef89ab 	.word	0xcdef89ab
 800094c:	2000028d 	.word	0x2000028d
 8000950:	08192a3b 	.word	0x08192a3b
 8000954:	4c5d6e7f 	.word	0x4c5d6e7f

	  case 10: /* Jump */
		  /* get jump address */
		  command_address=*(u32*)&FlashRxBuffer[1];
 8000958:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <process_command+0x3b4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	617b      	str	r3, [r7, #20]
		  command_data=*(u32*)command_address;/* the stack pointer*/
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	613b      	str	r3, [r7, #16]


		  strTransmit_with_DMA((char*)command_data,sizeof(NACK));
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	2105      	movs	r1, #5
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fc7d 	bl	8001268 <strTransmit_with_DMA>
		  strTransmit_with_DMA((char*)command_address,sizeof(NACK));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	2105      	movs	r1, #5
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fc78 	bl	8001268 <strTransmit_with_DMA>

		  /*check if it's a valid stack pointer in Ram*/
		  if((command_data & 0x20000000) == 0x20000000){
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8086 	beq.w	8000a90 <process_command+0x3a0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i

			    /*Disable interrupts*/
		        __disable_irq();

		        /*Reset Gpio and DMA*/
		        RCC->AHB1RSTR|=(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_DMA2RST);
 8000986:	4a48      	ldr	r2, [pc, #288]	; (8000aa8 <process_command+0x3b8>)
 8000988:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <process_command+0x3b8>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6113      	str	r3, [r2, #16]

		        /* Release reset */
		         RCC->AHB1RSTR = 0;
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <process_command+0x3b8>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]

		         /* Reset USART1 */
		         RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 800099c:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <process_command+0x3b8>)
 800099e:	2210      	movs	r2, #16
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Release reset */
		         RCC->APB2RSTR = 0;
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <process_command+0x3b8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Reset RCC */
		         /* Set HSION bit to the reset value */
		         RCC->CR |= RCC_CR_HSION;
 80009a8:	4a3f      	ldr	r2, [pc, #252]	; (8000aa8 <process_command+0x3b8>)
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <process_command+0x3b8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]

		         /*wait till HSI is ready*/
		         while((RCC_CR_HSIRDY)  != ((RCC->CR) & RCC_CR_HSIRDY)){
 80009b4:	bf00      	nop
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <process_command+0x3b8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d1f9      	bne.n	80009b6 <process_command+0x2c6>
		        	  /*Waiting*/

		         }

		         /* Set HSITRIM[4:0] bits to the reset value */
		         RCC->CR |= RCC_CR_HSITRIM_4;
 80009c2:	4a39      	ldr	r2, [pc, #228]	; (8000aa8 <process_command+0x3b8>)
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <process_command+0x3b8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6013      	str	r3, [r2, #0]

		         /* Reset CFGR register */
		         RCC->CFGR = 0;
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <process_command+0x3b8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]

		         /* Wait till clock switch is ready and
		          * HSI oscillator selected as system clock */
		         while(0 != (RCC_CFGR_SWS & RCC->CFGR))
 80009d4:	bf00      	nop
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <process_command+0x3b8>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 030c 	and.w	r3, r3, #12
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f9      	bne.n	80009d6 <process_command+0x2e6>
		           /* Waiting */
		         }


		         /* Clear HSEON, HSEBYP and CSSON bits */
		         RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <process_command+0x3b8>)
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <process_command+0x3b8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80009ec:	6013      	str	r3, [r2, #0]

		         /* Wait till HSE is disabled */
		         while(0 != (RCC_CR_HSERDY & RCC->CR))
 80009ee:	bf00      	nop
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <process_command+0x3b8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f9      	bne.n	80009f0 <process_command+0x300>
		         {
		           /* Waiting */
		         }

		         /* Clear PLLON bit */
		         RCC->CR &= ~RCC_CR_PLLON;
 80009fc:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <process_command+0x3b8>)
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <process_command+0x3b8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a06:	6013      	str	r3, [r2, #0]

		         /* Wait till PLL is disabled */
		         while(0 != (RCC_CR_PLLRDY & RCC->CR))
 8000a08:	bf00      	nop
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <process_command+0x3b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f9      	bne.n	8000a0a <process_command+0x31a>
		         {
		           /* Waiting */
		         }
/*STM32F429*/
		         /* Reset PLLCFGR register to default value */
		         RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <process_command+0x3b8>)
 8000a18:	4a24      	ldr	r2, [pc, #144]	; (8000aac <process_command+0x3bc>)
 8000a1a:	605a      	str	r2, [r3, #4]
		             | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

		         RCC->PLLI2SCFGR = 0x24003000;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <process_command+0x3b8>)
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <process_command+0x3c0>)
 8000a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


		         RCC->PLLSAICFGR =0x24003000;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <process_command+0x3b8>)
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <process_command+0x3c0>)
 8000a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		        /*Disable all interrupt*/
		         RCC->CIR=0x00;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <process_command+0x3b8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

		         /* Clear LSION bit */
		        RCC->CSR &= ~RCC_CSR_LSION;
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <process_command+0x3b8>)
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <process_command+0x3b8>)
 8000a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	6753      	str	r3, [r2, #116]	; 0x74

		         /* Reset all CSR flags */
		         RCC->CSR &= ~RCC_CSR_RMVF;
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <process_command+0x3b8>)
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <process_command+0x3b8>)
 8000a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a48:	6753      	str	r3, [r2, #116]	; 0x74


		         /* Update the SystemCoreClock global variable */
		           SystemCoreClock = HSI_VALUE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <process_command+0x3c4>)
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <process_command+0x3c8>)
 8000a4e:	601a      	str	r2, [r3, #0]


		         /* Reset SysTick */
		         SysTick->CTRL = 0;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <process_command+0x3cc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
		         SysTick->LOAD = 0;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <process_command+0x3cc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
		         SysTick->VAL = 0;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <process_command+0x3cc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
		         /* Check Jump address */
		         if(0x1FFF0000 == command_address)	/* if want to  jump to system bootloader */
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <process_command+0x3d0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d006      	beq.n	8000a78 <process_command+0x388>
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 8000a6a:	f3bf 8f5f 	dmb	sy
		                }
		         else  /* if  want to jump to some image in flash*/
		         {
		             /* Vector Table Relocation in Internal FLASH */
		             __DMB();
		             SCB->VTOR = command_address;
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <process_command+0x3d4>)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 8000a74:	f3bf 8f4f 	dsb	sy
		             __DSB();
		         }

		         /**/
		         void(*jump_address)(void)=(void *)(*((uint32_t *)(command_address + 4)));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	60bb      	str	r3, [r7, #8]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f383 8808 	msr	MSP, r3
		         /* Set stack pointer */
		         __set_MSP(command_data);

		         /* Jump */
		         jump_address();
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4798      	blx	r3
			  /*Send NACK*/
			  strTransmit_with_DMA(NACK,sizeof(NACK));
		  }

	  default:
		  break;
 8000a8e:	e003      	b.n	8000a98 <process_command+0x3a8>
			  strTransmit_with_DMA(NACK,sizeof(NACK));
 8000a90:	2105      	movs	r1, #5
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <process_command+0x3d8>)
 8000a94:	f000 fbe8 	bl	8001268 <strTransmit_with_DMA>
		  break;
 8000a98:	bf00      	nop


	  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000028d 	.word	0x2000028d
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	04003010 	.word	0x04003010
 8000ab0:	24003000 	.word	0x24003000
 8000ab4:	200001b0 	.word	0x200001b0
 8000ab8:	00f42400 	.word	0x00f42400
 8000abc:	e000e010 	.word	0xe000e010
 8000ac0:	1fff0000 	.word	0x1fff0000
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	200001a8 	.word	0x200001a8

08000acc <Main_IMG_Available>:
 * @brief used to check the if the first image is available
 * @note
 * @param   void
 * @retval  OK if stack pointer is correct NOT_OK if stack pointer is invalid
 */
u8 Main_IMG_Available(){
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
	u8 result=NOT_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]

	u32 Img_address=0x080E0000;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <Main_IMG_Available+0x34>)
 8000ad8:	603b      	str	r3, [r7, #0]
	u32  address=*(u32*)&Img_address;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	60bb      	str	r3, [r7, #8]
	u32  data=*(u32*)address;/* the stack pointer*/
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	607b      	str	r3, [r7, #4]

	if((data & 0x20000000) == 0x20000000) result=OK;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <Main_IMG_Available+0x26>
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]

	return result;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	080e0000 	.word	0x080e0000

08000b04 <Secondary_IMG_Available>:
 * @brief used to check if the second image is available
 * @note
 * @param   void
 * @retval  OK if stack pointer is correct NOT_OK if stack pointer is invalid
 */
u8 Secondary_IMG_Available(){
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
	u8 result=NOT_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]

	u32 Img_address=0x081E0000;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <Secondary_IMG_Available+0x34>)
 8000b10:	603b      	str	r3, [r7, #0]
	u32  address=*(u32*)&Img_address;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	60bb      	str	r3, [r7, #8]
	u32  data=*(u32*)address;/* the stack pointer*/
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	607b      	str	r3, [r7, #4]
	if((data & 0x20000000) == 0x20000000) result=OK;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <Secondary_IMG_Available+0x26>
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]

	return result;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	081e0000 	.word	0x081e0000

08000b3c <Jump_To_Main_IMG>:
 * @brief  jump to main image
 * @note
 * @param   void
 * @retval  void
 */
void Jump_To_Main_IMG (){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
	u32 Img_address=0x080E0000;
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <Jump_To_Main_IMG+0x134>)
 8000b44:	607b      	str	r3, [r7, #4]
	u32  address=*(u32*)&Img_address;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	617b      	str	r3, [r7, #20]
	u32  data=*(u32*)address;/* the stack pointer*/
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]



		  /*check if it's a valid stack pointer in Ram*/
		  if((data & 0x20000000) == 0x20000000){
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8085 	beq.w	8000c66 <Jump_To_Main_IMG+0x12a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i

			    /*Disable interrupts*/
		        __disable_irq();

		        /*Reset Gpio and DMA*/
		        RCC->AHB1RSTR|=(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_DMA2RST);
 8000b5e:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6113      	str	r3, [r2, #16]

		        /* Release reset */
		         RCC->AHB1RSTR = 0;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]

		         /* Reset USART1 */
		         RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 8000b74:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Release reset */
		         RCC->APB2RSTR = 0;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Reset RCC */
		         /* Set HSION bit to the reset value */
		         RCC->CR |= RCC_CR_HSION;
 8000b80:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

		         /*wait till HSI is ready*/
		         while((RCC_CR_HSIRDY)  != ((RCC->CR) & RCC_CR_HSIRDY)){
 8000b8c:	bf00      	nop
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d1f9      	bne.n	8000b8e <Jump_To_Main_IMG+0x52>
		        	  /*Waiting*/

		         }

		         /* Set HSITRIM[4:0] bits to the reset value */
		         RCC->CR |= RCC_CR_HSITRIM_4;
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6013      	str	r3, [r2, #0]

		         /* Reset CFGR register */
		         RCC->CFGR = 0;
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]

		         /* Wait till clock switch is ready and
		          * HSI oscillator selected as system clock */
		         while(0 != (RCC_CFGR_SWS & RCC->CFGR))
 8000bac:	bf00      	nop
 8000bae:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <Jump_To_Main_IMG+0x72>
		           /* Waiting */
		         }


		         /* Clear HSEON, HSEBYP and CSSON bits */
		         RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8000bba:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000bc4:	6013      	str	r3, [r2, #0]

		         /* Wait till HSE is disabled */
		         while(0 != (RCC_CR_HSERDY & RCC->CR))
 8000bc6:	bf00      	nop
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f9      	bne.n	8000bc8 <Jump_To_Main_IMG+0x8c>
		         {
		           /* Waiting */
		         }

		         /* Clear PLLON bit */
		         RCC->CR &= ~RCC_CR_PLLON;
 8000bd4:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bde:	6013      	str	r3, [r2, #0]

		         /* Wait till PLL is disabled */
		         while(0 != (RCC_CR_PLLRDY & RCC->CR))
 8000be0:	bf00      	nop
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <Jump_To_Main_IMG+0xa6>
		         {
		           /* Waiting */
		         }
	/*STM32F429*/
		         /* Reset PLLCFGR register to default value */
		         RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <Jump_To_Main_IMG+0x13c>)
 8000bf2:	605a      	str	r2, [r3, #4]
		             | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

		         RCC->PLLI2SCFGR = 0x24003000;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <Jump_To_Main_IMG+0x140>)
 8000bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


		         RCC->PLLSAICFGR =0x24003000;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <Jump_To_Main_IMG+0x140>)
 8000c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		        /*Disable all interrupt*/
		         RCC->CIR=0x00;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]

		         /* Clear LSION bit */
		        RCC->CSR &= ~RCC_CSR_LSION;
 8000c0a:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	6753      	str	r3, [r2, #116]	; 0x74

		         /* Reset all CSR flags */
		         RCC->CSR &= ~RCC_CSR_RMVF;
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <Jump_To_Main_IMG+0x138>)
 8000c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c20:	6753      	str	r3, [r2, #116]	; 0x74


		         /* Update the SystemCoreClock global variable */
		           SystemCoreClock = HSI_VALUE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <Jump_To_Main_IMG+0x144>)
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <Jump_To_Main_IMG+0x148>)
 8000c26:	601a      	str	r2, [r3, #0]


		         /* Reset SysTick */
		         SysTick->CTRL = 0;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <Jump_To_Main_IMG+0x14c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
		         SysTick->LOAD = 0;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <Jump_To_Main_IMG+0x14c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
		         SysTick->VAL = 0;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <Jump_To_Main_IMG+0x14c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
		         /* Check Jump address */
		         if(0x1FFF0000 == address)	/* if want to  jump to system bootloader */
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <Jump_To_Main_IMG+0x150>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d006      	beq.n	8000c50 <Jump_To_Main_IMG+0x114>
  __ASM volatile ("dmb");
 8000c42:	f3bf 8f5f 	dmb	sy
		                }
		         else  /* if  want to jump to some image in flash*/
		         {
		             /* Vector Table Relocation in Internal FLASH */
		             __DMB();
		             SCB->VTOR = address;
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <Jump_To_Main_IMG+0x154>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 8000c4c:	f3bf 8f4f 	dsb	sy
		             __DSB();
		         }

		         /**/
		         void(*jump_main1)(void)=(void *)(*((uint32_t *)(address + 4)));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3304      	adds	r3, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	f383 8808 	msr	MSP, r3
		         /* Set stack pointer */
		         __set_MSP(data);

		         /* Jump */
		         jump_main1();
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4798      	blx	r3


}

}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	080e0000 	.word	0x080e0000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	04003010 	.word	0x04003010
 8000c7c:	24003000 	.word	0x24003000
 8000c80:	200001b0 	.word	0x200001b0
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	e000e010 	.word	0xe000e010
 8000c8c:	1fff0000 	.word	0x1fff0000
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Jump_To_Secondary_IMG>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Jump_To_Secondary_IMG(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

	u32 Img_address=0x081E0000;
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <Jump_To_Secondary_IMG+0x134>)
 8000c9c:	607b      	str	r3, [r7, #4]
	u32  address=*(u32*)&Img_address;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	617b      	str	r3, [r7, #20]
	u32  data=*(u32*)address;/* the stack pointer*/
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]



		  /*check if it's a valid stack pointer in Ram*/
		  if((data & 0x20000000) == 0x20000000){
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8085 	beq.w	8000dbe <Jump_To_Secondary_IMG+0x12a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i

			    /*Disable interrupts*/
		        __disable_irq();

		        /*Reset Gpio and DMA*/
		        RCC->AHB1RSTR|=(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_DMA2RST);
 8000cb6:	4a45      	ldr	r2, [pc, #276]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6113      	str	r3, [r2, #16]

		        /* Release reset */
		         RCC->AHB1RSTR = 0;
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]

		         /* Reset USART1 */
		         RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 8000ccc:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cce:	2210      	movs	r2, #16
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Release reset */
		         RCC->APB2RSTR = 0;
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24

		         /* Reset RCC */
		         /* Set HSION bit to the reset value */
		         RCC->CR |= RCC_CR_HSION;
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]

		         /*wait till HSI is ready*/
		         while((RCC_CR_HSIRDY)  != ((RCC->CR) & RCC_CR_HSIRDY)){
 8000ce4:	bf00      	nop
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d1f9      	bne.n	8000ce6 <Jump_To_Secondary_IMG+0x52>
		        	  /*Waiting*/

		         }

		         /* Set HSITRIM[4:0] bits to the reset value */
		         RCC->CR |= RCC_CR_HSITRIM_4;
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6013      	str	r3, [r2, #0]

		         /* Reset CFGR register */
		         RCC->CFGR = 0;
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

		         /* Wait till clock switch is ready and
		          * HSI oscillator selected as system clock */
		         while(0 != (RCC_CFGR_SWS & RCC->CFGR))
 8000d04:	bf00      	nop
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f9      	bne.n	8000d06 <Jump_To_Secondary_IMG+0x72>
		           /* Waiting */
		         }


		         /* Clear HSEON, HSEBYP and CSSON bits */
		         RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8000d12:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000d1c:	6013      	str	r3, [r2, #0]

		         /* Wait till HSE is disabled */
		         while(0 != (RCC_CR_HSERDY & RCC->CR))
 8000d1e:	bf00      	nop
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f9      	bne.n	8000d20 <Jump_To_Secondary_IMG+0x8c>
		         {
		           /* Waiting */
		         }

		         /* Clear PLLON bit */
		         RCC->CR &= ~RCC_CR_PLLON;
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d36:	6013      	str	r3, [r2, #0]

		         /* Wait till PLL is disabled */
		         while(0 != (RCC_CR_PLLRDY & RCC->CR))
 8000d38:	bf00      	nop
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <Jump_To_Secondary_IMG+0xa6>
		         {
		           /* Waiting */
		         }
	/*STM32F429*/
		         /* Reset PLLCFGR register to default value */
		         RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <Jump_To_Secondary_IMG+0x13c>)
 8000d4a:	605a      	str	r2, [r3, #4]
		             | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

		         RCC->PLLI2SCFGR = 0x24003000;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <Jump_To_Secondary_IMG+0x140>)
 8000d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


		         RCC->PLLSAICFGR =0x24003000;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <Jump_To_Secondary_IMG+0x140>)
 8000d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		        /*Disable all interrupt*/
		         RCC->CIR=0x00;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]

		         /* Clear LSION bit */
		        RCC->CSR &= ~RCC_CSR_LSION;
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6753      	str	r3, [r2, #116]	; 0x74

		         /* Reset all CSR flags */
		         RCC->CSR &= ~RCC_CSR_RMVF;
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <Jump_To_Secondary_IMG+0x138>)
 8000d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d78:	6753      	str	r3, [r2, #116]	; 0x74


		         /* Update the SystemCoreClock global variable */
		           SystemCoreClock = HSI_VALUE;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <Jump_To_Secondary_IMG+0x144>)
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <Jump_To_Secondary_IMG+0x148>)
 8000d7e:	601a      	str	r2, [r3, #0]


		         /* Reset SysTick */
		         SysTick->CTRL = 0;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <Jump_To_Secondary_IMG+0x14c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
		         SysTick->LOAD = 0;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <Jump_To_Secondary_IMG+0x14c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
		         SysTick->VAL = 0;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <Jump_To_Secondary_IMG+0x14c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
		         /* Check Jump address */
		         if(0x1FFF0000 == address)	/* if want to  jump to system bootloader */
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <Jump_To_Secondary_IMG+0x150>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d006      	beq.n	8000da8 <Jump_To_Secondary_IMG+0x114>
  __ASM volatile ("dmb");
 8000d9a:	f3bf 8f5f 	dmb	sy
		                }
		         else  /* if  want to jump to some image in flash*/
		         {
		             /* Vector Table Relocation in Internal FLASH */
		             __DMB();
		             SCB->VTOR = address;
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <Jump_To_Secondary_IMG+0x154>)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 8000da4:	f3bf 8f4f 	dsb	sy
		             __DSB();
		         }

		         /**/
		         void(*jump_main2)(void)=(void *)(*((uint32_t *)(address + 4)));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3304      	adds	r3, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	f383 8808 	msr	MSP, r3
		         /* Set stack pointer */
		         __set_MSP(data);

		         /* Jump */
		         jump_main2();
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4798      	blx	r3


}

}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	081e0000 	.word	0x081e0000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	04003010 	.word	0x04003010
 8000dd4:	24003000 	.word	0x24003000
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	00f42400 	.word	0x00f42400
 8000de0:	e000e010 	.word	0xe000e010
 8000de4:	1fff0000 	.word	0x1fff0000
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da0b      	bge.n	8000e18 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e00:	490d      	ldr	r1, [pc, #52]	; (8000e38 <NVIC_SetPriority+0x4c>)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	3b04      	subs	r3, #4
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000e16:	e009      	b.n	8000e2c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000e18:	4908      	ldr	r1, [pc, #32]	; (8000e3c <NVIC_SetPriority+0x50>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f7ff ffc2 	bl	8000dec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <SysTick_IncrementTicks_cb>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_IncrementTicks_cb(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_IncrementTicks_cb+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <SysTick_IncrementTicks_cb+0x18>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200001e0 	.word	0x200001e0

08000ea0 <SysTick_Delay>:
 * @note    SysTick will be update with IRQ callback
 * @param   Waiting time in milliseconds
 * @retval  None
 */
void SysTick_Delay(uint32_t wait_time_ms)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SysTick_Delay+0x2c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 8000eae:	bf00      	nop
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SysTick_Delay+0x2c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad2      	subs	r2, r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3f8      	bcc.n	8000eb0 <SysTick_Delay+0x10>
  {

  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001e0 	.word	0x200001e0

08000ed0 <SysTick_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 8000ed6:	f000 fc77 	bl	80017c8 <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 180000000)
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <SysTick_Init+0x3c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <SysTick_Init+0x40>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d000      	beq.n	8000ee6 <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 8000ee4:	e7fe      	b.n	8000ee4 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <SysTick_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Init+0x44>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	099b      	lsrs	r3, r3, #6
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffa4 	bl	8000e40 <SysTick_Config>
 8000ef8:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8000f00:	e7fe      	b.n	8000f00 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001b0 	.word	0x200001b0
 8000f10:	0aba9500 	.word	0x0aba9500
 8000f14:	10624dd3 	.word	0x10624dd3

08000f18 <GPIO_Init_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_Init_LED(Led_Type led)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check LED type, please */
  switch (led)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d000      	beq.n	8000f2a <GPIO_Init_LED+0x12>
      GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13 | GPIO_PUPDR_PUPDR14);

      break;

    default:
      break;
 8000f28:	e038      	b.n	8000f9c <GPIO_Init_LED+0x84>
      RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <GPIO_Init_LED+0x90>)
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <GPIO_Init_LED+0x90>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
      GPIOG->MODER &= ~(GPIO_MODER_MODER13 | GPIO_MODER_MODER14);
 8000f36:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
 8000f40:	6013      	str	r3, [r2, #0]
      GPIOG->MODER |= GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0;
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 8000f4c:	6013      	str	r3, [r2, #0]
      GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13 | GPIO_OTYPER_OT_14);
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f58:	6053      	str	r3, [r2, #4]
      GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13_0 | GPIO_OSPEEDER_OSPEEDR13_1
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f043 5370 	orr.w	r3, r3, #1006632960	; 0x3c000000
 8000f64:	6093      	str	r3, [r2, #8]
      RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <GPIO_Init_LED+0x90>)
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <GPIO_Init_LED+0x90>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
      SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <GPIO_Init_LED+0x98>)
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <GPIO_Init_LED+0x98>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6213      	str	r3, [r2, #32]
      while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY)
 8000f7e:	bf00      	nop
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <GPIO_Init_LED+0x98>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8c:	d1f8      	bne.n	8000f80 <GPIO_Init_LED+0x68>
      GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13 | GPIO_PUPDR_PUPDR14);
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <GPIO_Init_LED+0x94>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
 8000f98:	60d3      	str	r3, [r2, #12]
      break;
 8000f9a:	bf00      	nop
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <GPIO_Init_PB>:
 * @note    On-board push button connected to PA0
 * @param   None
 * @retval  None
 */
void GPIO_Init_PB()
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* Enable post GPIOA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <GPIO_Init_PB+0x34>)
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <GPIO_Init_PB+0x34>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Select input mode for PA0 */
  GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <GPIO_Init_PB+0x38>)
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <GPIO_Init_PB+0x38>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	6013      	str	r3, [r2, #0]

  /* Select no pull up because it has external pull down */
  GPIOA->PUPDR |= ~(GPIO_PUPDR_PUPDR0);
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <GPIO_Init_PB+0x38>)
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <GPIO_Init_PB+0x38>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f063 0303 	orn	r3, r3, #3
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <GPIO_Result_PB>:
 * @brief   Push button GPIO get output value function
 * @note    On-board push button connected to PA0
 * @param   None
 * @retval  None
 */
u8 GPIO_Result_PB(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
	volatile u8 result;

 result = (GPIOA->IDR)&(GPIO_IDR_IDR_0);
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <GPIO_Result_PB+0x24>)
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	71fb      	strb	r3, [r7, #7]
 return result;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40020000 	.word	0x40020000

08001018 <GPIO_TurnON_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_TurnON_LED(Led_Type led)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  switch (led)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d00e      	beq.n	8001046 <GPIO_TurnON_LED+0x2e>
 8001028:	2b02      	cmp	r3, #2
 800102a:	d007      	beq.n	800103c <GPIO_TurnON_LED+0x24>
 800102c:	2b00      	cmp	r3, #0
 800102e:	d000      	beq.n	8001032 <GPIO_TurnON_LED+0x1a>
    case EVAL_GREEN_LED_BITBAND:
      GREEN_LED_BITBAND = 1;
      break;

    default:
      break;
 8001030:	e00d      	b.n	800104e <GPIO_TurnON_LED+0x36>
      GPIOG->BSRRL = GPIO_BSRR_BS_13;
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <GPIO_TurnON_LED+0x44>)
 8001034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001038:	831a      	strh	r2, [r3, #24]
      break;
 800103a:	e008      	b.n	800104e <GPIO_TurnON_LED+0x36>
      GPIOG->BSRRL = GPIO_BSRR_BS_14;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <GPIO_TurnON_LED+0x44>)
 800103e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001042:	831a      	strh	r2, [r3, #24]
      break;
 8001044:	e003      	b.n	800104e <GPIO_TurnON_LED+0x36>
      GREEN_LED_BITBAND = 1;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <GPIO_TurnON_LED+0x48>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
      break;
 800104c:	bf00      	nop
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021800 	.word	0x40021800
 8001060:	424302b4 	.word	0x424302b4

08001064 <GPIO_TurnOFF_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_TurnOFF_LED(Led_Type led)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  switch (led)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d00e      	beq.n	8001092 <GPIO_TurnOFF_LED+0x2e>
 8001074:	2b02      	cmp	r3, #2
 8001076:	d007      	beq.n	8001088 <GPIO_TurnOFF_LED+0x24>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d000      	beq.n	800107e <GPIO_TurnOFF_LED+0x1a>
    case EVAL_GREEN_LED_BITBAND:
      GREEN_LED_BITBAND = 0;
      break;

    default:
      break;
 800107c:	e00d      	b.n	800109a <GPIO_TurnOFF_LED+0x36>
      GPIOG->BSRRH = GPIO_BSRR_BS_13;
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <GPIO_TurnOFF_LED+0x44>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	835a      	strh	r2, [r3, #26]
      break;
 8001086:	e008      	b.n	800109a <GPIO_TurnOFF_LED+0x36>
      GPIOG->BSRRH = GPIO_BSRR_BS_14;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <GPIO_TurnOFF_LED+0x44>)
 800108a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108e:	835a      	strh	r2, [r3, #26]
      break;
 8001090:	e003      	b.n	800109a <GPIO_TurnOFF_LED+0x36>
      GREEN_LED_BITBAND = 0;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <GPIO_TurnOFF_LED+0x48>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
      break;
 8001098:	bf00      	nop
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021800 	.word	0x40021800
 80010ac:	424302b4 	.word	0x424302b4

080010b0 <GPIO_OUT_INIT>:
 * @note
 * @param	Port Name , bit Number , Mode, Alternative function , output type/ ,output speed, pull up / pull down
 * @retval
 */
void GPIO_OUT_INIT(GPIO_PORT port_name , u8 bit_number , gpio_mode mode, u8 AL_fun ,gpio_output_type out_type , gpio_output_speed speed, gpio_pulling  pull_type  )
{
 80010b0:	b490      	push	{r4, r7}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4603      	mov	r3, r0
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	460b      	mov	r3, r1
 80010c8:	717b      	strb	r3, [r7, #5]
 80010ca:	4613      	mov	r3, r2
 80010cc:	713b      	strb	r3, [r7, #4]
    /* Enable port X clock */

	RCC_AHB1ENR |= (1<<port_name);
 80010ce:	493c      	ldr	r1, [pc, #240]	; (80011c0 <GPIO_OUT_INIT+0x110>)
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <GPIO_OUT_INIT+0x110>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	2001      	movs	r0, #1
 80010d8:	fa00 f202 	lsl.w	r2, r0, r2
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]

    /* Calculating port base addr */

	u32 portbase= myGPIOA_BASE + (u32)((1024)*(port_name));
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010ec:	60fb      	str	r3, [r7, #12]

	/* Select output mode */   /*   using generic formla as each port base exeede the previous by 0x400 */

	//u32 x =
	bit_word_addr(portbase,GPIOx_MODER,bit_number)|=(u32)(mode<<(2*bit_number));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	7978      	ldrb	r0, [r7, #5]
 80010f6:	79b9      	ldrb	r1, [r7, #6]
 80010f8:	0049      	lsls	r1, r1, #1
 80010fa:	fa00 f101 	lsl.w	r1, r0, r1
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

	/* Select Alternative function */
	if(bit_number<8)
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	2b07      	cmp	r3, #7
 8001106:	d80d      	bhi.n	8001124 <GPIO_OUT_INIT+0x74>
		bit_word_addr(portbase,GPIOx_AFRL,bit_number) |=((u32)(AL_fun<<(4*bit_number)));
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3320      	adds	r3, #32
 800110c:	4618      	mov	r0, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3320      	adds	r3, #32
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	7939      	ldrb	r1, [r7, #4]
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4313      	orrs	r3, r2
 8001120:	6003      	str	r3, [r0, #0]
 8001122:	e00d      	b.n	8001140 <GPIO_OUT_INIT+0x90>
	else
		bit_word_addr(portbase,GPIOx_AFRH,bit_number) |=((u32)(AL_fun<<(4*(bit_number-8))));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3324      	adds	r3, #36	; 0x24
 8001128:	4618      	mov	r0, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3324      	adds	r3, #36	; 0x24
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	7939      	ldrb	r1, [r7, #4]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	3a08      	subs	r2, #8
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4313      	orrs	r3, r2
 800113e:	6003      	str	r3, [r0, #0]


	/* Select output type push-pull */

	bit_word_addr(portbase,GPIOx_OTYPER,bit_number) |=(u32)(out_type<<bit_number);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3304      	adds	r3, #4
 8001144:	4618      	mov	r0, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	7e39      	ldrb	r1, [r7, #24]
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4313      	orrs	r3, r2
 8001156:	6003      	str	r3, [r0, #0]


	/* Select output Speed */

	bit_word_addr(portbase,GPIOx_OSPEEDR,bit_number) |=(u32)(speed<<(2*bit_number));
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	4618      	mov	r0, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3308      	adds	r3, #8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	7f39      	ldrb	r1, [r7, #28]
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	0052      	lsls	r2, r2, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	4313      	orrs	r3, r2
 8001170:	6003      	str	r3, [r0, #0]

    /* Enable SYSCFG clock */

	RCC_APB2ENR|=RCC_APB2LPENR_SYSCFGLPEN;
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <GPIO_OUT_INIT+0x114>)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <GPIO_OUT_INIT+0x114>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6013      	str	r3, [r2, #0]


    /* Enable compensation cell */
	SYSCFG_CMPCR|=SYSCFG_CMPCR_CMP_PD;
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <GPIO_OUT_INIT+0x118>)
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <GPIO_OUT_INIT+0x118>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6013      	str	r3, [r2, #0]

    //SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;

    /* Wait till compensation cell is ready */

    while((SYSCFG_CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY)
 800118a:	bf00      	nop
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <GPIO_OUT_INIT+0x118>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001198:	d1f8      	bne.n	800118c <GPIO_OUT_INIT+0xdc>
    }


	/* Select output pull_type */

	bit_word_addr(portbase,GPIOx_PUPDR,bit_number) |=(pull_type<<(2*bit_number));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	330c      	adds	r3, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	330c      	adds	r3, #12
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80011aa:	79ba      	ldrb	r2, [r7, #6]
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	6003      	str	r3, [r0, #0]



*/

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc90      	pop	{r4, r7}
 80011be:	4770      	bx	lr
 80011c0:	40023830 	.word	0x40023830
 80011c4:	40023844 	.word	0x40023844
 80011c8:	40013820 	.word	0x40013820

080011cc <myGPIO_TurnON_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void myGPIO_TurnON_LED(myLed_Type led)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]


	  switch (led)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d00e      	beq.n	80011fa <myGPIO_TurnON_LED+0x2e>
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d007      	beq.n	80011f0 <myGPIO_TurnON_LED+0x24>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d000      	beq.n	80011e6 <myGPIO_TurnON_LED+0x1a>
	    case myEVAL_GREEN_LED_BITBAND:
	   //   GREEN_LED_BITBAND = 1;
	      break;

	    default:
	      break;
 80011e4:	e00a      	b.n	80011fc <myGPIO_TurnON_LED+0x30>
	      GPIOG->BSRRL = GPIO_BSRR_BS_13;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <myGPIO_TurnON_LED+0x3c>)
 80011e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ec:	831a      	strh	r2, [r3, #24]
	      break;
 80011ee:	e005      	b.n	80011fc <myGPIO_TurnON_LED+0x30>
	      GPIOG->BSRRL = GPIO_BSRR_BS_14;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <myGPIO_TurnON_LED+0x3c>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	831a      	strh	r2, [r3, #24]
	      break;
 80011f8:	e000      	b.n	80011fc <myGPIO_TurnON_LED+0x30>
	      break;
 80011fa:	bf00      	nop

    default:
      break;
  }
  */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021800 	.word	0x40021800

0800120c <myGPIO_TurnOFF_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void myGPIO_TurnOFF_LED(myLed_Type led)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]

	  switch (led)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d00c      	beq.n	8001236 <myGPIO_TurnOFF_LED+0x2a>
 800121c:	2b02      	cmp	r3, #2
 800121e:	d006      	beq.n	800122e <myGPIO_TurnOFF_LED+0x22>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d000      	beq.n	8001226 <myGPIO_TurnOFF_LED+0x1a>
	    case myEVAL_GREEN_LED_BITBAND:
	      //GREEN_LED_BITBAND = 0;
	      break;

	    default:
	      break;
 8001224:	e008      	b.n	8001238 <myGPIO_TurnOFF_LED+0x2c>
	      GPIOG->BSRRH = GPIO_BSRR_BR_13;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <myGPIO_TurnOFF_LED+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	835a      	strh	r2, [r3, #26]
	      break;
 800122c:	e004      	b.n	8001238 <myGPIO_TurnOFF_LED+0x2c>
	      GPIOG->BSRRH = GPIO_BSRR_BR_14;
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <myGPIO_TurnOFF_LED+0x38>)
 8001230:	2200      	movs	r2, #0
 8001232:	835a      	strh	r2, [r3, #26]
	      break;
 8001234:	e000      	b.n	8001238 <myGPIO_TurnOFF_LED+0x2c>
	      break;
 8001236:	bf00      	nop
      break;
  }


*/
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021800 	.word	0x40021800

08001248 <RCC_SystemReset>:
 * @note
 * @param   None
 * @retval  None
 */
void RCC_SystemReset(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Perform system reset */

  //NVIC_SystemReset();
	SCB_AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <RCC_SystemReset+0x18>)
                 (SCB_AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <RCC_SystemReset+0x18>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <RCC_SystemReset+0x1c>)
 8001258:	4313      	orrs	r3, r2
	SCB_AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800125a:	600b      	str	r3, [r1, #0]
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  while(1);
 800125c:	e7fe      	b.n	800125c <RCC_SystemReset+0x14>
 800125e:	bf00      	nop
 8001260:	e000ed0c 	.word	0xe000ed0c
 8001264:	05fa0004 	.word	0x05fa0004

08001268 <strTransmit_with_DMA>:
  * @note
  * @param   str, size
  * @retval  None
  */
  void strTransmit_with_DMA(const char * str, uint8_t size)
 {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
   /* Check null pointers */
   if(NULL != str)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d016      	beq.n	80012a8 <strTransmit_with_DMA+0x40>
   {
     /* Wait until DMA2 stream 7 is disabled */
     while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 800127a:	bf00      	nop
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <strTransmit_with_DMA+0x4c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d0f9      	beq.n	800127c <strTransmit_with_DMA+0x14>
       /* Do nothing, the enable flag shall reset
        * when DMA transfer complete */
     }

     /* Set memory address */
     DMA2_Stream7->M0AR = (uint32_t)str;
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <strTransmit_with_DMA+0x4c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60d3      	str	r3, [r2, #12]

     /* Set number of data items */
     DMA2_Stream7->NDTR = size;
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <strTransmit_with_DMA+0x4c>)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	6053      	str	r3, [r2, #4]

     /* Clear all interrupt flags */
     DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <strTransmit_with_DMA+0x50>)
 8001296:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800129a:	60da      	str	r2, [r3, #12]
         | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTCIF7);

     /* Enable DMA2 stream 7 */
     DMA2_Stream7->CR |= DMA_SxCR_EN;
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <strTransmit_with_DMA+0x4c>)
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <strTransmit_with_DMA+0x4c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]
   }
   else
   {
     /* Null pointers, do nothing */
   }
 }
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	400264b8 	.word	0x400264b8
 80012b8:	40026400 	.word	0x40026400

080012bc <myUSART1_GPIO_Config>:
 * @brief   Configure GPIO with AF7, USART1 connected to APB2 with 90MHz clock
 * @note    PA9 -> USART1_TX, PA10 -> USART1_RX
 * @param   None
 * @retval  None
 */
void myUSART1_GPIO_Config(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af04      	add	r7, sp, #16

	//RCC_APB1ENR|=RCC_AHB1ENR_GPIOAEN;
	GPIO_OUT_INIT(USART1_TX_PORT  , USART1_TX_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
 80012c2:	2301      	movs	r3, #1
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2307      	movs	r3, #7
 80012d0:	2202      	movs	r2, #2
 80012d2:	2109      	movs	r1, #9
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff feeb 	bl	80010b0 <GPIO_OUT_INIT>
	GPIO_OUT_INIT(USART1_RX_PORT  , USART1_RX_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
 80012da:	2301      	movs	r3, #1
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2307      	movs	r3, #7
 80012e8:	2202      	movs	r2, #2
 80012ea:	210a      	movs	r1, #10
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fedf 	bl	80010b0 <GPIO_OUT_INIT>
	#endif

#if USART_CLKEN==TRUE
	GPIO_OUT_INIT(USART1_CK_PORT  , USART1_CK_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
#endif
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <myUSART1_Enable>:
 * @note
 * @param   None
 * @retval  None
 */
void myUSART1_Enable(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  USART1_CR1 |= USART_CR1_UE;
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <myUSART1_Enable+0x6c>)
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <myUSART1_Enable+0x6c>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001308:	b29b      	uxth	r3, r3
 800130a:	8013      	strh	r3, [r2, #0]

  /* Enable transmitter */
  USART1_CR1 |= USART_CR1_TE;
 800130c:	4a15      	ldr	r2, [pc, #84]	; (8001364 <myUSART1_Enable+0x6c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <myUSART1_Enable+0x6c>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	8013      	strh	r3, [r2, #0]

  /* Enable receiver */
  USART1_CR1 |= USART_CR1_RE;
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <myUSART1_Enable+0x6c>)
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <myUSART1_Enable+0x6c>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	b29b      	uxth	r3, r3
 800132a:	8013      	strh	r3, [r2, #0]

  /* Enable parity error interrupt */
//  USART1_CR1 |= USART_CR1_PEIE;

  /* Enable idle line detection interrupt */ /* in order to know when massage ended*/
   USART1->CR1 |= USART_CR1_IDLEIE;
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <myUSART1_Enable+0x70>)
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <myUSART1_Enable+0x70>)
 8001330:	899b      	ldrh	r3, [r3, #12]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	b29b      	uxth	r3, r3
 800133a:	8193      	strh	r3, [r2, #12]

  /* Enable DMA mode for transmitter and receiver */
  USART1->CR3 |= USART_CR3_DMAT;
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <myUSART1_Enable+0x70>)
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <myUSART1_Enable+0x70>)
 8001340:	8a9b      	ldrh	r3, [r3, #20]
 8001342:	b29b      	uxth	r3, r3
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	b29b      	uxth	r3, r3
 800134a:	8293      	strh	r3, [r2, #20]
  USART1->CR3 |= USART_CR3_DMAR;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <myUSART1_Enable+0x70>)
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <myUSART1_Enable+0x70>)
 8001350:	8a9b      	ldrh	r3, [r3, #20]
 8001352:	b29b      	uxth	r3, r3
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	b29b      	uxth	r3, r3
 800135a:	8293      	strh	r3, [r2, #20]

  /*Enable DMA2 Stream 5 which is  RX using DMA*/
  DMA2_Stream_5_Enable();
 800135c:	f7fe ff94 	bl	8000288 <DMA2_Stream_5_Enable>
 /* DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
      | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);
*/
  /* Enable DMA2 stream 5 for RX */
  //DMA2_Stream5->CR |= DMA_SxCR_EN;
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	4001100c 	.word	0x4001100c
 8001368:	40011000 	.word	0x40011000

0800136c <USART1_TX_DMA_Config>:
 * @note    USART1_TX -> DMA2_Stream7 (Channel 4)
 * @param   None
 * @retval  None
 */
void USART1_TX_DMA_Config(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* Enable DMA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001370:	4a31      	ldr	r2, [pc, #196]	; (8001438 <USART1_TX_DMA_Config+0xcc>)
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <USART1_TX_DMA_Config+0xcc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800137a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Make sure that the DMA2 stream 7 is disabled */
  if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <USART1_TX_DMA_Config+0x36>
  {
    /* DMA 2 stream 7 is enabled, shall be disabled first */
    DMA2_Stream7->CR &= ~DMA_SxCR_EN;
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

    /* Wait until EN bit is cleared */
    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8001394:	bf00      	nop
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d0f9      	beq.n	8001396 <USART1_TX_DMA_Config+0x2a>
  {
    /* Do nothing, stream 7 is not enabled */
  }

  /* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
  DMA2_Stream7->CR &= ~DMA_SxCR_CHSEL;
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80013ac:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_CHSEL_2;
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013b8:	6013      	str	r3, [r2, #0]

  /* Select stream priority very high */
  DMA2_Stream7->CR |= DMA_SxCR_PL;
 80013ba:	4a20      	ldr	r2, [pc, #128]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80013c4:	6013      	str	r3, [r2, #0]

  /* Select the data transfer direction memory-to-peripheral */
  DMA2_Stream7->CR &= ~DMA_SxCR_DIR;
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80013d0:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6013      	str	r3, [r2, #0]

  /* Select memory and peripherals sizes byte (8-bit) */
  DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80013e8:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013f4:	6013      	str	r3, [r2, #0]

  /* Select FIFO mode */
  DMA2_Stream7->FCR |= DMA_SxFCR_DMDIS;
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6153      	str	r3, [r2, #20]

  /* Select FIFO threshold level half FIFO */
  DMA2_Stream7->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f043 0303 	orr.w	r3, r3, #3
 800140c:	6153      	str	r3, [r2, #20]

  /* Select memory incremented mode, peripheral shall has fixed address and memory increment */
  DMA2_Stream7->CR |= DMA_SxCR_MINC;
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001418:	6013      	str	r3, [r2, #0]

  /* Enable DMA transfer complete interrupt */
  DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6013      	str	r3, [r2, #0]

  /* Set peripheral address */
  DMA2_Stream7->PAR = (uint32_t)&USART1->DR;
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <USART1_TX_DMA_Config+0xd0>)
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <USART1_TX_DMA_Config+0xd4>)
 800142a:	609a      	str	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	400264b8 	.word	0x400264b8
 8001440:	40011004 	.word	0x40011004

08001444 <NVIC_SetPriorityGrouping>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EnableIRQ>:
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001496:	4909      	ldr	r1, [pc, #36]	; (80014bc <NVIC_EnableIRQ+0x30>)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	f002 021f 	and.w	r2, r2, #31
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <NVIC_SetPriority>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da0b      	bge.n	80014ec <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80014d4:	490d      	ldr	r1, [pc, #52]	; (800150c <NVIC_SetPriority+0x4c>)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	3b04      	subs	r3, #4
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	761a      	strb	r2, [r3, #24]
}
 80014ea:	e009      	b.n	8001500 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <NVIC_SetPriority+0x50>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	e000e100 	.word	0xe000e100

08001514 <NVIC_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void NVIC_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Set priority group to 3
   * bits[3:0] are the sub-priority,
   * bits[7:4] are the pre-empt priority (0-15) */
  NVIC_SetPriorityGrouping(3);
 8001518:	2003      	movs	r0, #3
 800151a:	f7ff ff93 	bl	8001444 <NVIC_SetPriorityGrouping>

  /* Set priority levels */
  NVIC_SetPriority(SysTick_IRQn, 0);
 800151e:	2100      	movs	r1, #0
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ffcc 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(EXTI0_IRQn, 1);
 8001528:	2101      	movs	r1, #1
 800152a:	2006      	movs	r0, #6
 800152c:	f7ff ffc8 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream0_IRQn, 1);
 8001530:	2101      	movs	r1, #1
 8001532:	200b      	movs	r0, #11
 8001534:	f7ff ffc4 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream2_IRQn, 1);
 8001538:	2101      	movs	r1, #1
 800153a:	200d      	movs	r0, #13
 800153c:	f7ff ffc0 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream4_IRQn, 1);
 8001540:	2101      	movs	r1, #1
 8001542:	200f      	movs	r0, #15
 8001544:	f7ff ffbc 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream6_IRQn, 1);
 8001548:	2101      	movs	r1, #1
 800154a:	2011      	movs	r0, #17
 800154c:	f7ff ffb8 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream7_IRQn, 1);
 8001550:	2101      	movs	r1, #1
 8001552:	202f      	movs	r0, #47	; 0x2f
 8001554:	f7ff ffb4 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream0_IRQn, 1);
 8001558:	2101      	movs	r1, #1
 800155a:	2038      	movs	r0, #56	; 0x38
 800155c:	f7ff ffb0 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream3_IRQn, 1);
 8001560:	2101      	movs	r1, #1
 8001562:	203b      	movs	r0, #59	; 0x3b
 8001564:	f7ff ffac 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream4_IRQn, 1);
 8001568:	2101      	movs	r1, #1
 800156a:	203c      	movs	r0, #60	; 0x3c
 800156c:	f7ff ffa8 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream5_IRQn, 1);
 8001570:	2101      	movs	r1, #1
 8001572:	2044      	movs	r0, #68	; 0x44
 8001574:	f7ff ffa4 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream7_IRQn, 1);
 8001578:	2101      	movs	r1, #1
 800157a:	2046      	movs	r0, #70	; 0x46
 800157c:	f7ff ffa0 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(USART1_IRQn, 1);
 8001580:	2101      	movs	r1, #1
 8001582:	2025      	movs	r0, #37	; 0x25
 8001584:	f7ff ff9c 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(UART5_IRQn, 1);
 8001588:	2101      	movs	r1, #1
 800158a:	2035      	movs	r0, #53	; 0x35
 800158c:	f7ff ff98 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(TIM4_IRQn, 1);
 8001590:	2101      	movs	r1, #1
 8001592:	201e      	movs	r0, #30
 8001594:	f7ff ff94 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1);
 8001598:	2101      	movs	r1, #1
 800159a:	202c      	movs	r0, #44	; 0x2c
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1);
 80015a0:	2101      	movs	r1, #1
 80015a2:	202d      	movs	r0, #45	; 0x2d
 80015a4:	f7ff ff8c 	bl	80014c0 <NVIC_SetPriority>
  NVIC_SetPriority(ADC_IRQn, 1);
 80015a8:	2101      	movs	r1, #1
 80015aa:	2012      	movs	r0, #18
 80015ac:	f7ff ff88 	bl	80014c0 <NVIC_SetPriority>

  /* Enable interrupts at NVIC */
  NVIC_EnableIRQ(EXTI0_IRQn);
 80015b0:	2006      	movs	r0, #6
 80015b2:	f7ff ff6b 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015b6:	200b      	movs	r0, #11
 80015b8:	f7ff ff68 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015bc:	200d      	movs	r0, #13
 80015be:	f7ff ff65 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f7ff ff62 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015c8:	2011      	movs	r0, #17
 80015ca:	f7ff ff5f 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80015ce:	202f      	movs	r0, #47	; 0x2f
 80015d0:	f7ff ff5c 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015d4:	2038      	movs	r0, #56	; 0x38
 80015d6:	f7ff ff59 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80015da:	203b      	movs	r0, #59	; 0x3b
 80015dc:	f7ff ff56 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80015e0:	203c      	movs	r0, #60	; 0x3c
 80015e2:	f7ff ff53 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80015e6:	2044      	movs	r0, #68	; 0x44
 80015e8:	f7ff ff50 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015ec:	2046      	movs	r0, #70	; 0x46
 80015ee:	f7ff ff4d 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(USART1_IRQn);
 80015f2:	2025      	movs	r0, #37	; 0x25
 80015f4:	f7ff ff4a 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(UART5_IRQn);
 80015f8:	2035      	movs	r0, #53	; 0x35
 80015fa:	f7ff ff47 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM4_IRQn);
 80015fe:	201e      	movs	r0, #30
 8001600:	f7ff ff44 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001604:	202c      	movs	r0, #44	; 0x2c
 8001606:	f7ff ff41 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800160a:	202d      	movs	r0, #45	; 0x2d
 800160c:	f7ff ff3e 	bl	800148c <NVIC_EnableIRQ>
  NVIC_EnableIRQ(ADC_IRQn);
 8001610:	2012      	movs	r0, #18
 8001612:	f7ff ff3b 	bl	800148c <NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001622:	e003      	b.n	800162c <LoopCopyDataInit>

08001624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800162a:	3104      	adds	r1, #4

0800162c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001634:	d3f6      	bcc.n	8001624 <CopyDataInit>
  ldr  r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001638:	e002      	b.n	8001640 <LoopFillZerobss>

0800163a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800163a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800163c:	f842 3b04 	str.w	r3, [r2], #4

08001640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001644:	d3f9      	bcc.n	800163a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001646:	f000 f889 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f000 f9b5 	bl	80019b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7fe fdcd 	bl	80001ec <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001654:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001658:	08001a20 	.word	0x08001a20
  ldr  r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001660:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8001664:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8001668:	200004b4 	.word	0x200004b4

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>

0800166e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001680:	e7fe      	b.n	8001680 <HardFault_Handler+0x4>

08001682 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001686:	e7fe      	b.n	8001686 <MemManage_Handler+0x4>

08001688 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800168c:	e7fe      	b.n	800168c <BusFault_Handler+0x4>

0800168e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001692:	e7fe      	b.n	8001692 <UsageFault_Handler+0x4>

08001694 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  SysTick_IncrementTicks_cb();
 80016c2:	f7ff fbdf 	bl	8000e84 <SysTick_IncrementTicks_cb>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}

080016ca <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
	  RCC_SystemReset();
 80016ce:	f7ff fdbb 	bl	8001248 <RCC_SystemReset>

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <EXTI1_IRQHandler>:
  * @brief  This function handles EXTI1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DMA2_Stream0_IRQHandler>:
  * @brief  This function handles DMA2 Stream0 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */
  if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <DMA2_Stream0_IRQHandler+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b20      	cmp	r3, #32
 800170e:	d106      	bne.n	800171e <DMA2_Stream0_IRQHandler+0x1e>
  {
    /* DMA transfer is complete, turn off green LED */
    myGPIO_TurnOFF_LED(myEVAL_GREEN_LED);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fd7b 	bl	800120c <myGPIO_TurnOFF_LED>

    /* Clear transfer complete flag */
    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <DMA2_Stream0_IRQHandler+0x28>)
 8001718:	2220      	movs	r2, #32
 800171a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Turn on red LED, this interrupt is not handled */
    myGPIO_TurnON_LED(myEVAL_RED_LED);
  }
}
 800171c:	e002      	b.n	8001724 <DMA2_Stream0_IRQHandler+0x24>
    myGPIO_TurnON_LED(myEVAL_RED_LED);
 800171e:	2002      	movs	r0, #2
 8001720:	f7ff fd54 	bl	80011cc <myGPIO_TurnON_LED>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40026400 	.word	0x40026400

0800172c <DMA2_Stream5_IRQHandler>:
  * @brief  This function handles DMA2 Stream5 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	FLASH_USART1_RX_DMA_IRQ_Callback();
 8001730:	f7fe ff18 	bl	8000564 <FLASH_USART1_RX_DMA_IRQ_Callback>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA2_Stream7_IRQHandler>:
  * @brief  This function handles DMA2 Stream7 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	FLASH_USART1_TX_DMA_IRQ_Callback();
 800173c:	f7fe fefe 	bl	800053c <FLASH_USART1_TX_DMA_IRQ_Callback>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <USART1_IRQHandler>:
  * @brief  This function handles USART1 interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
//	USART1_STR_Transmit("  Entered  the IRQ  ",20);

	//my_USART1_IRQ_Callback();
	//callBack_function_pointer();

	FLASH_USART1_IRQ_Callback();
 8001748:	f7fe fede 	bl	8000508 <FLASH_USART1_IRQ_Callback>

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <FLASH_IRQHandler>:


void FLASH_IRQHandler (void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	FLASH_IRQ_Callback();
 8001754:	f7fe ff48 	bl	80005e8 <FLASH_IRQ_Callback>
	}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4a16      	ldr	r2, [pc, #88]	; (80017bc <SystemInit+0x60>)
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <SystemInit+0x60>)
 8001764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <SystemInit+0x64>)
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <SystemInit+0x64>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <SystemInit+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <SystemInit+0x64>)
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <SystemInit+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <SystemInit+0x64>)
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <SystemInit+0x68>)
 8001796:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <SystemInit+0x64>)
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <SystemInit+0x64>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SystemInit+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80017aa:	f000 f889 	bl	80018c0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <SystemInit+0x60>)
 80017b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b4:	609a      	str	r2, [r3, #8]
#endif
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	24003010 	.word	0x24003010

080017c8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	2302      	movs	r3, #2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	2302      	movs	r3, #2
 80017e0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d007      	beq.n	8001802 <SystemCoreClockUpdate+0x3a>
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d009      	beq.n	800180a <SystemCoreClockUpdate+0x42>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d13d      	bne.n	8001876 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 80017fc:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <SystemCoreClockUpdate+0xec>)
 80017fe:	601a      	str	r2, [r3, #0]
      break;
 8001800:	e03d      	b.n	800187e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 8001804:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <SystemCoreClockUpdate+0xf0>)
 8001806:	601a      	str	r2, [r3, #0]
      break;
 8001808:	e039      	b.n	800187e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0d9b      	lsrs	r3, r3, #22
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001826:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <SystemCoreClockUpdate+0xf0>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 8001830:	6852      	ldr	r2, [r2, #4]
 8001832:	0992      	lsrs	r2, r2, #6
 8001834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e00b      	b.n	8001858 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <SystemCoreClockUpdate+0xec>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 800184a:	6852      	ldr	r2, [r2, #4]
 800184c:	0992      	lsrs	r2, r2, #6
 800184e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	3301      	adds	r3, #1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 8001872:	6013      	str	r3, [r2, #0]
      break;
 8001874:	e003      	b.n	800187e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <SystemCoreClockUpdate+0xec>)
 800187a:	601a      	str	r2, [r3, #0]
      break;
 800187c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <SystemCoreClockUpdate+0xe4>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <SystemCoreClockUpdate+0xf4>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <SystemCoreClockUpdate+0xe8>)
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	200001b0 	.word	0x200001b0
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	200001b4 	.word	0x200001b4

080018c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80018ce:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <SetSysClock+0xe8>)
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <SetSysClock+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80018da:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <SetSysClock+0xe8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <SetSysClock+0x38>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80018f6:	d1f0      	bne.n	80018da <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <SetSysClock+0xe8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001904:	2301      	movs	r3, #1
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	e001      	b.n	800190e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <SetSysClock+0xe8>)
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <SetSysClock+0xec>)
 8001918:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <SetSysClock+0xe8>)
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <SetSysClock+0xe8>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <SetSysClock+0xf0>)
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <SetSysClock+0xf0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001930:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <SetSysClock+0xe8>)
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <SetSysClock+0xe8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <SetSysClock+0xe8>)
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <SetSysClock+0xe8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001944:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <SetSysClock+0xe8>)
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <SetSysClock+0xe8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001950:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <SetSysClock+0xe8>)
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <SetSysClock+0xe8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800195e:	bf00      	nop
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <SetSysClock+0xe8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f9      	beq.n	8001960 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <SetSysClock+0xf4>)
 800196e:	f240 7205 	movw	r2, #1797	; 0x705
 8001972:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001974:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <SetSysClock+0xe8>)
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <SetSysClock+0xe8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <SetSysClock+0xe8>)
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <SetSysClock+0xe8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800198c:	bf00      	nop
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SetSysClock+0xe8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d1f9      	bne.n	800198e <SetSysClock+0xce>
    {

    }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	07405a08 	.word	0x07405a08
 80019b0:	40007000 	.word	0x40007000
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <__libc_init_array>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	4e0d      	ldr	r6, [pc, #52]	; (80019f0 <__libc_init_array+0x38>)
 80019bc:	4c0d      	ldr	r4, [pc, #52]	; (80019f4 <__libc_init_array+0x3c>)
 80019be:	1ba4      	subs	r4, r4, r6
 80019c0:	10a4      	asrs	r4, r4, #2
 80019c2:	2500      	movs	r5, #0
 80019c4:	42a5      	cmp	r5, r4
 80019c6:	d109      	bne.n	80019dc <__libc_init_array+0x24>
 80019c8:	4e0b      	ldr	r6, [pc, #44]	; (80019f8 <__libc_init_array+0x40>)
 80019ca:	4c0c      	ldr	r4, [pc, #48]	; (80019fc <__libc_init_array+0x44>)
 80019cc:	f000 f818 	bl	8001a00 <_init>
 80019d0:	1ba4      	subs	r4, r4, r6
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	2500      	movs	r5, #0
 80019d6:	42a5      	cmp	r5, r4
 80019d8:	d105      	bne.n	80019e6 <__libc_init_array+0x2e>
 80019da:	bd70      	pop	{r4, r5, r6, pc}
 80019dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e0:	4798      	blx	r3
 80019e2:	3501      	adds	r5, #1
 80019e4:	e7ee      	b.n	80019c4 <__libc_init_array+0xc>
 80019e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ea:	4798      	blx	r3
 80019ec:	3501      	adds	r5, #1
 80019ee:	e7f2      	b.n	80019d6 <__libc_init_array+0x1e>
 80019f0:	08001a18 	.word	0x08001a18
 80019f4:	08001a18 	.word	0x08001a18
 80019f8:	08001a18 	.word	0x08001a18
 80019fc:	08001a1c 	.word	0x08001a1c

08001a00 <_init>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr

08001a0c <_fini>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	bf00      	nop
 8001a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a12:	bc08      	pop	{r3}
 8001a14:	469e      	mov	lr, r3
 8001a16:	4770      	bx	lr
