
BootloaderV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08001c80  08001c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  08002088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
  7 .bss          000002f4  200001c4  200001c4  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004b8  200004b8  000201c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007f3e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001916  00000000  00000000  00028132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000548  00000000  00000000  00029a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000004a0  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000db22  00000000  00000000  0002a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00005f86  00000000  00000000  00037f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00045d02  00000000  00000000  0003ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00083bda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000124c  00000000  00000000  00083c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c4 	.word	0x200001c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001c68 	.word	0x08001c68

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001c8 	.word	0x200001c8
 80001e8:	08001c68 	.word	0x08001c68

080001ec <main>:
 * @brief   Main function
 * @note
 * @param   none
 * @retval  none
 */
int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0

	uint32_t Emulation_Eeprom_result = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]

	SysTick_Init();
 80001f6:	f001 f935 	bl	8001464 <SysTick_Init>
	NVIC_Init();
 80001fa:	f001 fc8d 	bl	8001b18 <NVIC_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001fe:	b662      	cpsie	i
}
 8000200:	bf00      	nop
	/* Clear PRIMASK, enable IRQs */
	__enable_irq();
	Flash_USART1_GPIO_Config();
 8000202:	f000 fb5a 	bl	80008ba <Flash_USART1_GPIO_Config>
	Flash_USART1_Init();
 8000206:	f000 fb5f 	bl	80008c8 <Flash_USART1_Init>
	Flash_USART1_TX_DMA_Config();
 800020a:	f000 fb6f 	bl	80008ec <Flash_USART1_TX_DMA_Config>
	Flash_USART1_RX_DMA_Config();
 800020e:	f000 fb73 	bl	80008f8 <Flash_USART1_RX_DMA_Config>
	myUSART1_Enable();
 8000212:	f001 fb73 	bl	80018fc <myUSART1_Enable>
	Flash_Init();
 8000216:	f000 fbdd 	bl	80009d4 <Flash_Init>
	SysTick_Init();
 800021a:	f001 f923 	bl	8001464 <SysTick_Init>

	/*
	 * init the push button and LEDs
	 * */
	GPIO_Init_LED(EVAL_ALL_LEDs);
 800021e:	2003      	movs	r0, #3
 8000220:	f001 f96e 	bl	8001500 <GPIO_Init_LED>
	GPIO_Init_PB();
 8000224:	f001 f9ba 	bl	800159c <GPIO_Init_PB>
	GPIO_TurnON_LED(EVAL_GREEN_LED);
 8000228:	2000      	movs	r0, #0
 800022a:	f001 f9e9 	bl	8001600 <GPIO_TurnON_LED>

	/* Delay for half second after initialization */
	SysTick_Delay(3000);
 800022e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000232:	f001 f8ff 	bl	8001434 <SysTick_Delay>

	/*
	 * 1. check the push button if checked
	 * */
	PushButton_Result = GPIO_Result_PB();
 8000236:	f001 f9cf 	bl	80015d8 <GPIO_Result_PB>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0x88>)
 8000240:	701a      	strb	r2, [r3, #0]

	/*
	 * 2. if checked jump to flash main
	 * */

	if (1 == PushButton_Result) {
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0x88>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b01      	cmp	r3, #1
 800024a:	d105      	bne.n	8000258 <main+0x6c>
		GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 800024c:	2000      	movs	r0, #0
 800024e:	f001 f9ff 	bl	8001650 <GPIO_TurnOFF_LED>

		Flash_Main();
 8000252:	f000 fbe5 	bl	8000a20 <Flash_Main>
 8000256:	e00c      	b.n	8000272 <main+0x86>
	} else {

		/*check using the eeprom emulation*/

		Emulation_Eeprom_result = EEpromEmulation_read_variable2();
 8000258:	f000 fad0 	bl	80007fc <EEpromEmulation_read_variable2>
 800025c:	6078      	str	r0, [r7, #4]
		/*
		 * 3. if not checked check the validity of primary image if available boot it by calling jump function
		 * */
		if(Emulation_Eeprom_result>3||Emulation_Eeprom_result==0){
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b03      	cmp	r3, #3
 8000262:	d802      	bhi.n	800026a <main+0x7e>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d100      	bne.n	800026c <main+0x80>
			while(1);
 800026a:	e7fe      	b.n	800026a <main+0x7e>
		}
		Jump_To_APP(Emulation_Eeprom_result);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 ff39 	bl	80010e4 <Jump_To_APP>

	}

	/* Infinite loop */
	while (1)
 8000272:	e7fe      	b.n	8000272 <main+0x86>
 8000274:	20000204 	.word	0x20000204

08000278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800027c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800027e:	e003      	b.n	8000288 <LoopCopyDataInit>

08000280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000286:	3104      	adds	r1, #4

08000288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000288:	480b      	ldr	r0, [pc, #44]	; (80002b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800028c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800028e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000290:	d3f6      	bcc.n	8000280 <CopyDataInit>
  ldr  r2, =_sbss
 8000292:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000294:	e002      	b.n	800029c <LoopFillZerobss>

08000296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000298:	f842 3b04 	str.w	r3, [r2], #4

0800029c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800029e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a0:	d3f9      	bcc.n	8000296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002a2:	f000 f889 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002a6:	f001 fcbb 	bl	8001c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002aa:	f7ff ff9f 	bl	80001ec <main>
  bx  lr    
 80002ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002b0:	20004000 	.word	0x20004000
  ldr  r3, =_sidata
 80002b4:	08002088 	.word	0x08002088
  ldr  r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002bc:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 80002c0:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 80002c4:	200004b8 	.word	0x200004b8

080002c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC_IRQHandler>

080002ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <HardFault_Handler+0x4>

080002de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <MemManage_Handler+0x4>

080002e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <BusFault_Handler+0x4>

080002ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <UsageFault_Handler+0x4>

080002f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
  SysTick_IncrementTicks_cb();
 800031e:	f001 f87b 	bl	8001418 <SysTick_IncrementTicks_cb>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}

08000326 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	af00      	add	r7, sp, #0
	  RCC_SystemReset();
 800032a:	f001 fa8f 	bl	800184c <RCC_SystemReset>

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}

08000332 <EXTI1_IRQHandler>:
  * @brief  This function handles EXTI1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DMA2_Stream0_IRQHandler>:
  * @brief  This function handles DMA2 Stream0 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */
  if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <DMA2_Stream0_IRQHandler+0x28>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	2b20      	cmp	r3, #32
 800036a:	d106      	bne.n	800037a <DMA2_Stream0_IRQHandler+0x1e>
  {
    /* DMA transfer is complete, turn off green LED */
    myGPIO_TurnOFF_LED(myEVAL_GREEN_LED);
 800036c:	2000      	movs	r0, #0
 800036e:	f001 fa4b 	bl	8001808 <myGPIO_TurnOFF_LED>

    /* Clear transfer complete flag */
    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <DMA2_Stream0_IRQHandler+0x28>)
 8000374:	2220      	movs	r2, #32
 8000376:	609a      	str	r2, [r3, #8]
  else
  {
    /* Turn on red LED, this interrupt is not handled */
    myGPIO_TurnON_LED(myEVAL_RED_LED);
  }
}
 8000378:	e002      	b.n	8000380 <DMA2_Stream0_IRQHandler+0x24>
    myGPIO_TurnON_LED(myEVAL_RED_LED);
 800037a:	2002      	movs	r0, #2
 800037c:	f001 fa20 	bl	80017c0 <myGPIO_TurnON_LED>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40026400 	.word	0x40026400

08000388 <DMA2_Stream5_IRQHandler>:
  * @brief  This function handles DMA2 Stream5 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	FLASH_USART1_RX_DMA_IRQ_Callback();
 800038c:	f000 fbee 	bl	8000b6c <FLASH_USART1_RX_DMA_IRQ_Callback>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <DMA2_Stream7_IRQHandler>:
  * @brief  This function handles DMA2 Stream7 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	FLASH_USART1_TX_DMA_IRQ_Callback();
 8000398:	f000 fbd4 	bl	8000b44 <FLASH_USART1_TX_DMA_IRQ_Callback>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <USART1_IRQHandler>:
  * @brief  This function handles USART1 interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
//	USART1_STR_Transmit("  Entered  the IRQ  ",20);

	//my_USART1_IRQ_Callback();
	//callBack_function_pointer();

	FLASH_USART1_IRQ_Callback();
 80003a4:	f000 fbb4 	bl	8000b10 <FLASH_USART1_IRQ_Callback>

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <FLASH_IRQHandler>:


void FLASH_IRQHandler (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	FLASH_IRQ_Callback();
 80003b0:	f000 fc1e 	bl	8000bf0 <FLASH_IRQ_Callback>
	}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <SystemInit+0x60>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <SystemInit+0x60>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <SystemInit+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <SystemInit+0x64>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <SystemInit+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <SystemInit+0x64>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <SystemInit+0x64>)
 80003e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <SystemInit+0x64>)
 80003f0:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <SystemInit+0x68>)
 80003f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <SystemInit+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a08      	ldr	r2, [pc, #32]	; (800041c <SystemInit+0x64>)
 80003fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <SystemInit+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000406:	f000 f88f 	bl	8000528 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <SystemInit+0x60>)
 800040c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000410:	609a      	str	r2, [r3, #8]
#endif
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	e000ed00 	.word	0xe000ed00
 800041c:	40023800 	.word	0x40023800
 8000420:	24003010 	.word	0x24003010

08000424 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	2302      	movs	r3, #2
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	2302      	movs	r3, #2
 800043c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800043e:	4b35      	ldr	r3, [pc, #212]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f003 030c 	and.w	r3, r3, #12
 8000446:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	2b08      	cmp	r3, #8
 800044c:	d011      	beq.n	8000472 <SystemCoreClockUpdate+0x4e>
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	2b08      	cmp	r3, #8
 8000452:	d844      	bhi.n	80004de <SystemCoreClockUpdate+0xba>
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d003      	beq.n	8000462 <SystemCoreClockUpdate+0x3e>
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	2b04      	cmp	r3, #4
 800045e:	d004      	beq.n	800046a <SystemCoreClockUpdate+0x46>
 8000460:	e03d      	b.n	80004de <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 8000464:	4a2d      	ldr	r2, [pc, #180]	; (800051c <SystemCoreClockUpdate+0xf8>)
 8000466:	601a      	str	r2, [r3, #0]
      break;
 8000468:	e03d      	b.n	80004e6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 800046c:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <SystemCoreClockUpdate+0xfc>)
 800046e:	601a      	str	r2, [r3, #0]
      break;
 8000470:	e039      	b.n	80004e6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	0d9b      	lsrs	r3, r3, #22
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000486:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00c      	beq.n	80004a8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800048e:	4a24      	ldr	r2, [pc, #144]	; (8000520 <SystemCoreClockUpdate+0xfc>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	fbb2 f3f3 	udiv	r3, r2, r3
 8000496:	4a1f      	ldr	r2, [pc, #124]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 8000498:	6852      	ldr	r2, [r2, #4]
 800049a:	0992      	lsrs	r2, r2, #6
 800049c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e00b      	b.n	80004c0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004a8:	4a1c      	ldr	r2, [pc, #112]	; (800051c <SystemCoreClockUpdate+0xf8>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 80004b2:	6852      	ldr	r2, [r2, #4]
 80004b4:	0992      	lsrs	r2, r2, #6
 80004b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	0c1b      	lsrs	r3, r3, #16
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	3301      	adds	r3, #1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 80004da:	6013      	str	r3, [r2, #0]
      break;
 80004dc:	e003      	b.n	80004e6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <SystemCoreClockUpdate+0xf8>)
 80004e2:	601a      	str	r2, [r3, #0]
      break;
 80004e4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <SystemCoreClockUpdate+0xf0>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	091b      	lsrs	r3, r3, #4
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <SystemCoreClockUpdate+0x100>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <SystemCoreClockUpdate+0xf4>)
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	371c      	adds	r7, #28
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800
 8000518:	20000000 	.word	0x20000000
 800051c:	00f42400 	.word	0x00f42400
 8000520:	007a1200 	.word	0x007a1200
 8000524:	20000004 	.word	0x20000004

08000528 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <SetSysClock+0xe8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a35      	ldr	r2, [pc, #212]	; (8000610 <SetSysClock+0xe8>)
 800053c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000540:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <SetSysClock+0xe8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <SetSysClock+0x38>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800055e:	d1f0      	bne.n	8000542 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <SetSysClock+0xe8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800056c:	2301      	movs	r3, #1
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e001      	b.n	8000576 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d102      	bne.n	8000582 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <SetSysClock+0xe8>)
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <SetSysClock+0xec>)
 8000580:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SetSysClock+0xe8>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SetSysClock+0xe8>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SetSysClock+0xf0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SetSysClock+0xf0>)
 8000594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000598:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <SetSysClock+0xe8>)
 800059c:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <SetSysClock+0xe8>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <SetSysClock+0xe8>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <SetSysClock+0xe8>)
 80005a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ac:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <SetSysClock+0xe8>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <SetSysClock+0xe8>)
 80005b4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005b8:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <SetSysClock+0xe8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <SetSysClock+0xe8>)
 80005c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005c6:	bf00      	nop
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <SetSysClock+0xe8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f9      	beq.n	80005c8 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <SetSysClock+0xf4>)
 80005d6:	f240 7205 	movw	r2, #1797	; 0x705
 80005da:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <SetSysClock+0xe8>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <SetSysClock+0xe8>)
 80005e2:	f023 0303 	bic.w	r3, r3, #3
 80005e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <SetSysClock+0xe8>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <SetSysClock+0xe8>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80005f4:	bf00      	nop
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <SetSysClock+0xe8>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f003 030c 	and.w	r3, r3, #12
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d1f9      	bne.n	80005f6 <SetSysClock+0xce>
    {

    }
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800
 8000614:	07405a08 	.word	0x07405a08
 8000618:	40007000 	.word	0x40007000
 800061c:	40023c00 	.word	0x40023c00

08000620 <DMA2_Stream_5_Enable>:
 * @note
 * @param   None
 * @retval  None
 */
void DMA2_Stream_5_Enable()
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* Clear all interrupt flags */
	DMA2_HISR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <DMA2_Stream_5_Enable+0x24>)
 8000626:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800062a:	601a      	str	r2, [r3, #0]
      | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

  /* Enable DMA 2 stream 7 */
	DMA2_CR(5) |= DMA_SxCR_EN;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <DMA2_Stream_5_Enable+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <DMA2_Stream_5_Enable+0x28>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]
//	DMA2_Stream5->CR |= DMA_SxCR_EN;
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40026404 	.word	0x40026404
 8000648:	40026488 	.word	0x40026488

0800064c <EEpromEmulation_write_variable2>:
	returnState ReturnState = E_NOK;

	return ReturnState;

}
returnState EEpromEmulation_write_variable2(uint32 data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	/*Check the parameters*/
//	ASSERT_param(addr!=NULL);
	//ASSERT_param(data!=NULL);

	returnState ReturnState = E_NOK;
 8000654:	2300      	movs	r3, #0
 8000656:	75fb      	strb	r3, [r7, #23]

	uint8 terminate = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	75bb      	strb	r3, [r7, #22]

	volatile uint32  sectionAddress = SECTIONADDRESS;
 800065c:	4b32      	ldr	r3, [pc, #200]	; (8000728 <EEpromEmulation_write_variable2+0xdc>)
 800065e:	60fb      	str	r3, [r7, #12]

	uint32 result = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

	/*Unlock the Flash for writing*/
	/* Write KEY1 */
	FLASH->KEYR = 0x45670123;
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <EEpromEmulation_write_variable2+0xe4>)
 8000668:	605a      	str	r2, [r3, #4]
	/* Write KEY2 */
	FLASH->KEYR = 0xCDEF89AB;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 800066c:	4a31      	ldr	r2, [pc, #196]	; (8000734 <EEpromEmulation_write_variable2+0xe8>)
 800066e:	605a      	str	r2, [r3, #4]

	/* Start writing  */
	while (terminate == 0) {
 8000670:	e04c      	b.n	800070c <EEpromEmulation_write_variable2+0xc0>

		if (CurrentIndexWrite >= 10) {
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b09      	cmp	r3, #9
 8000678:	d905      	bls.n	8000686 <EEpromEmulation_write_variable2+0x3a>
			/*Erase protocol*/
			EEpromEmulation_Erase_Sector(SECTIONNUMBER);
 800067a:	200e      	movs	r0, #14
 800067c:	f000 f85e 	bl	800073c <EEpromEmulation_Erase_Sector>
			CurrentIndexWrite = 0;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		}

		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000686:	bf00      	nop
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f9      	bne.n	8000688 <EEpromEmulation_write_variable2+0x3c>
			/* Waiting */
		}
		/* read the current indexed address */
		result = *((uint32 *)sectionAddress + CurrentIndexWrite);
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	009a      	lsls	r2, r3, #2
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4413      	add	r3, r2
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	613b      	str	r3, [r7, #16]

		/* check if it is Free address to write */
		if (result == (0xFFFFFFFF)) {
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d12b      	bne.n	8000702 <EEpromEmulation_write_variable2+0xb6>

			while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 80006aa:	bf00      	nop
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f9      	bne.n	80006ac <EEpromEmulation_write_variable2+0x60>
				/* Waiting */
			}

			/* Enable flash programming */
			FLASH->CR |= FLASH_CR_PG;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6113      	str	r3, [r2, #16]


			/* write the data in the address */
			MEM32_ADDRESS(sectionAddress + (CurrentIndexWrite*4)) = data;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	009a      	lsls	r2, r3, #2
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6013      	str	r3, [r2, #0]


			while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 80006d4:	bf00      	nop
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f9      	bne.n	80006d6 <EEpromEmulation_write_variable2+0x8a>
				/* Waiting */
			}
			/* Disable flash programming */
			FLASH->CR &= ~FLASH_CR_PG;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6113      	str	r3, [r2, #16]

			/* increment the Index of writing for the next writing request */
			CurrentIndexWrite++;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 80006f6:	6013      	str	r3, [r2, #0]
			terminate = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	75bb      	strb	r3, [r7, #22]
			ReturnState = E_OK;
 80006fc:	2301      	movs	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
 8000700:	e004      	b.n	800070c <EEpromEmulation_write_variable2+0xc0>
		}

		else {
			/* look for the next address */
			CurrentIndexWrite++;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <EEpromEmulation_write_variable2+0xec>)
 800070a:	6013      	str	r3, [r2, #0]
	while (terminate == 0) {
 800070c:	7dbb      	ldrb	r3, [r7, #22]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0af      	beq.n	8000672 <EEpromEmulation_write_variable2+0x26>
		}

	}

	/* Write lock bit */
	FLASH->CR |= FLASH_CR_LOCK;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <EEpromEmulation_write_variable2+0xe0>)
 8000718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800071c:	6113      	str	r3, [r2, #16]

	return ReturnState;
 800071e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08108000 	.word	0x08108000
 800072c:	40023c00 	.word	0x40023c00
 8000730:	45670123 	.word	0x45670123
 8000734:	cdef89ab 	.word	0xcdef89ab
 8000738:	200004b4 	.word	0x200004b4

0800073c <EEpromEmulation_Erase_Sector>:
 * note
 * param   bank Address to erase
 * retval  returnState OK or NOK
 */

returnState EEpromEmulation_Erase_Sector(uint32 sector_num) {
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	/*Check the parameters*/
	//ASSERT_param(sector_num!=NULL);

	returnState ReturnState = E_NOK;
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]

	uint32 result=0;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]


	/* Write lock bit */
	FLASH->CR |= FLASH_CR_LOCK;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000756:	6113      	str	r3, [r2, #16]

	/*Unlock the Flash for writing*/
	/* Write KEY1 */
	FLASH->KEYR = 0x45670123;
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <EEpromEmulation_Erase_Sector+0xb0>)
 800075c:	605a      	str	r2, [r3, #4]
	/* Write KEY2 */
	FLASH->KEYR = 0xCDEF89AB;
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <EEpromEmulation_Erase_Sector+0xb4>)
 8000762:	605a      	str	r2, [r3, #4]

	/* Wait bsy flag */
	while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000764:	bf00      	nop
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f9      	bne.n	8000766 <EEpromEmulation_Erase_Sector+0x2a>
		/* Waiting */
	}


    /* Enable flash Sector Erase */
    FLASH->CR |= FLASH_CR_SER;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6113      	str	r3, [r2, #16]

	/* Select sector to erase */
	/* Check sector number for bank 2 */
	if (12 <= sector_num) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0b      	cmp	r3, #11
 8000782:	d902      	bls.n	800078a <EEpromEmulation_Erase_Sector+0x4e>
		/* Bank 2 */
		sector_num = sector_num + 4;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3304      	adds	r3, #4
 8000788:	607b      	str	r3, [r7, #4]
	} else {

	}

	/* Write sector number */
	FLASH->CR |= (FLASH_CR_SNB & (sector_num << 3));
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 800078c:	691a      	ldr	r2, [r3, #16]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4914      	ldr	r1, [pc, #80]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 8000796:	4313      	orrs	r3, r2
 8000798:	610b      	str	r3, [r1, #16]

	/* Start sector erase */
	FLASH->CR |= FLASH_CR_STRT;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 80007a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a4:	6113      	str	r3, [r2, #16]

	/* Wait bsy flag */
	while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 80007a6:	bf00      	nop
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f9      	bne.n	80007a8 <EEpromEmulation_Erase_Sector+0x6c>
		/* Waiting */
	}

	/* Disable sector erase */
	FLASH->CR &= ~FLASH_CR_SER;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <EEpromEmulation_Erase_Sector+0xac>)
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	6113      	str	r3, [r2, #16]

	CurrentIndexWrite=0;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <EEpromEmulation_Erase_Sector+0xb8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]

	/* read the current indexed address */
	result = *(SECTIONADDRESS);
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <EEpromEmulation_Erase_Sector+0xbc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	60bb      	str	r3, [r7, #8]

	/*Check if its really erased*/
	if(result==0xFFFFFFFF) {
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d2:	d101      	bne.n	80007d8 <EEpromEmulation_Erase_Sector+0x9c>

		/*Return OK*/
		ReturnState=E_OK;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
	}



	return ReturnState;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023c00 	.word	0x40023c00
 80007ec:	45670123 	.word	0x45670123
 80007f0:	cdef89ab 	.word	0xcdef89ab
 80007f4:	200004b4 	.word	0x200004b4
 80007f8:	08108000 	.word	0x08108000

080007fc <EEpromEmulation_read_variable2>:
 * note
 * param   Address of data we want to read , address where we want to save the data
 * retval  returnState OK or NOK
 */

uint32 EEpromEmulation_read_variable2(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

	/*Check the parameters*/
	//ASSERT_param(SECTIONADDRESS!=NULL);
	volatile uint32  sectionAddress = SECTIONADDRESS;
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <EEpromEmulation_read_variable2+0xa0>)
 8000804:	607b      	str	r3, [r7, #4]

	uint8 terrminator=0;
 8000806:	2300      	movs	r3, #0
 8000808:	74fb      	strb	r3, [r7, #19]
	uint32 result=0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
	uint32  tempResult=0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
	  	/* Wait bsy flag */
    while(0 != (FLASH->SR & FLASH_SR_BSY))
 8000812:	bf00      	nop
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <EEpromEmulation_read_variable2+0xa4>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f9      	bne.n	8000814 <EEpromEmulation_read_variable2+0x18>
    {
      /* Waiting */
    }

    while(terrminator==0){
 8000820:	e031      	b.n	8000886 <EEpromEmulation_read_variable2+0x8a>


		if (CurrentIndexWrite >= 10) {
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b09      	cmp	r3, #9
 8000828:	d905      	bls.n	8000836 <EEpromEmulation_read_variable2+0x3a>
			/*Erase protocol*/
			EEpromEmulation_Erase_Sector(SECTIONNUMBER);
 800082a:	200e      	movs	r0, #14
 800082c:	f7ff ff86 	bl	800073c <EEpromEmulation_Erase_Sector>
			CurrentIndexWrite = 0;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
		}

    	/* read the current indexed address */
    	result = *((uint32 *)sectionAddress+(CurrentIndexWrite-1));
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	009a      	lsls	r2, r3, #2
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	3b04      	subs	r3, #4
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	617b      	str	r3, [r7, #20]
    	tempResult=*((uint32 *)sectionAddress+CurrentIndexWrite);
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	009a      	lsls	r2, r3, #2
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
    	if(result==0xFFFFFFFF&&tempResult==0xFFFFFFFF){
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085a:	d108      	bne.n	800086e <EEpromEmulation_read_variable2+0x72>
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000862:	d104      	bne.n	800086e <EEpromEmulation_read_variable2+0x72>
    		/*its first iteration of the Bootloader overall
    		 * or we just erased then read so in both we will go to
    		 * bootloader to check if there is image or not */
    		result=0;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
    		terrminator=1;
 8000868:	2301      	movs	r3, #1
 800086a:	74fb      	strb	r3, [r7, #19]
    		break;
 800086c:	e00e      	b.n	800088c <EEpromEmulation_read_variable2+0x90>
    	}
    	/*Check if this is the last written data */
    	if(tempResult==(0xFFFFFFFF)){
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000874:	d102      	bne.n	800087c <EEpromEmulation_read_variable2+0x80>
    		/*this is the last written data*/
    		terrminator=1;
 8000876:	2301      	movs	r3, #1
 8000878:	74fb      	strb	r3, [r7, #19]
    		break;
 800087a:	e007      	b.n	800088c <EEpromEmulation_read_variable2+0x90>
    	}
    	CurrentIndexWrite++;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <EEpromEmulation_read_variable2+0xa8>)
 8000884:	6013      	str	r3, [r2, #0]
    while(terrminator==0){
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0ca      	beq.n	8000822 <EEpromEmulation_read_variable2+0x26>
    }

    returnState ReturnState = E_NOK;
 800088c:	2300      	movs	r3, #0
 800088e:	72fb      	strb	r3, [r7, #11]

	return result;
 8000890:	697b      	ldr	r3, [r7, #20]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08108000 	.word	0x08108000
 80008a0:	40023c00 	.word	0x40023c00
 80008a4:	200004b4 	.word	0x200004b4

080008a8 <crc_init>:
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
    return 0xffffffff;
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <Flash_USART1_GPIO_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_GPIO_Config(void) {
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
	myUSART1_GPIO_Config();
 80008be:	f000 ffff 	bl	80018c0 <myUSART1_GPIO_Config>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <Flash_USART1_Init>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_Init(void) {
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	// myUSART1_Init();

	/* Configure USART1 */
	/* Enable USART1 clock */
	RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <Flash_USART1_Init+0x1c>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	645a      	str	r2, [r3, #68]	; 0x44
	 *
	 * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	 * DIV_Mantissa = 48 = 0x30
	 *
	 * BRR          = 0x30D */
	USART1->BRR = 0x30D;
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <Flash_USART1_Init+0x20>)
 80008d4:	f240 320d 	movw	r2, #781	; 0x30d
 80008d8:	811a      	strh	r2, [r3, #8]

}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40011000 	.word	0x40011000

080008ec <Flash_USART1_TX_DMA_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_TX_DMA_Config(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	USART1_TX_DMA_Config();
 80008f0:	f001 f83e 	bl	8001970 <USART1_TX_DMA_Config>

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Flash_USART1_RX_DMA_Config>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_USART1_RX_DMA_Config(void) {
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	//USART1_RX_DMA_Config();

	/* Enable DMA clock in RCC */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <Flash_USART1_RX_DMA_Config+0xcc>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <Flash_USART1_RX_DMA_Config+0xcc>)
 8000902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000906:	6313      	str	r3, [r2, #48]	; 0x30

	/* Make sure that the DMA2 stream 5 is disabled */
	if (DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR)) {
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b01      	cmp	r3, #1
 8000912:	d10c      	bne.n	800092e <Flash_USART1_RX_DMA_Config+0x36>
		/* DMA 2 stream 5 is enabled, shall be disabled first */
		DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]

		/* Wait until EN bit is cleared */
		while (DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream5->CR)) {
 8000920:	bf00      	nop
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b01      	cmp	r3, #1
 800092c:	d0f9      	beq.n	8000922 <Flash_USART1_RX_DMA_Config+0x2a>
	} else {
		/* Do nothing, stream 5 is not enabled */
	}

	/* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
	DMA2_Stream5->CR &= ~DMA_SxCR_CHSEL;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000934:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000938:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR |= DMA_SxCR_CHSEL_2;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000944:	6013      	str	r3, [r2, #0]

	/* Select stream priority very high */
	DMA2_Stream5->CR |= DMA_SxCR_PL;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800094c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000950:	6013      	str	r3, [r2, #0]

	/* Select the data transfer direction peripheral-to-memory */
	DMA2_Stream5->CR &= ~DMA_SxCR_DIR;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000958:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800095c:	6013      	str	r3, [r2, #0]

	/* Select memory and peripherals sizes byte (8-bit) */
	DMA2_Stream5->CR &= ~DMA_SxCR_MSIZE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000964:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000968:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR &= ~DMA_SxCR_PSIZE;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000970:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000974:	6013      	str	r3, [r2, #0]

	/* Select FIFO mode */
	DMA2_Stream5->FCR |= DMA_SxFCR_DMDIS;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6153      	str	r3, [r2, #20]

	/* Select FIFO threshold level half FIFO */
	DMA2_Stream5->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000988:	f043 0303 	orr.w	r3, r3, #3
 800098c:	6153      	str	r3, [r2, #20]

	/* Select memory incremented mode, peripheral shall has fixed address */
	DMA2_Stream5->CR |= DMA_SxCR_MINC;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 8000994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000998:	6013      	str	r3, [r2, #0]

	/* Enable DMA transfer complete interrupt */
	DMA2_Stream5->CR |= DMA_SxCR_TCIE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6013      	str	r3, [r2, #0]

	/* Set peripheral address */
	DMA2_Stream5->PAR = (uint32_t) &USART1->DR;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <Flash_USART1_RX_DMA_Config+0xd4>)
 80009aa:	609a      	str	r2, [r3, #8]

	/* Set memory address */
	DMA2_Stream5->M0AR = (uint32_t) FlashRxDMABuffer;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <Flash_USART1_RX_DMA_Config+0xd8>)
 80009b0:	60da      	str	r2, [r3, #12]

	/* Set number of data items */
	DMA2_Stream5->NDTR = MAX_BUFFER_LENGTH;
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <Flash_USART1_RX_DMA_Config+0xd0>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	605a      	str	r2, [r3, #4]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40026488 	.word	0x40026488
 80009cc:	40011004 	.word	0x40011004
 80009d0:	20000430 	.word	0x20000430

080009d4 <Flash_Init>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_Init(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

	/* Write KEY1 */
	FLASH->KEYR = 0x45670123;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <Flash_Init+0x40>)
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <Flash_Init+0x44>)
 80009dc:	605a      	str	r2, [r3, #4]

	/* Write KEY2 */
	FLASH->KEYR = 0xCDEF89AB;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <Flash_Init+0x40>)
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <Flash_Init+0x48>)
 80009e2:	605a      	str	r2, [r3, #4]

	/* Select flash parallelism x32 */
	FLASH->CR &= ~FLASH_CR_PSIZE;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <Flash_Init+0x40>)
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <Flash_Init+0x40>)
 80009ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ee:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PSIZE_1;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <Flash_Init+0x40>)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <Flash_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6113      	str	r3, [r2, #16]

	/* Write lock bit */
	FLASH->CR |= FLASH_CR_LOCK;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <Flash_Init+0x40>)
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <Flash_Init+0x40>)
 8000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	6113      	str	r3, [r2, #16]

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00
 8000a18:	45670123 	.word	0x45670123
 8000a1c:	cdef89ab 	.word	0xcdef89ab

08000a20 <Flash_Main>:
 * @brief
 * @note
 * @param   void
 * @retval  void
 */
void Flash_Main(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	switch (Flash_currentState) {
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <Flash_Main+0xb4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <Flash_Main+0x12>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d040      	beq.n	8000ab2 <Flash_Main+0x92>
		/* Go to next state */
		Flash_currentState = FLASH_WAIT_FOR_CMD;
		break;

	default:
		break;
 8000a30:	e04e      	b.n	8000ad0 <Flash_Main+0xb0>
		strTransmit_with_DMA(line, sizeof(line));
 8000a32:	212f      	movs	r1, #47	; 0x2f
 8000a34:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <Flash_Main+0xb8>)
 8000a36:	f000 ff19 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(hello, sizeof(hello));
 8000a3a:	211e      	movs	r1, #30
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <Flash_Main+0xbc>)
 8000a3e:	f000 ff15 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(select_cmd, sizeof(select_cmd));
 8000a42:	2124      	movs	r1, #36	; 0x24
 8000a44:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <Flash_Main+0xc0>)
 8000a46:	f000 ff11 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000a4a:	212f      	movs	r1, #47	; 0x2f
 8000a4c:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <Flash_Main+0xb8>)
 8000a4e:	f000 ff0d 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(Lock, sizeof(Lock));
 8000a52:	210e      	movs	r1, #14
 8000a54:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <Flash_Main+0xc4>)
 8000a56:	f000 ff09 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(unlock, sizeof(unlock));
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <Flash_Main+0xc8>)
 8000a5e:	f000 ff05 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(write_data, sizeof(write_data));
 8000a62:	210e      	movs	r1, #14
 8000a64:	4821      	ldr	r0, [pc, #132]	; (8000aec <Flash_Main+0xcc>)
 8000a66:	f000 ff01 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(read_data, sizeof(read_data));
 8000a6a:	210d      	movs	r1, #13
 8000a6c:	4820      	ldr	r0, [pc, #128]	; (8000af0 <Flash_Main+0xd0>)
 8000a6e:	f000 fefd 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(erase, sizeof(erase));
 8000a72:	2110      	movs	r1, #16
 8000a74:	481f      	ldr	r0, [pc, #124]	; (8000af4 <Flash_Main+0xd4>)
 8000a76:	f000 fef9 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(write_protect, sizeof(write_protect));
 8000a7a:	2114      	movs	r1, #20
 8000a7c:	481e      	ldr	r0, [pc, #120]	; (8000af8 <Flash_Main+0xd8>)
 8000a7e:	f000 fef5 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(remove_write_protect,
 8000a82:	211b      	movs	r1, #27
 8000a84:	481d      	ldr	r0, [pc, #116]	; (8000afc <Flash_Main+0xdc>)
 8000a86:	f000 fef1 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(ob_unlock, sizeof(ob_unlock));
 8000a8a:	2117      	movs	r1, #23
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <Flash_Main+0xe0>)
 8000a8e:	f000 feed 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(ob_lock, sizeof(ob_lock));
 8000a92:	2115      	movs	r1, #21
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <Flash_Main+0xe4>)
 8000a96:	f000 fee9 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(jump, sizeof(jump));
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <Flash_Main+0xe8>)
 8000a9e:	f000 fee5 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000aa2:	212f      	movs	r1, #47	; 0x2f
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <Flash_Main+0xb8>)
 8000aa6:	f000 fee1 	bl	800186c <strTransmit_with_DMA>
		Flash_currentState = FLASH_WAIT_FOR_CMD;
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <Flash_Main+0xb4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
		break;
 8000ab0:	e00e      	b.n	8000ad0 <Flash_Main+0xb0>
		if (0 != FlashRxMessageLength) {
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <Flash_Main+0xec>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <Flash_Main+0xa8>
			process_command();
 8000aba:	f000 f91d 	bl	8000cf8 <process_command>
			check_errors();
 8000abe:	f000 f89f 	bl	8000c00 <check_errors>
			FlashRxMessageLength = 0;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <Flash_Main+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
		Flash_currentState = FLASH_WAIT_FOR_CMD;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <Flash_Main+0xb4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
		break;
 8000ace:	bf00      	nop

	}

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001ed 	.word	0x200001ed
 8000ad8:	20000118 	.word	0x20000118
 8000adc:	20000014 	.word	0x20000014
 8000ae0:	20000034 	.word	0x20000034
 8000ae4:	20000058 	.word	0x20000058
 8000ae8:	20000068 	.word	0x20000068
 8000aec:	20000078 	.word	0x20000078
 8000af0:	20000088 	.word	0x20000088
 8000af4:	20000098 	.word	0x20000098
 8000af8:	200000a8 	.word	0x200000a8
 8000afc:	200000bc 	.word	0x200000bc
 8000b00:	200000d8 	.word	0x200000d8
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	20000108 	.word	0x20000108
 8000b0c:	20000420 	.word	0x20000420

08000b10 <FLASH_USART1_IRQ_Callback>:

void FLASH_USART1_IRQ_Callback(void) {
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	/* Check if idle line detected */
	if ((USART1->SR & USART_SR_IDLE) == USART_SR_IDLE) {
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <FLASH_USART1_IRQ_Callback+0x2c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	d107      	bne.n	8000b32 <FLASH_USART1_IRQ_Callback+0x22>
		/* Read data register to clear idle line flag */
		(void) USART1->DR;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <FLASH_USART1_IRQ_Callback+0x2c>)
 8000b24:	889b      	ldrh	r3, [r3, #4]

		/* Disable DMA stream for RX */
		DMA2_Stream5->CR &= ~DMA_SxCR_EN;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <FLASH_USART1_IRQ_Callback+0x30>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <FLASH_USART1_IRQ_Callback+0x30>)
 8000b2c:	f023 0301 	bic.w	r3, r3, #1
 8000b30:	6013      	str	r3, [r2, #0]
	} else {
		/* No new data received */
	}

}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40026488 	.word	0x40026488

08000b44 <FLASH_USART1_TX_DMA_IRQ_Callback>:

void FLASH_USART1_TX_DMA_IRQ_Callback(void) {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	/* Check transfer complete flag */
	if (DMA_HISR_TCIF7 == (DMA_HISR_TCIF7 & DMA2->HISR)) {
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b54:	d103      	bne.n	8000b5e <FLASH_USART1_TX_DMA_IRQ_Callback+0x1a>
		/* Clear all interrupt flags */
		DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <FLASH_USART1_TX_DMA_IRQ_Callback+0x24>)
 8000b58:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000b5c:	60da      	str	r2, [r3, #12]
				| DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTCIF7);
	} else {
		/* Do nothing, this interrupt is not handled */
	}

}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40026400 	.word	0x40026400

08000b6c <FLASH_USART1_RX_DMA_IRQ_Callback>:

void FLASH_USART1_RX_DMA_IRQ_Callback(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
	/* Check transfer complete flag */
	if (DMA_HISR_TCIF5 == (DMA_HISR_TCIF5 & DMA2->HISR)) {
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b7e:	d127      	bne.n	8000bd0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x64>
		/* Calculate amount of data received */
		FlashRxMessageLength = MAX_BUFFER_LENGTH - DMA2_Stream5->NDTR;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 8000b90:	701a      	strb	r2, [r3, #0]

		for (int index = 0; index < FlashRxMessageLength; index++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	e00b      	b.n	8000bb0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x44>
			FlashRxBuffer[index] = FlashRxDMABuffer[index];
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <FLASH_USART1_RX_DMA_IRQ_Callback+0x7c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	7819      	ldrb	r1, [r3, #0]
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <FLASH_USART1_RX_DMA_IRQ_Callback+0x80>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < FlashRxMessageLength; index++) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3301      	adds	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <FLASH_USART1_RX_DMA_IRQ_Callback+0x78>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	dbed      	blt.n	8000b98 <FLASH_USART1_RX_DMA_IRQ_Callback+0x2c>
		}
		/* Clear all interrupt flags */
		DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <FLASH_USART1_RX_DMA_IRQ_Callback+0x70>)
 8000bbe:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000bc2:	60da      	str	r2, [r3, #12]
				| DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);

		/* Enable DMA 2 stream 5 */
		DMA2_Stream5->CR |= DMA_SxCR_EN;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <FLASH_USART1_RX_DMA_IRQ_Callback+0x74>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
	} else {
		/* Do nothing, this interrupt is not handled */

	}

}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40026400 	.word	0x40026400
 8000be0:	40026488 	.word	0x40026488
 8000be4:	20000420 	.word	0x20000420
 8000be8:	20000430 	.word	0x20000430
 8000bec:	2000028c 	.word	0x2000028c

08000bf0 <FLASH_IRQ_Callback>:

void FLASH_IRQ_Callback(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <check_errors>:
/**
 * @brief   Check flash errors
 * @param   none
 * @retval  none
 */
static void check_errors() {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

	if (FLASH_SR_PGSERR == (FLASH->SR & FLASH_SR_PGSERR)) {
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <check_errors+0xd8>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	2b80      	cmp	r3, #128	; 0x80
 8000c0e:	d112      	bne.n	8000c36 <check_errors+0x36>
		/* Programming sequence error */
		strTransmit_with_DMA(NACK, sizeof(NACK));
 8000c10:	2105      	movs	r1, #5
 8000c12:	4832      	ldr	r0, [pc, #200]	; (8000cdc <check_errors+0xdc>)
 8000c14:	f000 fe2a 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(error_PGSERR, sizeof(error_PGSERR));
 8000c18:	211b      	movs	r1, #27
 8000c1a:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <check_errors+0xe0>)
 8000c1c:	f000 fe26 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000c20:	212f      	movs	r1, #47	; 0x2f
 8000c22:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <check_errors+0xe4>)
 8000c24:	f000 fe22 	bl	800186c <strTransmit_with_DMA>

		/* Clear */
		FLASH->SR |= FLASH_SR_PGSERR;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <check_errors+0xd8>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <check_errors+0xd8>)
 8000c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c32:	60d3      	str	r3, [r2, #12]
	} else {
		/* No Error */
		strTransmit_with_DMA(ACK, sizeof(ACK));

	}
}
 8000c34:	e04e      	b.n	8000cd4 <check_errors+0xd4>
	} else if (FLASH_SR_PGPERR == (FLASH->SR & FLASH_SR_PGPERR)) {
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <check_errors+0xd8>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	2b40      	cmp	r3, #64	; 0x40
 8000c40:	d112      	bne.n	8000c68 <check_errors+0x68>
		strTransmit_with_DMA(NACK, sizeof(NACK));
 8000c42:	2105      	movs	r1, #5
 8000c44:	4825      	ldr	r0, [pc, #148]	; (8000cdc <check_errors+0xdc>)
 8000c46:	f000 fe11 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(error_PGPERR, sizeof(error_PGPERR));
 8000c4a:	211e      	movs	r1, #30
 8000c4c:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <check_errors+0xe8>)
 8000c4e:	f000 fe0d 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000c52:	212f      	movs	r1, #47	; 0x2f
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <check_errors+0xe4>)
 8000c56:	f000 fe09 	bl	800186c <strTransmit_with_DMA>
		FLASH->SR |= FLASH_SR_PGPERR;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <check_errors+0xd8>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <check_errors+0xd8>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	60d3      	str	r3, [r2, #12]
}
 8000c66:	e035      	b.n	8000cd4 <check_errors+0xd4>
	else if (FLASH_SR_PGAERR == (FLASH->SR & FLASH_SR_PGAERR)) {
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <check_errors+0xd8>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	d112      	bne.n	8000c9a <check_errors+0x9a>
		strTransmit_with_DMA(NACK, sizeof(NACK));
 8000c74:	2105      	movs	r1, #5
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <check_errors+0xdc>)
 8000c78:	f000 fdf8 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(error_PGAERR, sizeof(error_PGAERR));
 8000c7c:	211c      	movs	r1, #28
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <check_errors+0xec>)
 8000c80:	f000 fdf4 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000c84:	212f      	movs	r1, #47	; 0x2f
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <check_errors+0xe4>)
 8000c88:	f000 fdf0 	bl	800186c <strTransmit_with_DMA>
		FLASH->SR |= FLASH_SR_PGAERR;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <check_errors+0xd8>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <check_errors+0xd8>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	e01c      	b.n	8000cd4 <check_errors+0xd4>
	else if (FLASH_SR_WRPERR == (FLASH->SR & FLASH_SR_WRPERR)) {
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <check_errors+0xd8>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d112      	bne.n	8000ccc <check_errors+0xcc>
		strTransmit_with_DMA(NACK, sizeof(NACK));
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <check_errors+0xdc>)
 8000caa:	f000 fddf 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(error_WRPERR, sizeof(error_WRPERR));
 8000cae:	2117      	movs	r1, #23
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <check_errors+0xf0>)
 8000cb2:	f000 fddb 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA(line, sizeof(line));
 8000cb6:	212f      	movs	r1, #47	; 0x2f
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <check_errors+0xe4>)
 8000cba:	f000 fdd7 	bl	800186c <strTransmit_with_DMA>
		FLASH->SR |= FLASH_SR_WRPERR;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <check_errors+0xd8>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <check_errors+0xd8>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	60d3      	str	r3, [r2, #12]
}
 8000cca:	e003      	b.n	8000cd4 <check_errors+0xd4>
		strTransmit_with_DMA(ACK, sizeof(ACK));
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <check_errors+0xf4>)
 8000cd0:	f000 fdcc 	bl	800186c <strTransmit_with_DMA>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023c00 	.word	0x40023c00
 8000cdc:	200001bc 	.word	0x200001bc
 8000ce0:	20000148 	.word	0x20000148
 8000ce4:	20000118 	.word	0x20000118
 8000ce8:	20000164 	.word	0x20000164
 8000cec:	20000184 	.word	0x20000184
 8000cf0:	200001a0 	.word	0x200001a0
 8000cf4:	200001b8 	.word	0x200001b8

08000cf8 <process_command>:
/**
 * @brief   Process flash command
 * @param   none
 * @retval  none
 */
static void process_command() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

	u32 command_address = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
	u32 command_data = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
	u32 command_result = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
	u32 sector_num = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
	/* Process received command */
	switch (FlashRxBuffer[0]) {
 8000d0e:	4b8f      	ldr	r3, [pc, #572]	; (8000f4c <process_command+0x254>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	f200 81cc 	bhi.w	80010b2 <process_command+0x3ba>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <process_command+0x28>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	08000d57 	.word	0x08000d57
 8000d28:	08000d65 	.word	0x08000d65
 8000d2c:	08000dcf 	.word	0x08000dcf
 8000d30:	08000df5 	.word	0x08000df5
 8000d34:	08000e59 	.word	0x08000e59
 8000d38:	08000ec7 	.word	0x08000ec7
 8000d3c:	08000f31 	.word	0x08000f31
 8000d40:	08000f3f 	.word	0x08000f3f
 8000d44:	08000f69 	.word	0x08000f69
	case 1: /*flash lock*/
		/* Write lock bit */
		FLASH->CR |= FLASH_CR_LOCK;
 8000d48:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <process_command+0x258>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	4a80      	ldr	r2, [pc, #512]	; (8000f50 <process_command+0x258>)
 8000d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d52:	6113      	str	r3, [r2, #16]

		break;
 8000d54:	e1ae      	b.n	80010b4 <process_command+0x3bc>
	case 2: /*flash Unlock*/

		/* Write KEY1 */
		FLASH->KEYR = 0x45670123;
 8000d56:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <process_command+0x258>)
 8000d58:	4a7e      	ldr	r2, [pc, #504]	; (8000f54 <process_command+0x25c>)
 8000d5a:	605a      	str	r2, [r3, #4]

		/* Write KEY2 */
		FLASH->KEYR = 0xCDEF89AB;
 8000d5c:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <process_command+0x258>)
 8000d5e:	4a7e      	ldr	r2, [pc, #504]	; (8000f58 <process_command+0x260>)
 8000d60:	605a      	str	r2, [r3, #4]

		break;
 8000d62:	e1a7      	b.n	80010b4 <process_command+0x3bc>
	case 3: /*Write Data*/
		/*example 0x081E0000 put 41 48 4d 45    * 03 00 00 1E 08  41 48 4d 45 *  */
		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000d64:	bf00      	nop
 8000d66:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <process_command+0x258>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f9      	bne.n	8000d66 <process_command+0x6e>
			/* Waiting */
		}

		/* Enable flash programming */
		FLASH->CR |= FLASH_CR_PG;
 8000d72:	4b77      	ldr	r3, [pc, #476]	; (8000f50 <process_command+0x258>)
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4a76      	ldr	r2, [pc, #472]	; (8000f50 <process_command+0x258>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6113      	str	r3, [r2, #16]

		/* Write data into flash */
		command_address = *(u32*) &FlashRxBuffer[1]; // bygeeb awl el address(value in RxBuffre[1]) w ba3den bygeed el address bta3o w ba3den by3mlo cast L 32 34an ya5do kolo ba3d kda by3mlo derefrence 34an ygeb kol el address)
 8000d7e:	4b77      	ldr	r3, [pc, #476]	; (8000f5c <process_command+0x264>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	617b      	str	r3, [r7, #20]
//		        command_data = *(u32*) & FlashRxBuffer[5];

		for (u8 idx = 0; idx < 4; ++idx) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	76fb      	strb	r3, [r7, #27]
 8000d88:	e017      	b.n	8000dba <process_command+0xc2>

			command_data = *(u32*) &FlashRxBuffer[5 + (idx * 4)];
 8000d8a:	7efb      	ldrb	r3, [r7, #27]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3305      	adds	r3, #5
 8000d90:	4a6e      	ldr	r2, [pc, #440]	; (8000f4c <process_command+0x254>)
 8000d92:	4413      	add	r3, r2
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]

			*((volatile uint32_t*) (command_address) + idx) = command_data;
 8000d98:	7efb      	ldrb	r3, [r7, #27]
 8000d9a:	009a      	lsls	r2, r3, #2
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6013      	str	r3, [r2, #0]

			while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000da6:	bf00      	nop
 8000da8:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <process_command+0x258>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f9      	bne.n	8000da8 <process_command+0xb0>
		for (u8 idx = 0; idx < 4; ++idx) {
 8000db4:	7efb      	ldrb	r3, [r7, #27]
 8000db6:	3301      	adds	r3, #1
 8000db8:	76fb      	strb	r3, [r7, #27]
 8000dba:	7efb      	ldrb	r3, [r7, #27]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d9e4      	bls.n	8000d8a <process_command+0x92>
			}

		}

		/* Disable flash programming */
		FLASH->CR &= ~FLASH_CR_PG;
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <process_command+0x258>)
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	4a62      	ldr	r2, [pc, #392]	; (8000f50 <process_command+0x258>)
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	6113      	str	r3, [r2, #16]

		break;
 8000dcc:	e172      	b.n	80010b4 <process_command+0x3bc>

		break;
	case 4: /*Read Data*/
		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000dce:	bf00      	nop
 8000dd0:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <process_command+0x258>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f9      	bne.n	8000dd0 <process_command+0xd8>
			/* Waiting */
		}
		/*example 0x081E0000      * 04 00 00 1E 08 *  note we use little endian so   last byte will be the first to reead    */

		command_address = *(u32*) &FlashRxBuffer[1];
 8000ddc:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <process_command+0x264>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	617b      	str	r3, [r7, #20]
		command_result = *(u32*) command_address;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	607b      	str	r3, [r7, #4]
		strTransmit_with_DMA((char*) &command_result, sizeof(command_result));
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2104      	movs	r1, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fd3d 	bl	800186c <strTransmit_with_DMA>

		break;
 8000df2:	e15f      	b.n	80010b4 <process_command+0x3bc>
	case 5: /*Sector Erase*/
		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000df4:	bf00      	nop
 8000df6:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <process_command+0x258>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f9      	bne.n	8000df6 <process_command+0xfe>
			/* Waiting */
		}
		/* example erase sector 17	 		* 5 17 *    */
		/* Enable flash Sector Erase */
		FLASH->CR |= FLASH_CR_SER;
 8000e02:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <process_command+0x258>)
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <process_command+0x258>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6113      	str	r3, [r2, #16]

		/* Select sector to erase */
		/* Check sector number for bank 2 */
		sector_num = FlashRxBuffer[1];
 8000e0e:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <process_command+0x254>)
 8000e10:	785b      	ldrb	r3, [r3, #1]
 8000e12:	61fb      	str	r3, [r7, #28]
		if (12 <= sector_num) {
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	2b0b      	cmp	r3, #11
 8000e18:	d902      	bls.n	8000e20 <process_command+0x128>
			/* Bank 2 */
			sector_num = sector_num + 4;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	61fb      	str	r3, [r7, #28]
		} else {

		}

		/* Write sector number */
		FLASH->CR |= (FLASH_CR_SNB & (sector_num << 3));
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <process_command+0x258>)
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4949      	ldr	r1, [pc, #292]	; (8000f50 <process_command+0x258>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	610b      	str	r3, [r1, #16]

		/* Start sector erase */
		FLASH->CR |= FLASH_CR_STRT;
 8000e30:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <process_command+0x258>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <process_command+0x258>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6113      	str	r3, [r2, #16]

		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000e3c:	bf00      	nop
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <process_command+0x258>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f9      	bne.n	8000e3e <process_command+0x146>
			/* Waiting */
		}

		/* Disable sector erase */
		FLASH->CR &= ~FLASH_CR_SER;
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <process_command+0x258>)
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <process_command+0x258>)
 8000e50:	f023 0302 	bic.w	r3, r3, #2
 8000e54:	6113      	str	r3, [r2, #16]
		break;
 8000e56:	e12d      	b.n	80010b4 <process_command+0x3bc>
		break;
	case 6: /*Write Protection*/
		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000e58:	bf00      	nop
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <process_command+0x258>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <process_command+0x162>
			/* Waiting */
		}

		/* Check sector number */
		sector_num = FlashRxBuffer[1];
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <process_command+0x254>)
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	61fb      	str	r3, [r7, #28]
		if (12 <= sector_num) {
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b0b      	cmp	r3, #11
 8000e70:	d90f      	bls.n	8000e92 <process_command+0x19a>
			/* Bank 2 */
			sector_num = sector_num - 12;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b0c      	subs	r3, #12
 8000e76:	61fb      	str	r3, [r7, #28]
			FLASH->OPTCR1 &= ~((1 << sector_num) << 16);
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <process_command+0x258>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	0412      	lsls	r2, r2, #16
 8000e86:	43d2      	mvns	r2, r2
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <process_command+0x258>)
 8000e8c:	400b      	ands	r3, r1
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	e00b      	b.n	8000eaa <process_command+0x1b2>
		} else {
			/* Bank 2 */
			FLASH->OPTCR &= ~((1 << sector_num) << 16);
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <process_command+0x258>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	2101      	movs	r1, #1
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <process_command+0x258>)
 8000ea6:	400b      	ands	r3, r1
 8000ea8:	6153      	str	r3, [r2, #20]
		}

		/* Start sector write protection */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <process_command+0x258>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <process_command+0x258>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6153      	str	r3, [r2, #20]

		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000eb6:	bf00      	nop
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <process_command+0x258>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f9      	bne.n	8000eb8 <process_command+0x1c0>
			/* Waiting */
		}
		break;
 8000ec4:	e0f6      	b.n	80010b4 <process_command+0x3bc>
	case 7: /*Remove write protection*/
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000ec6:	bf00      	nop
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <process_command+0x258>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f9      	bne.n	8000ec8 <process_command+0x1d0>

			/* Waiting */
		}

		sector_num = FlashRxBuffer[1];
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <process_command+0x254>)
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	61fb      	str	r3, [r7, #28]
		if (12 <= sector_num) {
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	2b0b      	cmp	r3, #11
 8000ede:	d90e      	bls.n	8000efe <process_command+0x206>
			/* Bank 2 */
			sector_num = sector_num - 12;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3b0c      	subs	r3, #12
 8000ee4:	61fb      	str	r3, [r7, #28]
			FLASH->OPTCR1 |= ((1 << sector_num) << 16);
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <process_command+0x258>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2101      	movs	r1, #1
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	0412      	lsls	r2, r2, #16
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <process_command+0x258>)
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	e00a      	b.n	8000f14 <process_command+0x21c>
		} else {
			/* Bank 2 */
			FLASH->OPTCR |= ((1 << sector_num) << 16);
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <process_command+0x258>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	2101      	movs	r1, #1
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	0412      	lsls	r2, r2, #16
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <process_command+0x258>)
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6153      	str	r3, [r2, #20]
		}

		/* Start sector write protection */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <process_command+0x258>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <process_command+0x258>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6153      	str	r3, [r2, #20]

		/* Wait bsy flag */
		while (0 != (FLASH->SR & FLASH_SR_BSY)) {
 8000f20:	bf00      	nop
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <process_command+0x258>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <process_command+0x22a>
			/* Waiting */
		}

		break;
 8000f2e:	e0c1      	b.n	80010b4 <process_command+0x3bc>
	case 8: /* Option Bytes Unlock */
		/* Write OPTKEY1 */
		FLASH->OPTKEYR = 0x08192A3B;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <process_command+0x258>)
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <process_command+0x268>)
 8000f34:	609a      	str	r2, [r3, #8]

		/* Write OPTKEY2 */
		FLASH->OPTKEYR = 0x4C5D6E7F;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <process_command+0x258>)
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <process_command+0x26c>)
 8000f3a:	609a      	str	r2, [r3, #8]

		break;
 8000f3c:	e0ba      	b.n	80010b4 <process_command+0x3bc>
	case 9:/* Option Bytes Lock */
		/* Write lock bit */
		FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <process_command+0x258>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <process_command+0x258>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6153      	str	r3, [r2, #20]

		break;
 8000f4a:	e0b3      	b.n	80010b4 <process_command+0x3bc>
 8000f4c:	2000028c 	.word	0x2000028c
 8000f50:	40023c00 	.word	0x40023c00
 8000f54:	45670123 	.word	0x45670123
 8000f58:	cdef89ab 	.word	0xcdef89ab
 8000f5c:	2000028d 	.word	0x2000028d
 8000f60:	08192a3b 	.word	0x08192a3b
 8000f64:	4c5d6e7f 	.word	0x4c5d6e7f

	case 10: /* Jump */
		/* get jump address */
		command_address = *(u32*) &FlashRxBuffer[1];
 8000f68:	4b54      	ldr	r3, [pc, #336]	; (80010bc <process_command+0x3c4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	617b      	str	r3, [r7, #20]
		command_data = *(u32*) command_address;/* the stack pointer*/
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]

		strTransmit_with_DMA((char*) command_data, sizeof(NACK));
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	2105      	movs	r1, #5
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fc77 	bl	800186c <strTransmit_with_DMA>
		strTransmit_with_DMA((char*) command_address, sizeof(NACK));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2105      	movs	r1, #5
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fc72 	bl	800186c <strTransmit_with_DMA>

		/*check if it's a valid stack pointer in Ram*/
		if ((command_data & 0x20000000) == 0x20000000) {
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 808a 	beq.w	80010a8 <process_command+0x3b0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop

			/*Disable interrupts*/
			__disable_irq();

			/*Reset Gpio and DMA*/
			RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_DMA2RST);
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <process_command+0x3c8>)
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <process_command+0x3c8>)
 8000f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6113      	str	r3, [r2, #16]

			/* Release reset */
			RCC->AHB1RSTR = 0;
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <process_command+0x3c8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]

			/* Reset USART1 */
			RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <process_command+0x3c8>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24

			/* Release reset */
			RCC->APB2RSTR = 0;
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <process_command+0x3c8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24

			/* Reset RCC */
			/* Set HSION bit to the reset value */
			RCC->CR |= RCC_CR_HSION;
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <process_command+0x3c8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <process_command+0x3c8>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]

			/*wait till HSI is ready*/
			while ((RCC_CR_HSIRDY) != ((RCC->CR) & RCC_CR_HSIRDY)) {
 8000fc6:	bf00      	nop
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <process_command+0x3c8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d1f9      	bne.n	8000fc8 <process_command+0x2d0>
				/*Waiting*/

			}

			/* Set HSITRIM[4:0] bits to the reset value */
			RCC->CR |= RCC_CR_HSITRIM_4;
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <process_command+0x3c8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <process_command+0x3c8>)
 8000fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fde:	6013      	str	r3, [r2, #0]

			/* Reset CFGR register */
			RCC->CFGR = 0;
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <process_command+0x3c8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]

			/* Wait till clock switch is ready and
			 * HSI oscillator selected as system clock */
			while (0 != (RCC_CFGR_SWS & RCC->CFGR)) {
 8000fe6:	bf00      	nop
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <process_command+0x3c8>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f9      	bne.n	8000fe8 <process_command+0x2f0>
				/* Waiting */
			}

			/* Clear HSEON, HSEBYP and CSSON bits */
			RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <process_command+0x3c8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <process_command+0x3c8>)
 8000ffa:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000ffe:	6013      	str	r3, [r2, #0]

			/* Wait till HSE is disabled */
			while (0 != (RCC_CR_HSERDY & RCC->CR)) {
 8001000:	bf00      	nop
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <process_command+0x3c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f9      	bne.n	8001002 <process_command+0x30a>
				/* Waiting */
			}

			/* Clear PLLON bit */
			RCC->CR &= ~RCC_CR_PLLON;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <process_command+0x3c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <process_command+0x3c8>)
 8001014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001018:	6013      	str	r3, [r2, #0]

			/* Wait till PLL is disabled */
			while (0 != (RCC_CR_PLLRDY & RCC->CR)) {
 800101a:	bf00      	nop
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <process_command+0x3c8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f9      	bne.n	800101c <process_command+0x324>
				/* Waiting */
			}
			/*STM32F429*/
			/* Reset PLLCFGR register to default value */
			RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <process_command+0x3c8>)
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <process_command+0x3cc>)
 800102c:	605a      	str	r2, [r3, #4]
					| RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

			RCC->PLLI2SCFGR = 0x24003000;
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <process_command+0x3c8>)
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <process_command+0x3d0>)
 8001032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

			RCC->PLLSAICFGR = 0x24003000;
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <process_command+0x3c8>)
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <process_command+0x3d0>)
 800103a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			/*Disable all interrupt*/
			RCC->CIR = 0x00;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <process_command+0x3c8>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]

			/* Clear LSION bit */
			RCC->CSR &= ~RCC_CSR_LSION;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <process_command+0x3c8>)
 8001046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <process_command+0x3c8>)
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	6753      	str	r3, [r2, #116]	; 0x74

			/* Reset all CSR flags */
			RCC->CSR &= ~RCC_CSR_RMVF;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <process_command+0x3c8>)
 8001052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001054:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <process_command+0x3c8>)
 8001056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800105a:	6753      	str	r3, [r2, #116]	; 0x74

			/* Update the SystemCoreClock global variable */
			SystemCoreClock = HSI_VALUE;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <process_command+0x3d4>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <process_command+0x3d8>)
 8001060:	601a      	str	r2, [r3, #0]

			/* Reset SysTick */
			SysTick->CTRL = 0;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <process_command+0x3dc>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <process_command+0x3dc>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <process_command+0x3dc>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
			/* Check Jump address */
			if (0x1FFF0000 == command_address) /* if want to  jump to system bootloader */
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <process_command+0x3e0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d008      	beq.n	800108e <process_command+0x396>
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 800107c:	f3bf 8f5f 	dmb	sy
}
 8001080:	bf00      	nop

			} else /* if  want to jump to some image in flash*/
			{
				/* Vector Table Relocation in Internal FLASH */
				__DMB();
				SCB->VTOR = command_address;
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <process_command+0x3e4>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 8001088:	f3bf 8f4f 	dsb	sy
}
 800108c:	bf00      	nop
				__DSB();
			}

			/**/
			void (*jump_address)(
					void)=(void *)(*((uint32_t *)(command_address + 4)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
			void (*jump_address)(
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	60bb      	str	r3, [r7, #8]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f383 8808 	msr	MSP, r3
}
 80010a0:	bf00      	nop
			/* Set stack pointer */
			__set_MSP(command_data);

			/* Jump */
			jump_address();
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4798      	blx	r3

		} else {
			/*Send NACK*/
			strTransmit_with_DMA(NACK, sizeof(NACK));
		}
		break;
 80010a6:	e005      	b.n	80010b4 <process_command+0x3bc>
			strTransmit_with_DMA(NACK, sizeof(NACK));
 80010a8:	2105      	movs	r1, #5
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <process_command+0x3e8>)
 80010ac:	f000 fbde 	bl	800186c <strTransmit_with_DMA>
		break;
 80010b0:	e000      	b.n	80010b4 <process_command+0x3bc>
	default:
		break;
 80010b2:	bf00      	nop

	}

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000028d 	.word	0x2000028d
 80010c0:	40023800 	.word	0x40023800
 80010c4:	04003010 	.word	0x04003010
 80010c8:	24003000 	.word	0x24003000
 80010cc:	20000000 	.word	0x20000000
 80010d0:	00f42400 	.word	0x00f42400
 80010d4:	e000e010 	.word	0xe000e010
 80010d8:	1fff0000 	.word	0x1fff0000
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	200001bc 	.word	0x200001bc

080010e4 <Jump_To_APP>:
 * @brief
 * @note
 * @param   void
 * @retval  uint32_t the image to be loaded
 */
void Jump_To_APP(uint32_t image) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

	ImgHeader_t *ImagHeader;
	uint32_t image_origin;


	u32 crcvalid = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]

	switch (image) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d00f      	beq.n	8001116 <Jump_To_APP+0x32>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d80f      	bhi.n	800111c <Jump_To_APP+0x38>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d003      	beq.n	800110a <Jump_To_APP+0x26>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d003      	beq.n	8001110 <Jump_To_APP+0x2c>
 8001108:	e008      	b.n	800111c <Jump_To_APP+0x38>
	case 1:
		image_origin = (uint32_t) &_Image_0_Flash_Origin;
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <Jump_To_APP+0x180>)
 800110c:	61fb      	str	r3, [r7, #28]
		break;
 800110e:	e005      	b.n	800111c <Jump_To_APP+0x38>
	case 2:
		image_origin = (uint32_t) &_Image_1_Flash_Origin;
 8001110:	4b55      	ldr	r3, [pc, #340]	; (8001268 <Jump_To_APP+0x184>)
 8001112:	61fb      	str	r3, [r7, #28]
		break;
 8001114:	e002      	b.n	800111c <Jump_To_APP+0x38>
	case 3:
		image_origin = (uint32_t) &_Image_2_Flash_Origin;
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <Jump_To_APP+0x188>)
 8001118:	61fb      	str	r3, [r7, #28]
		break;
 800111a:	bf00      	nop
	}

	ImagHeader = (ImgHeader_t*) image_origin;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	617b      	str	r3, [r7, #20]

	crcvalid = CRC_validation(image_origin);
 8001120:	69f8      	ldr	r0, [r7, #28]
 8001122:	f000 f8b3 	bl	800128c <CRC_validation>
 8001126:	61b8      	str	r0, [r7, #24]
	if (!crcvalid) {
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <Jump_To_APP+0x52>
		/* CHANGE THE ACTIVE VERSION */
		Change_Active_Image(image);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f8da 	bl	80012e8 <Change_Active_Image>
		while (1)
 8001134:	e7fe      	b.n	8001134 <Jump_To_APP+0x50>
			;
	}
	/*check if it's a valid stack pointer in Ram*/
	if (((*((uint32_t*) ImagHeader->ImageStartAddr))
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	681a      	ldr	r2, [r3, #0]
			& (((uint32_t) ImagHeader->StackPointer)))
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	401a      	ands	r2, r3
			== (((uint32_t) ImagHeader->StackPointer))) {
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	695b      	ldr	r3, [r3, #20]
	if (((*((uint32_t*) ImagHeader->ImageStartAddr))
 8001146:	429a      	cmp	r2, r3
 8001148:	f040 8088 	bne.w	800125c <Jump_To_APP+0x178>
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop

		/*Disable interrupts*/
		__disable_irq();

		/*Reset Gpio and DMA*/
		RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_DMA2RST);
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <Jump_To_APP+0x18c>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a46      	ldr	r2, [pc, #280]	; (8001270 <Jump_To_APP+0x18c>)
 8001156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6113      	str	r3, [r2, #16]

		/* Release reset */
		RCC->AHB1RSTR = 0;
 8001160:	4b43      	ldr	r3, [pc, #268]	; (8001270 <Jump_To_APP+0x18c>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]

		/* Reset USART1 */
		RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <Jump_To_APP+0x18c>)
 8001168:	2210      	movs	r2, #16
 800116a:	625a      	str	r2, [r3, #36]	; 0x24

		/* Release reset */
		RCC->APB2RSTR = 0;
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <Jump_To_APP+0x18c>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

		/* Reset RCC */
		/* Set HSION bit to the reset value */
		RCC->CR |= RCC_CR_HSION;
 8001172:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <Jump_To_APP+0x18c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a3e      	ldr	r2, [pc, #248]	; (8001270 <Jump_To_APP+0x18c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

		/*wait till HSI is ready*/
		while ((RCC_CR_HSIRDY) != ((RCC->CR) & RCC_CR_HSIRDY)) {
 800117e:	bf00      	nop
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <Jump_To_APP+0x18c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b02      	cmp	r3, #2
 800118a:	d1f9      	bne.n	8001180 <Jump_To_APP+0x9c>
			/*Waiting*/

		}

		/* Set HSITRIM[4:0] bits to the reset value */
		RCC->CR |= RCC_CR_HSITRIM_4;
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <Jump_To_APP+0x18c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a37      	ldr	r2, [pc, #220]	; (8001270 <Jump_To_APP+0x18c>)
 8001192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001196:	6013      	str	r3, [r2, #0]

		/* Reset CFGR register */
		RCC->CFGR = 0;
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <Jump_To_APP+0x18c>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]

		/* Wait till clock switch is ready and
		 * HSI oscillator selected as system clock */
		while (0 != (RCC_CFGR_SWS & RCC->CFGR)) {
 800119e:	bf00      	nop
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <Jump_To_APP+0x18c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f9      	bne.n	80011a0 <Jump_To_APP+0xbc>
			/* Waiting */
		}

		/* Clear HSEON, HSEBYP and CSSON bits */
		RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Jump_To_APP+0x18c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <Jump_To_APP+0x18c>)
 80011b2:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80011b6:	6013      	str	r3, [r2, #0]

		/* Wait till HSE is disabled */
		while (0 != (RCC_CR_HSERDY & RCC->CR)) {
 80011b8:	bf00      	nop
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <Jump_To_APP+0x18c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <Jump_To_APP+0xd6>
			/* Waiting */
		}

		/* Clear PLLON bit */
		RCC->CR &= ~RCC_CR_PLLON;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Jump_To_APP+0x18c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a29      	ldr	r2, [pc, #164]	; (8001270 <Jump_To_APP+0x18c>)
 80011cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011d0:	6013      	str	r3, [r2, #0]

		/* Wait till PLL is disabled */
		while (0 != (RCC_CR_PLLRDY & RCC->CR)) {
 80011d2:	bf00      	nop
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <Jump_To_APP+0x18c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f9      	bne.n	80011d4 <Jump_To_APP+0xf0>
			/* Waiting */
		}
		/*STM32F429*/
		/* Reset PLLCFGR register to default value */
		RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <Jump_To_APP+0x18c>)
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <Jump_To_APP+0x190>)
 80011e4:	605a      	str	r2, [r3, #4]
				| RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

		RCC->PLLI2SCFGR = 0x24003000;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <Jump_To_APP+0x18c>)
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <Jump_To_APP+0x194>)
 80011ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		RCC->PLLSAICFGR = 0x24003000;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Jump_To_APP+0x18c>)
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <Jump_To_APP+0x194>)
 80011f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		/*Disable all interrupt*/
		RCC->CIR = 0x00;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <Jump_To_APP+0x18c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]

		/* Clear LSION bit */
		RCC->CSR &= ~RCC_CSR_LSION;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <Jump_To_APP+0x18c>)
 80011fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <Jump_To_APP+0x18c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6753      	str	r3, [r2, #116]	; 0x74

		/* Reset all CSR flags */
		RCC->CSR &= ~RCC_CSR_RMVF;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <Jump_To_APP+0x18c>)
 800120a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <Jump_To_APP+0x18c>)
 800120e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001212:	6753      	str	r3, [r2, #116]	; 0x74

		/* Update the SystemCoreClock global variable */
		SystemCoreClock = HSI_VALUE;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <Jump_To_APP+0x198>)
 8001216:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <Jump_To_APP+0x19c>)
 8001218:	601a      	str	r2, [r3, #0]

		/* Reset SysTick */
		SysTick->CTRL = 0;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <Jump_To_APP+0x1a0>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <Jump_To_APP+0x1a0>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <Jump_To_APP+0x1a0>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb");
 800122c:	f3bf 8f5f 	dmb	sy
}
 8001230:	bf00      	nop

		/* Check Jump address */

		/* Vector Table Relocation in Internal FLASH */
		__DMB();
		SCB->VTOR = ImagHeader->VectorTableAddr;
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <Jump_To_APP+0x1a4>)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 800123a:	f3bf 8f4f 	dsb	sy
}
 800123e:	bf00      	nop
		__DSB();

		/**/
		void (*jump_main2)(
				void)=(void *)(*((uint32_t *)(ImagHeader->EntryPointAddr)));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	681b      	ldr	r3, [r3, #0]
		void (*jump_main2)(
 8001246:	613b      	str	r3, [r7, #16]
		/* Set stack pointer */
		__set_MSP((*((uint32_t*) ImagHeader->StackPointer)));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f383 8808 	msr	MSP, r3
}
 8001256:	bf00      	nop

		/* Jump */
		jump_main2();
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4798      	blx	r3

	}

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08010000 	.word	0x08010000
 8001268:	08040000 	.word	0x08040000
 800126c:	08080000 	.word	0x08080000
 8001270:	40023800 	.word	0x40023800
 8001274:	04003010 	.word	0x04003010
 8001278:	24003000 	.word	0x24003000
 800127c:	20000000 	.word	0x20000000
 8001280:	00f42400 	.word	0x00f42400
 8001284:	e000e010 	.word	0xe000e010
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <CRC_validation>:
 * @brief
 * @note
 * @param   uint32_t is the image is valid
 * @retval  uint32_t the image to be valdated
 */
uint32_t CRC_validation(uint32_t image_origin) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

	crc_t crc;

	u32 result = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]

	ImgHeader_t *ImagHeader = (ImgHeader_t*) image_origin;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	61bb      	str	r3, [r7, #24]

	uint32_t imageCRCpassed = ImagHeader->CRC32;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	617b      	str	r3, [r7, #20]
	/* the flash we need to crc check */
	volatile uint32_t *Flash_used;

	//		Flash_used=((uint32_t *)(0x8000250));
	/* the start of the checked crc calculations after the image header */
	Flash_used = ((uint32_t*) (ImagHeader + ImagHeader->ImageHeaderOffset));
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	222c      	movs	r2, #44	; 0x2c
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4413      	add	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]

	uint32_t imageLength = (uint32_t) ((ImagHeader->ImageEnd)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			- ImagHeader->ImageCRCStart);
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uint32_t imageLength = (uint32_t) ((ImagHeader->ImageEnd)
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	60fb      	str	r3, [r7, #12]

	/*initialize the crc library*/
	crc = crc_init();
 80012be:	f7ff faf3 	bl	80008a8 <crc_init>
 80012c2:	60b8      	str	r0, [r7, #8]

	//crc=crc_update(crc,Flash_used,0x7f0);
	/* calculate the new crc */
	crc = crc_update(crc, Flash_used, imageLength);
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f000 f8ef 	bl	80014ac <crc_update>
 80012ce:	60b8      	str	r0, [r7, #8]

	if (crc == imageCRCpassed)
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d101      	bne.n	80012dc <CRC_validation+0x50>
		result = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]

	return result;
 80012dc:	69fb      	ldr	r3, [r7, #28]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <Change_Active_Image>:

uint32_t Change_Active_Image(uint32_t currentActiveImage) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint32_t newActiveImage = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
	uint32_t image_origin = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
	uint8_t terminate = 0, i = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	74fb      	strb	r3, [r7, #19]
 80012fc:	2300      	movs	r3, #0
 80012fe:	74bb      	strb	r3, [r7, #18]

	while (terminate == 0 && i < 3) {
 8001300:	e028      	b.n	8001354 <Change_Active_Image+0x6c>

		switch (currentActiveImage) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d015      	beq.n	8001334 <Change_Active_Image+0x4c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d818      	bhi.n	8001340 <Change_Active_Image+0x58>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <Change_Active_Image+0x34>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d006      	beq.n	8001328 <Change_Active_Image+0x40>
 800131a:	e011      	b.n	8001340 <Change_Active_Image+0x58>
		case 1:
			currentActiveImage = 3;
 800131c:	2303      	movs	r3, #3
 800131e:	607b      	str	r3, [r7, #4]
			image_origin = _Image_2_Flash_Origin;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <Change_Active_Image+0x8c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	617b      	str	r3, [r7, #20]
			break;
 8001326:	e00b      	b.n	8001340 <Change_Active_Image+0x58>
		case 2:
			currentActiveImage = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
			image_origin = _Image_0_Flash_Origin;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <Change_Active_Image+0x90>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]
			break;
 8001332:	e005      	b.n	8001340 <Change_Active_Image+0x58>
		case 3:
			currentActiveImage = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	607b      	str	r3, [r7, #4]
			image_origin = _Image_1_Flash_Origin;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <Change_Active_Image+0x94>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	617b      	str	r3, [r7, #20]
			break;
 800133e:	bf00      	nop
		}
		if ((*(uint32_t*) image_origin) == 0x20000000) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001348:	d101      	bne.n	800134e <Change_Active_Image+0x66>
			terminate = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	74fb      	strb	r3, [r7, #19]
		}
		i++;
 800134e:	7cbb      	ldrb	r3, [r7, #18]
 8001350:	3301      	adds	r3, #1
 8001352:	74bb      	strb	r3, [r7, #18]
	while (terminate == 0 && i < 3) {
 8001354:	7cfb      	ldrb	r3, [r7, #19]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <Change_Active_Image+0x78>
 800135a:	7cbb      	ldrb	r3, [r7, #18]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d9d0      	bls.n	8001302 <Change_Active_Image+0x1a>
	}

	newActiveImage = currentActiveImage;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]
	EEpromEmulation_write_variable2(newActiveImage);
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f7ff f971 	bl	800064c <EEpromEmulation_write_variable2>

	return newActiveImage;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08080000 	.word	0x08080000
 8001378:	08010000 	.word	0x08010000
 800137c:	08040000 	.word	0x08040000

08001380 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da0b      	bge.n	80013ac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <NVIC_SetPriority+0x4c>)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	3b04      	subs	r3, #4
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80013aa:	e009      	b.n	80013c0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <NVIC_SetPriority+0x50>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ffc2 	bl	8001380 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <SysTick_IncrementTicks_cb>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_IncrementTicks_cb(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_IncrementTicks_cb+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a03      	ldr	r2, [pc, #12]	; (8001430 <SysTick_IncrementTicks_cb+0x18>)
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	200001e0 	.word	0x200001e0

08001434 <SysTick_Delay>:
 * @note    SysTick will be update with IRQ callback
 * @param   Waiting time in milliseconds
 * @retval  None
 */
void SysTick_Delay(uint32_t wait_time_ms)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <SysTick_Delay+0x2c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 8001442:	bf00      	nop
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SysTick_Delay+0x2c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d8f8      	bhi.n	8001444 <SysTick_Delay+0x10>
  {

  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200001e0 	.word	0x200001e0

08001464 <SysTick_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 800146a:	f7fe ffdb 	bl	8000424 <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 180000000)
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <SysTick_Init+0x3c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <SysTick_Init+0x40>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d000      	beq.n	800147a <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 8001478:	e7fe      	b.n	8001478 <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <SysTick_Init+0x3c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Init+0x44>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffa4 	bl	80013d4 <SysTick_Config>
 800148c:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d000      	beq.n	8001496 <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 8001494:	e7fe      	b.n	8001494 <SysTick_Init+0x30>
  }
  else
  {
    /* Do nothing, SysTick configuration OK */
  }
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	0aba9500 	.word	0x0aba9500
 80014a8:	10624dd3 	.word	0x10624dd3

080014ac <crc_update>:
    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};


crc_t crc_update(crc_t crc, const void *data, size_t data_len)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
    const unsigned char *d = (const unsigned char *)data;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	617b      	str	r3, [r7, #20]
    unsigned int tbl_idx;

    while (data_len--) {
 80014bc:	e011      	b.n	80014e2 <crc_update+0x36>
        tbl_idx = (crc ^ *d) & 0xff;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4053      	eors	r3, r2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	613b      	str	r3, [r7, #16]
        crc = (crc_table[tbl_idx] ^ (crc >> 8)) & 0xffffffff;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <crc_update+0x50>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	4053      	eors	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        d++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
    while (data_len--) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e8      	bne.n	80014be <crc_update+0x12>
    }
    return crc & 0xffffffff;
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	08001c80 	.word	0x08001c80

08001500 <GPIO_Init_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_Init_LED(Led_Type led)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  /* Check LED type, please */
  switch (led)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d138      	bne.n	8001582 <GPIO_Init_LED+0x82>
  {
    case EVAL_ALL_LEDs:

      /* Enable port G clock */
      RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <GPIO_Init_LED+0x90>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <GPIO_Init_LED+0x90>)
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	6313      	str	r3, [r2, #48]	; 0x30

      /* Reset mode */
      GPIOG->MODER &= ~(GPIO_MODER_MODER13 | GPIO_MODER_MODER14);
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <GPIO_Init_LED+0x94>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <GPIO_Init_LED+0x94>)
 8001522:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
 8001526:	6013      	str	r3, [r2, #0]

      /* Select output mode for pin 13, pin 14 */
      GPIOG->MODER |= GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <GPIO_Init_LED+0x94>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <GPIO_Init_LED+0x94>)
 800152e:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 8001532:	6013      	str	r3, [r2, #0]

      /* Select output type push-pull */
      GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13 | GPIO_OTYPER_OT_14);
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <GPIO_Init_LED+0x94>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <GPIO_Init_LED+0x94>)
 800153a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800153e:	6053      	str	r3, [r2, #4]

      /* Select output speed very high */
      GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13_0 | GPIO_OSPEEDER_OSPEEDR13_1
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <GPIO_Init_LED+0x94>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <GPIO_Init_LED+0x94>)
 8001546:	f043 5370 	orr.w	r3, r3, #1006632960	; 0x3c000000
 800154a:	6093      	str	r3, [r2, #8]
          | GPIO_OSPEEDER_OSPEEDR14_0 | GPIO_OSPEEDER_OSPEEDR14_1);

      /* Enable SYSCFG clock */
      RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <GPIO_Init_LED+0x90>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <GPIO_Init_LED+0x90>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6453      	str	r3, [r2, #68]	; 0x44

      /* Enable compensation cell */
      SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <GPIO_Init_LED+0x98>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <GPIO_Init_LED+0x98>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6213      	str	r3, [r2, #32]

      /* Wait till compensation cell is ready */
      while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY)
 8001564:	bf00      	nop
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <GPIO_Init_LED+0x98>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001572:	d1f8      	bne.n	8001566 <GPIO_Init_LED+0x66>
      {

      }

      /* Select no pull */
      GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13 | GPIO_PUPDR_PUPDR14);
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <GPIO_Init_LED+0x94>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <GPIO_Init_LED+0x94>)
 800157a:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
 800157e:	60d3      	str	r3, [r2, #12]

      break;
 8001580:	e000      	b.n	8001584 <GPIO_Init_LED+0x84>

    default:
      break;
 8001582:	bf00      	nop
  }
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40023800 	.word	0x40023800
 8001594:	40021800 	.word	0x40021800
 8001598:	40013800 	.word	0x40013800

0800159c <GPIO_Init_PB>:
 * @note    On-board push button connected to PA0
 * @param   None
 * @retval  None
 */
void GPIO_Init_PB()
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* Enable post GPIOA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <GPIO_Init_PB+0x34>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <GPIO_Init_PB+0x34>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Select input mode for PA0 */
  GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <GPIO_Init_PB+0x38>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <GPIO_Init_PB+0x38>)
 80015b2:	f023 0303 	bic.w	r3, r3, #3
 80015b6:	6013      	str	r3, [r2, #0]

  /* Select no pull up because it has external pull down */
  GPIOA->PUPDR |= ~(GPIO_PUPDR_PUPDR0);
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <GPIO_Init_PB+0x38>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <GPIO_Init_PB+0x38>)
 80015be:	f063 0303 	orn	r3, r3, #3
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <GPIO_Result_PB>:
 * @brief   Push button GPIO get output value function
 * @note    On-board push button connected to PA0
 * @param   None
 * @retval  None
 */
u8 GPIO_Result_PB(){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
	volatile u8 result;

 result = (GPIOA->IDR)&(GPIO_IDR_IDR_0);
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <GPIO_Result_PB+0x24>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	71fb      	strb	r3, [r7, #7]
 return result;
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40020000 	.word	0x40020000

08001600 <GPIO_TurnON_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_TurnON_LED(Led_Type led)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  switch (led)
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d00b      	beq.n	8001628 <GPIO_TurnON_LED+0x28>
 8001610:	2b02      	cmp	r3, #2
 8001612:	dc12      	bgt.n	800163a <GPIO_TurnON_LED+0x3a>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <GPIO_TurnON_LED+0x1e>
 8001618:	2b01      	cmp	r3, #1
 800161a:	d00a      	beq.n	8001632 <GPIO_TurnON_LED+0x32>
    case EVAL_GREEN_LED_BITBAND:
      GREEN_LED_BITBAND = 1;
      break;

    default:
      break;
 800161c:	e00d      	b.n	800163a <GPIO_TurnON_LED+0x3a>
      GPIOG->BSRRL = GPIO_BSRR_BS_13;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <GPIO_TurnON_LED+0x48>)
 8001620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001624:	831a      	strh	r2, [r3, #24]
      break;
 8001626:	e009      	b.n	800163c <GPIO_TurnON_LED+0x3c>
      GPIOG->BSRRL = GPIO_BSRR_BS_14;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <GPIO_TurnON_LED+0x48>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	831a      	strh	r2, [r3, #24]
      break;
 8001630:	e004      	b.n	800163c <GPIO_TurnON_LED+0x3c>
      GREEN_LED_BITBAND = 1;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <GPIO_TurnON_LED+0x4c>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
      break;
 8001638:	e000      	b.n	800163c <GPIO_TurnON_LED+0x3c>
      break;
 800163a:	bf00      	nop
  }
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021800 	.word	0x40021800
 800164c:	424302b4 	.word	0x424302b4

08001650 <GPIO_TurnOFF_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void GPIO_TurnOFF_LED(Led_Type led)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  switch (led)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d00b      	beq.n	8001678 <GPIO_TurnOFF_LED+0x28>
 8001660:	2b02      	cmp	r3, #2
 8001662:	dc12      	bgt.n	800168a <GPIO_TurnOFF_LED+0x3a>
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <GPIO_TurnOFF_LED+0x1e>
 8001668:	2b01      	cmp	r3, #1
 800166a:	d00a      	beq.n	8001682 <GPIO_TurnOFF_LED+0x32>
    case EVAL_GREEN_LED_BITBAND:
      GREEN_LED_BITBAND = 0;
      break;

    default:
      break;
 800166c:	e00d      	b.n	800168a <GPIO_TurnOFF_LED+0x3a>
      GPIOG->BSRRH = GPIO_BSRR_BS_13;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <GPIO_TurnOFF_LED+0x48>)
 8001670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001674:	835a      	strh	r2, [r3, #26]
      break;
 8001676:	e009      	b.n	800168c <GPIO_TurnOFF_LED+0x3c>
      GPIOG->BSRRH = GPIO_BSRR_BS_14;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <GPIO_TurnOFF_LED+0x48>)
 800167a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167e:	835a      	strh	r2, [r3, #26]
      break;
 8001680:	e004      	b.n	800168c <GPIO_TurnOFF_LED+0x3c>
      GREEN_LED_BITBAND = 0;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <GPIO_TurnOFF_LED+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
      break;
 8001688:	e000      	b.n	800168c <GPIO_TurnOFF_LED+0x3c>
      break;
 800168a:	bf00      	nop
  }
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021800 	.word	0x40021800
 800169c:	424302b4 	.word	0x424302b4

080016a0 <GPIO_OUT_INIT>:
 * @note
 * @param	Port Name , bit Number , Mode, Alternative function , output type/ ,output speed, pull up / pull down
 * @retval
 */
void GPIO_OUT_INIT(GPIO_PORT port_name , u8 bit_number , gpio_mode mode, u8 AL_fun ,gpio_output_type out_type , gpio_output_speed speed, gpio_pulling  pull_type  )
{
 80016a0:	b490      	push	{r4, r7}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4623      	mov	r3, r4
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	4603      	mov	r3, r0
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	460b      	mov	r3, r1
 80016b8:	717b      	strb	r3, [r7, #5]
 80016ba:	4613      	mov	r3, r2
 80016bc:	713b      	strb	r3, [r7, #4]
    /* Enable port X clock */

	RCC_AHB1ENR |= (1<<port_name);
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <GPIO_OUT_INIT+0x114>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	4611      	mov	r1, r2
 80016cc:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <GPIO_OUT_INIT+0x114>)
 80016ce:	430b      	orrs	r3, r1
 80016d0:	6013      	str	r3, [r2, #0]

    /* Calculating port base addr */

	u32 portbase= myGPIOA_BASE + (u32)((1024)*(port_name));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	029b      	lsls	r3, r3, #10
 80016d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80016de:	60fb      	str	r3, [r7, #12]

	/* Select output mode */   /*   using generic formla as each port base exeede the previous by 0x400 */

	//u32 x =
	bit_word_addr(portbase,GPIOx_MODER,bit_number)|=(u32)(mode<<(2*bit_number));
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	7979      	ldrb	r1, [r7, #5]
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

	/* Select Alternative function */
	if(bit_number<8)
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	d80d      	bhi.n	8001718 <GPIO_OUT_INIT+0x78>
		bit_word_addr(portbase,GPIOx_AFRL,bit_number) |=((u32)(AL_fun<<(4*bit_number)));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3320      	adds	r3, #32
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	7939      	ldrb	r1, [r7, #4]
 8001704:	79ba      	ldrb	r2, [r7, #6]
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	4611      	mov	r1, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	3220      	adds	r2, #32
 8001712:	430b      	orrs	r3, r1
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00d      	b.n	8001734 <GPIO_OUT_INIT+0x94>
	else
		bit_word_addr(portbase,GPIOx_AFRH,bit_number) |=((u32)(AL_fun<<(4*(bit_number-8))));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3324      	adds	r3, #36	; 0x24
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	7939      	ldrb	r1, [r7, #4]
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	3a08      	subs	r2, #8
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4611      	mov	r1, r2
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	3224      	adds	r2, #36	; 0x24
 8001730:	430b      	orrs	r3, r1
 8001732:	6013      	str	r3, [r2, #0]


	/* Select output type push-pull */

	bit_word_addr(portbase,GPIOx_OTYPER,bit_number) |=(u32)(out_type<<bit_number);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	7e39      	ldrb	r1, [r7, #24]
 800173c:	79ba      	ldrb	r2, [r7, #6]
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4611      	mov	r1, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	3204      	adds	r2, #4
 8001748:	430b      	orrs	r3, r1
 800174a:	6013      	str	r3, [r2, #0]


	/* Select output Speed */

	bit_word_addr(portbase,GPIOx_OSPEEDR,bit_number) |=(u32)(speed<<(2*bit_number));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	7f39      	ldrb	r1, [r7, #28]
 8001754:	79ba      	ldrb	r2, [r7, #6]
 8001756:	0052      	lsls	r2, r2, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4611      	mov	r1, r2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	3208      	adds	r2, #8
 8001762:	430b      	orrs	r3, r1
 8001764:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock */

	RCC_APB2ENR|=RCC_APB2LPENR_SYSCFGLPEN;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <GPIO_OUT_INIT+0x118>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <GPIO_OUT_INIT+0x118>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6013      	str	r3, [r2, #0]


    /* Enable compensation cell */
	SYSCFG_CMPCR|=SYSCFG_CMPCR_CMP_PD;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <GPIO_OUT_INIT+0x11c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <GPIO_OUT_INIT+0x11c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]

    //SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;

    /* Wait till compensation cell is ready */

    while((SYSCFG_CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY)
 800177e:	bf00      	nop
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <GPIO_OUT_INIT+0x11c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178c:	d1f8      	bne.n	8001780 <GPIO_OUT_INIT+0xe0>
    }


	/* Select output pull_type */

	bit_word_addr(portbase,GPIOx_PUPDR,bit_number) |=(pull_type<<(2*bit_number));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	330c      	adds	r3, #12
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001798:	79ba      	ldrb	r2, [r7, #6]
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4611      	mov	r1, r2
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	320c      	adds	r2, #12
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6013      	str	r3, [r2, #0]



*/

}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc90      	pop	{r4, r7}
 80017b2:	4770      	bx	lr
 80017b4:	40023830 	.word	0x40023830
 80017b8:	40023844 	.word	0x40023844
 80017bc:	40013820 	.word	0x40013820

080017c0 <myGPIO_TurnON_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void myGPIO_TurnON_LED(myLed_Type led)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]


	  switch (led)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d00b      	beq.n	80017e8 <myGPIO_TurnON_LED+0x28>
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	dc0e      	bgt.n	80017f2 <myGPIO_TurnON_LED+0x32>
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <myGPIO_TurnON_LED+0x1e>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d00c      	beq.n	80017f6 <myGPIO_TurnON_LED+0x36>
	    case myEVAL_GREEN_LED_BITBAND:
	   //   GREEN_LED_BITBAND = 1;
	      break;

	    default:
	      break;
 80017dc:	e009      	b.n	80017f2 <myGPIO_TurnON_LED+0x32>
	      GPIOG->BSRRL = GPIO_BSRR_BS_13;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <myGPIO_TurnON_LED+0x44>)
 80017e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e4:	831a      	strh	r2, [r3, #24]
	      break;
 80017e6:	e007      	b.n	80017f8 <myGPIO_TurnON_LED+0x38>
	      GPIOG->BSRRL = GPIO_BSRR_BS_14;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <myGPIO_TurnON_LED+0x44>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	831a      	strh	r2, [r3, #24]
	      break;
 80017f0:	e002      	b.n	80017f8 <myGPIO_TurnON_LED+0x38>
	      break;
 80017f2:	bf00      	nop
 80017f4:	e000      	b.n	80017f8 <myGPIO_TurnON_LED+0x38>
	      break;
 80017f6:	bf00      	nop

    default:
      break;
  }
  */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40021800 	.word	0x40021800

08001808 <myGPIO_TurnOFF_LED>:
 *          EVAL_RED_LED -> PG14
 * @param   Led_Type led
 * @retval  None
 */
void myGPIO_TurnOFF_LED(myLed_Type led)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]

	  switch (led)
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d00a      	beq.n	800182e <myGPIO_TurnOFF_LED+0x26>
 8001818:	2b02      	cmp	r3, #2
 800181a:	dc0c      	bgt.n	8001836 <myGPIO_TurnOFF_LED+0x2e>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <myGPIO_TurnOFF_LED+0x1e>
 8001820:	2b01      	cmp	r3, #1
 8001822:	d00a      	beq.n	800183a <myGPIO_TurnOFF_LED+0x32>
	    case myEVAL_GREEN_LED_BITBAND:
	      //GREEN_LED_BITBAND = 0;
	      break;

	    default:
	      break;
 8001824:	e007      	b.n	8001836 <myGPIO_TurnOFF_LED+0x2e>
	      GPIOG->BSRRH = GPIO_BSRR_BR_13;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <myGPIO_TurnOFF_LED+0x40>)
 8001828:	2200      	movs	r2, #0
 800182a:	835a      	strh	r2, [r3, #26]
	      break;
 800182c:	e006      	b.n	800183c <myGPIO_TurnOFF_LED+0x34>
	      GPIOG->BSRRH = GPIO_BSRR_BR_14;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <myGPIO_TurnOFF_LED+0x40>)
 8001830:	2200      	movs	r2, #0
 8001832:	835a      	strh	r2, [r3, #26]
	      break;
 8001834:	e002      	b.n	800183c <myGPIO_TurnOFF_LED+0x34>
	      break;
 8001836:	bf00      	nop
 8001838:	e000      	b.n	800183c <myGPIO_TurnOFF_LED+0x34>
	      break;
 800183a:	bf00      	nop
      break;
  }


*/
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40021800 	.word	0x40021800

0800184c <RCC_SystemReset>:
 * @note
 * @param   None
 * @retval  None
 */
void RCC_SystemReset(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* Perform system reset */

  //NVIC_SystemReset();
	SCB_AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB_AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <RCC_SystemReset+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
	SCB_AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <RCC_SystemReset+0x18>)
                 (SCB_AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <RCC_SystemReset+0x1c>)
 800185c:	4313      	orrs	r3, r2
	SCB_AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800185e:	600b      	str	r3, [r1, #0]
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  while(1);
 8001860:	e7fe      	b.n	8001860 <RCC_SystemReset+0x14>
 8001862:	bf00      	nop
 8001864:	e000ed0c 	.word	0xe000ed0c
 8001868:	05fa0004 	.word	0x05fa0004

0800186c <strTransmit_with_DMA>:
  * @note
  * @param   str, size
  * @retval  None
  */
  void strTransmit_with_DMA(const char * str, uint8_t size)
 {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
   /* Check null pointers */
   if(NULL != str)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <strTransmit_with_DMA+0x40>
   {
     /* Wait until DMA2 stream 7 is disabled */
     while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 800187e:	bf00      	nop
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <strTransmit_with_DMA+0x4c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d0f9      	beq.n	8001880 <strTransmit_with_DMA+0x14>
       /* Do nothing, the enable flag shall reset
        * when DMA transfer complete */
     }

     /* Set memory address */
     DMA2_Stream7->M0AR = (uint32_t)str;
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <strTransmit_with_DMA+0x4c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60d3      	str	r3, [r2, #12]

     /* Set number of data items */
     DMA2_Stream7->NDTR = size;
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <strTransmit_with_DMA+0x4c>)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	6053      	str	r3, [r2, #4]

     /* Clear all interrupt flags */
     DMA2->HIFCR = (DMA_HIFCR_CFEIF7 | DMA_HIFCR_CDMEIF7 | DMA_HIFCR_CTEIF7
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <strTransmit_with_DMA+0x50>)
 800189a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800189e:	60da      	str	r2, [r3, #12]
         | DMA_HIFCR_CHTIF7 | DMA_HIFCR_CTCIF7);

     /* Enable DMA2 stream 7 */
     DMA2_Stream7->CR |= DMA_SxCR_EN;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <strTransmit_with_DMA+0x4c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <strTransmit_with_DMA+0x4c>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]
   }
   else
   {
     /* Null pointers, do nothing */
   }
 }
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	400264b8 	.word	0x400264b8
 80018bc:	40026400 	.word	0x40026400

080018c0 <myUSART1_GPIO_Config>:
 * @brief   Configure GPIO with AF7, USART1 connected to APB2 with 90MHz clock
 * @note    PA9 -> USART1_TX, PA10 -> USART1_RX
 * @param   None
 * @retval  None
 */
void myUSART1_GPIO_Config(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af04      	add	r7, sp, #16

	//RCC_APB1ENR|=RCC_AHB1ENR_GPIOAEN;
	GPIO_OUT_INIT(USART1_TX_PORT  , USART1_TX_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
 80018c6:	2301      	movs	r3, #1
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2307      	movs	r3, #7
 80018d4:	2202      	movs	r2, #2
 80018d6:	2109      	movs	r1, #9
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fee1 	bl	80016a0 <GPIO_OUT_INIT>
	GPIO_OUT_INIT(USART1_RX_PORT  , USART1_RX_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
 80018de:	2301      	movs	r3, #1
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2307      	movs	r3, #7
 80018ec:	2202      	movs	r2, #2
 80018ee:	210a      	movs	r1, #10
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fed5 	bl	80016a0 <GPIO_OUT_INIT>
	#endif

#if USART_CLKEN==TRUE
	GPIO_OUT_INIT(USART1_CK_PORT  , USART1_CK_PIN , gpio_alternative, 7 ,push_pull , medium_speed, pull_up  );
#endif
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <myUSART1_Enable>:
 * @note
 * @param   None
 * @retval  None
 */
void myUSART1_Enable(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Enable USART1 */
  USART1_CR1 |= USART_CR1_UE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <myUSART1_Enable+0x6c>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <myUSART1_Enable+0x6c>)
 8001908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800190c:	b29b      	uxth	r3, r3
 800190e:	8013      	strh	r3, [r2, #0]

  /* Enable transmitter */
  USART1_CR1 |= USART_CR1_TE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <myUSART1_Enable+0x6c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <myUSART1_Enable+0x6c>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	b29b      	uxth	r3, r3
 800191e:	8013      	strh	r3, [r2, #0]

  /* Enable receiver */
  USART1_CR1 |= USART_CR1_RE;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <myUSART1_Enable+0x6c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <myUSART1_Enable+0x6c>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	b29b      	uxth	r3, r3
 800192e:	8013      	strh	r3, [r2, #0]

  /* Enable parity error interrupt */
//  USART1_CR1 |= USART_CR1_PEIE;

  /* Enable idle line detection interrupt */ /* in order to know when massage ended*/
   USART1->CR1 |= USART_CR1_IDLEIE;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <myUSART1_Enable+0x70>)
 8001932:	899b      	ldrh	r3, [r3, #12]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <myUSART1_Enable+0x70>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	b29b      	uxth	r3, r3
 800193e:	8193      	strh	r3, [r2, #12]

  /* Enable DMA mode for transmitter and receiver */
  USART1->CR3 |= USART_CR3_DMAT;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <myUSART1_Enable+0x70>)
 8001942:	8a9b      	ldrh	r3, [r3, #20]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <myUSART1_Enable+0x70>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	b29b      	uxth	r3, r3
 800194e:	8293      	strh	r3, [r2, #20]
  USART1->CR3 |= USART_CR3_DMAR;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <myUSART1_Enable+0x70>)
 8001952:	8a9b      	ldrh	r3, [r3, #20]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <myUSART1_Enable+0x70>)
 8001958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195c:	b29b      	uxth	r3, r3
 800195e:	8293      	strh	r3, [r2, #20]

  /*Enable DMA2 Stream 5 which is  RX using DMA*/
  DMA2_Stream_5_Enable();
 8001960:	f7fe fe5e 	bl	8000620 <DMA2_Stream_5_Enable>
 /* DMA2->HIFCR = (DMA_HIFCR_CFEIF5 | DMA_HIFCR_CDMEIF5 | DMA_HIFCR_CTEIF5
      | DMA_HIFCR_CHTIF5 | DMA_HIFCR_CTCIF5);
*/
  /* Enable DMA2 stream 5 for RX */
  //DMA2_Stream5->CR |= DMA_SxCR_EN;
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	4001100c 	.word	0x4001100c
 800196c:	40011000 	.word	0x40011000

08001970 <USART1_TX_DMA_Config>:
 * @note    USART1_TX -> DMA2_Stream7 (Channel 4)
 * @param   None
 * @retval  None
 */
void USART1_TX_DMA_Config(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Enable DMA clock in RCC */
  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <USART1_TX_DMA_Config+0xcc>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <USART1_TX_DMA_Config+0xcc>)
 800197a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800197e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Make sure that the DMA2 stream 7 is disabled */
  if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10c      	bne.n	80019a6 <USART1_TX_DMA_Config+0x36>
  {
    /* DMA 2 stream 7 is enabled, shall be disabled first */
    DMA2_Stream7->CR &= ~DMA_SxCR_EN;
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

    /* Wait until EN bit is cleared */
    while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream7->CR))
 8001998:	bf00      	nop
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d0f9      	beq.n	800199a <USART1_TX_DMA_Config+0x2a>
  {
    /* Do nothing, stream 7 is not enabled */
  }

  /* Select the DMA channel 4 in CHSEL[2:0] in the DMA_SxCR */
  DMA2_Stream7->CR &= ~DMA_SxCR_CHSEL;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019ac:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80019b0:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_CHSEL_2;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019bc:	6013      	str	r3, [r2, #0]

  /* Select stream priority very high */
  DMA2_Stream7->CR |= DMA_SxCR_PL;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019c4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Select the data transfer direction memory-to-peripheral */
  DMA2_Stream7->CR &= ~DMA_SxCR_DIR;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019d4:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e0:	6013      	str	r3, [r2, #0]

  /* Select memory and peripherals sizes byte (8-bit) */
  DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019e8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80019ec:	6013      	str	r3, [r2, #0]
  DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019f4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80019f8:	6013      	str	r3, [r2, #0]

  /* Select FIFO mode */
  DMA2_Stream7->FCR |= DMA_SxFCR_DMDIS;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6153      	str	r3, [r2, #20]

  /* Select FIFO threshold level half FIFO */
  DMA2_Stream7->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a0c:	f043 0303 	orr.w	r3, r3, #3
 8001a10:	6153      	str	r3, [r2, #20]

  /* Select memory incremented mode, peripheral shall has fixed address and memory increment */
  DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Enable DMA transfer complete interrupt */
  DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6013      	str	r3, [r2, #0]

  /* Set peripheral address */
  DMA2_Stream7->PAR = (uint32_t)&USART1->DR;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <USART1_TX_DMA_Config+0xd0>)
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <USART1_TX_DMA_Config+0xd4>)
 8001a2e:	609a      	str	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	400264b8 	.word	0x400264b8
 8001a44:	40011004 	.word	0x40011004

08001a48 <NVIC_SetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EnableIRQ>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f103 	lsl.w	r1, r2, r3
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <NVIC_EnableIRQ+0x30>)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <NVIC_SetPriority>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da0b      	bge.n	8001af0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <NVIC_SetPriority+0x4c>)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	3b04      	subs	r3, #4
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	761a      	strb	r2, [r3, #24]
}
 8001aee:	e009      	b.n	8001b04 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <NVIC_SetPriority+0x50>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <NVIC_Init>:
 * @note
 * @param   None
 * @retval  None
 */
void NVIC_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Set priority group to 3
   * bits[3:0] are the sub-priority,
   * bits[7:4] are the pre-empt priority (0-15) */
  NVIC_SetPriorityGrouping(3);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff ff93 	bl	8001a48 <NVIC_SetPriorityGrouping>

  /* Set priority levels */
  NVIC_SetPriority(SysTick_IRQn, 0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ffcc 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(EXTI0_IRQn, 1);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	2006      	movs	r0, #6
 8001b30:	f7ff ffc8 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream0_IRQn, 1);
 8001b34:	2101      	movs	r1, #1
 8001b36:	200b      	movs	r0, #11
 8001b38:	f7ff ffc4 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream2_IRQn, 1);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	200d      	movs	r0, #13
 8001b40:	f7ff ffc0 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream4_IRQn, 1);
 8001b44:	2101      	movs	r1, #1
 8001b46:	200f      	movs	r0, #15
 8001b48:	f7ff ffbc 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream6_IRQn, 1);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	2011      	movs	r0, #17
 8001b50:	f7ff ffb8 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA1_Stream7_IRQn, 1);
 8001b54:	2101      	movs	r1, #1
 8001b56:	202f      	movs	r0, #47	; 0x2f
 8001b58:	f7ff ffb4 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream0_IRQn, 1);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	2038      	movs	r0, #56	; 0x38
 8001b60:	f7ff ffb0 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream3_IRQn, 1);
 8001b64:	2101      	movs	r1, #1
 8001b66:	203b      	movs	r0, #59	; 0x3b
 8001b68:	f7ff ffac 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream4_IRQn, 1);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	203c      	movs	r0, #60	; 0x3c
 8001b70:	f7ff ffa8 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream5_IRQn, 1);
 8001b74:	2101      	movs	r1, #1
 8001b76:	2044      	movs	r0, #68	; 0x44
 8001b78:	f7ff ffa4 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(DMA2_Stream7_IRQn, 1);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2046      	movs	r0, #70	; 0x46
 8001b80:	f7ff ffa0 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(USART1_IRQn, 1);
 8001b84:	2101      	movs	r1, #1
 8001b86:	2025      	movs	r0, #37	; 0x25
 8001b88:	f7ff ff9c 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(UART5_IRQn, 1);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2035      	movs	r0, #53	; 0x35
 8001b90:	f7ff ff98 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(TIM4_IRQn, 1);
 8001b94:	2101      	movs	r1, #1
 8001b96:	201e      	movs	r0, #30
 8001b98:	f7ff ff94 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	202c      	movs	r0, #44	; 0x2c
 8001ba0:	f7ff ff90 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1);
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	202d      	movs	r0, #45	; 0x2d
 8001ba8:	f7ff ff8c 	bl	8001ac4 <NVIC_SetPriority>
  NVIC_SetPriority(ADC_IRQn, 1);
 8001bac:	2101      	movs	r1, #1
 8001bae:	2012      	movs	r0, #18
 8001bb0:	f7ff ff88 	bl	8001ac4 <NVIC_SetPriority>

  /* Enable interrupts at NVIC */
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001bb4:	2006      	movs	r0, #6
 8001bb6:	f7ff ff6b 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f7ff ff68 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bc0:	200d      	movs	r0, #13
 8001bc2:	f7ff ff65 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f7ff ff62 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bcc:	2011      	movs	r0, #17
 8001bce:	f7ff ff5f 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001bd2:	202f      	movs	r0, #47	; 0x2f
 8001bd4:	f7ff ff5c 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bd8:	2038      	movs	r0, #56	; 0x38
 8001bda:	f7ff ff59 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bde:	203b      	movs	r0, #59	; 0x3b
 8001be0:	f7ff ff56 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001be4:	203c      	movs	r0, #60	; 0x3c
 8001be6:	f7ff ff53 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001bea:	2044      	movs	r0, #68	; 0x44
 8001bec:	f7ff ff50 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001bf0:	2046      	movs	r0, #70	; 0x46
 8001bf2:	f7ff ff4d 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(USART1_IRQn);
 8001bf6:	2025      	movs	r0, #37	; 0x25
 8001bf8:	f7ff ff4a 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(UART5_IRQn);
 8001bfc:	2035      	movs	r0, #53	; 0x35
 8001bfe:	f7ff ff47 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001c02:	201e      	movs	r0, #30
 8001c04:	f7ff ff44 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c08:	202c      	movs	r0, #44	; 0x2c
 8001c0a:	f7ff ff41 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c0e:	202d      	movs	r0, #45	; 0x2d
 8001c10:	f7ff ff3e 	bl	8001a90 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(ADC_IRQn);
 8001c14:	2012      	movs	r0, #18
 8001c16:	f7ff ff3b 	bl	8001a90 <NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <__libc_init_array>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	4d0d      	ldr	r5, [pc, #52]	; (8001c58 <__libc_init_array+0x38>)
 8001c24:	4c0d      	ldr	r4, [pc, #52]	; (8001c5c <__libc_init_array+0x3c>)
 8001c26:	1b64      	subs	r4, r4, r5
 8001c28:	10a4      	asrs	r4, r4, #2
 8001c2a:	2600      	movs	r6, #0
 8001c2c:	42a6      	cmp	r6, r4
 8001c2e:	d109      	bne.n	8001c44 <__libc_init_array+0x24>
 8001c30:	4d0b      	ldr	r5, [pc, #44]	; (8001c60 <__libc_init_array+0x40>)
 8001c32:	4c0c      	ldr	r4, [pc, #48]	; (8001c64 <__libc_init_array+0x44>)
 8001c34:	f000 f818 	bl	8001c68 <_init>
 8001c38:	1b64      	subs	r4, r4, r5
 8001c3a:	10a4      	asrs	r4, r4, #2
 8001c3c:	2600      	movs	r6, #0
 8001c3e:	42a6      	cmp	r6, r4
 8001c40:	d105      	bne.n	8001c4e <__libc_init_array+0x2e>
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c48:	4798      	blx	r3
 8001c4a:	3601      	adds	r6, #1
 8001c4c:	e7ee      	b.n	8001c2c <__libc_init_array+0xc>
 8001c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c52:	4798      	blx	r3
 8001c54:	3601      	adds	r6, #1
 8001c56:	e7f2      	b.n	8001c3e <__libc_init_array+0x1e>
 8001c58:	08002080 	.word	0x08002080
 8001c5c:	08002080 	.word	0x08002080
 8001c60:	08002080 	.word	0x08002080
 8001c64:	08002084 	.word	0x08002084

08001c68 <_init>:
 8001c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6a:	bf00      	nop
 8001c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6e:	bc08      	pop	{r3}
 8001c70:	469e      	mov	lr, r3
 8001c72:	4770      	bx	lr

08001c74 <_fini>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	bf00      	nop
 8001c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7a:	bc08      	pop	{r3}
 8001c7c:	469e      	mov	lr, r3
 8001c7e:	4770      	bx	lr
