

/*******************************************************************************
 * @file    GPT_2TO5_Cfg.h
 * @author  Ahmed Wasfy
 * @email   ahmedessam0128@gmail.com
 * @website 
 * @date    Sep 28, 2019
 *
 * @brief   GPT_2TO5_Cfg.h example using ST virtual COM port (VCP)
 * @note
 *
@verbatim
Copyright (C) Ahnmed Wasfy 2019

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.
@endverbatim
*******************************************************************************/

/* Define to prevent recursive inclusion */
/*
 * GPT_2TO5_Cfg.h
 *
 *  Created on: Sep 28, 2019
 *      Author: Ahmed Wasfy
 */

#ifndef INC_DEBUG_GPT_2TO5_CFG_H_
#define INC_DEBUG_GPT_2TO5_CFG_H_

/* C++ detection */
#ifdef __cplusplus
extern "C" {
#endif

#include "Std_Types.h"
#include"Timer_regesters.h"
#include "Basic_Timer_Cfg.h"

/* ==================================================================== */
/* ============================ Timer 3 ================================= */
/* ==================================================================== */

//# TIMER3_CR1			/*!< TIM control register 1      */

/*
 * Bits 9:8 CKD: Clock division
This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and
sampling clock used by the digital filters (ETR, TIx),
00: tDTS = tCK_INT
01: tDTS = 2 × tCK_INT
10: tDTS = 4 × tCK_INT
11: Reserved
*/
#define TIMER3_CR1_CKD			 tCK_INT
#define	tCK_INT					 0x00000000
#define	TWICE_tCK_INT			 0x00000100
#define	FORTH_tCK_INT			 0x00000200

/*Bit 7 ARPE: Auto-reload preload enable
0: TIMx_ARR register is not buffered.
1: TIMx_ARR register is buffered.
*/
#define TIMER3_CR1_ARPE	FALSE

/*
 * Bits 6:5 CMS: Center-aligned mode selection
00: Edge-aligned mode. The counter counts up or down depending on the direction bit
(DIR).
01: Center-aligned mode 1. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
only when the counter is counting down.
10: Center-aligned mode 2. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
only when the counter is counting up.
11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
both when the counter is counting up or down.
Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as
the counter is enabled (CEN=1)
 * */

#define TIMER3_CR1_CMS			 		 Edge_aligned_mode
#define	Edge_aligned_mode				 0x00000000
#define	CENTER_aligned_mode_1			 0x00000020
#define	CENTER_aligned_mode_2			 0x00000040
#define	CENTER_aligned_mode_3			 0x00000060



/*
 * Bit 4 DIR: Direction
0: Counter used as upcounter
1: Counter used as downcounter
Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder
mode.
 * */
#define TIMER3_CR1_DIR	TRUE

/*Bit 3 OPM: One-pulse mode
0: Counter is not stopped at update event
1: Counter stops counting at the next update event (clearing the CEN bit).
*/
#define TIMER3_CR1_OPM	FALSE


/*Bit 2 URS: Update request source
This bit is set and cleared by software to select the UEV event sources.
0: Any of the following events generates an update interrupt or DMA request if enabled.
These events can be:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
*/
#define TIMER3_CR1_URS	FALSE


/*Bit 1 UDIS: Update disable
This bit is set and cleared by software to enable/disable UEV event generation.
0: UEV enabled. The Update (UEV) event is generated by one of the following events:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
Buffered registers are then loaded with their preload values.
1: UEV disabled. The Update event is not generated, shadow registers keep their value
(ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if
a hardware reset is received from the slave mode controller.
*/
#define TIMER3_CR1_UDIS	FALSE



/*Bit 0 CEN: Counter enable
0: Counter disabled
1: Counter enabled
Note: Gated mode can work only if the CEN bit has been previously set by software. However
trigger mode can set the CEN bit automatically by hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
*/
#define TIMER3_CR1_CEN	FALSE



/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_CR2			/*!< TIM control register 2      */

/*Bit 7 TI1S: TI1 selection
				0: The TIMx_CH1 pin is connected to TI1 input
				1: The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination)
*/
#define TIMER3_CR2_TI1S 		FALSE

/*Bits 6:4 MMS: Master mode selection
These bits are used to select the information to be sent in master mode to slave timers for
synchronization (TRGO). The combination is as follows:
000: Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If
reset is generated by the trigger input (slave mode controller configured in reset mode) then
the signal on TRGO is delayed compared to the actual reset.
001: Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is
useful to start several timers at the same time or to control a window in which a slave timer
is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit
and the trigger input when configured in gated mode.
When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO,
except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR
register).
010: Update - The update event is selected as a trigger output (TRGO). For instance a
master timer can then be used as a prescaler for a slave timer.*/
#define TIMER3_CR2_MMS								TIMER3_MMS_Reset
#define TIMER3_MMS_Reset 							0x00000000
#define TIMER3_MMS_Enable 							0x00000010
#define TIMER3_MMS_Update 							0x00000020

/*
 * Bit 3 CCDS: Capture/compare DMA selection
	0: CCx DMA request sent when CCx event occurs
	1: CCx DMA requests sent when update event occurs
 *
 * */
#define	TIMER3_CR2_CCDS		FALSE

/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_SMCR			/*!< TIM control register 2      */

/*
 * Bit 15 ETP: External trigger polarity
This bit selects whether ETR or ETR is used for trigger operations
0: ETR is noninverted, active at high level or rising edge
1: ETR is inverted, active at low level or falling edge
 * */
#define TIMER3_SMCR_ETP	FALSE


/*
 * Bit 14 ECE: External clock enable
This bit enables External clock mode 2.
0: External clock mode 2 disabled
1: External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF
signal.
1: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI
connected to ETRF (SMS=111 and TS=111).
2: It is possible to simultaneously use external clock mode 2 with the following slave modes:
reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to
ETRF in this case (TS bits must not be 111).
3: If external clock mode 1 and external clock mode 2 are enabled at the same time, the
external clock input is ETRF.
 * */

#define TIMER3_SMCR_ECE	FALSE


/*
 * Bits 13:12 ETPS: External trigger prescaler
	External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A
	prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external
	clocks.
	00: Prescaler OFF
	01: ETRP frequency divided by 2
	10: ETRP frequency divided by 4
	11: ETRP frequency divided by 8
 * */
#define TIMER3_SMCR_ETPS	NO_Prescaler
#define frequency_divided_by_2		0x00000000
#define frequency_divided_by_4		0x00000000
#define frequency_divided_by_8		0x00000000


/*
 * Bits 11:8 ETF[3:0]: External trigger filter
	This bit-field then defines the frequency used to sample ETRP signal and the length of the
	digital filter applied to ETRP. The digital filter is made of an event counter in which N events
	are needed to validate a transition on the output:
	0000: No filter, sampling is done at fDTS
	0001: fSAMPLING=fCK_INT, N=2
	0010: fSAMPLING=fCK_INT, N=4
	0011: fSAMPLING=fCK_INT, N=8
	0100: fSAMPLING=fDTS/2, N=6
	0101: fSAMPLING=fDTS/2, N=8
	0110: fSAMPLING=fDTS/4, N=6
	0111: fSAMPLING=fDTS/4, N=8
	1000: fSAMPLING=fDTS/8, N=6
	1001: fSAMPLING=fDTS/8, N=8
	1010: fSAMPLING=fDTS/16, N=5
	1011: fSAMPLING=fDTS/16, N=6
	1100: fSAMPLING=fDTS/16, N=8
	1101: fSAMPLING=fDTS/32, N=5
	1110: fSAMPLING=fDTS/32, N=6
	1111: fSAMPLING=fDTS/32, N=8
 * */
#define TIMER3_SMCR_ETPS	NO_filter
#define NO_filter					0x00000000
#define fCK_INT_N2					0x00000000
#define fCK_INT_N4					0x00000000
#define fCK_INT_N8					0x00000000
#define fCK_INT_over2_N6			0x00000000
#define fCK_INT_over2_N8			0x00000000
#define fCK_INT_over4_N6			0x00000000
#define fCK_INT_over4_N8			0x00000000
#define fCK_INT_over8_N6			0x00000000
#define fCK_INT_over8_N8			0x00000000
#define fCK_INT_over16_N5			0x00000000
#define fCK_INT_over16_N8			0x00000000
#define fCK_INT_over32_N5			0x00000000
#define fCK_INT_over32_N6			0x00000000
#define fCK_INT_over32_N8			0x00000000


/*Bit 7 MSM: Master/Slave mode
0: No action
1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect
synchronization between the current timer and its slaves (through TRGO). It is useful if we
want to synchronize several timers on a single external event.
 * */
#define	TIMER3_SMCR_MSM 	FALSE

/*Bits 6:4 TS: Trigger selection
This bit-field selects the trigger input to be used to synchronize the counter.
000: Internal Trigger 0 (ITR0)
001: Internal Trigger 1 (ITR1).
010: Internal Trigger 2 (ITR2).
011: Internal Trigger 3 (ITR3).
100: TI1 Edge Detector (TI1F_ED)
101: Filtered Timer Input 1 (TI1FP1)
110: Filtered Timer Input 2 (TI2FP2)
111: External Trigger input (ETRF)
See Table 76: TIMx internal trigger connection on page 463 for more details on ITRx
meaning for each Timer.
Note: These bits must be changed only when they are not used (e.g. when SMS=000) to
avoid wrong edge detections at the transition.
 *
 * */
/*
 * Table 76. TIMx internal trigger connection
Slave TIM  	ITR0 (TS = 000) 	ITR1 (TS = 001)		 ITR2 (TS = 010)		 ITR3 (TS = 011)
	TIM2		TIM1				TIM8					TIM3 						TIM4
	TIM3 		TIM1 				TIM2 					TIM5 						TIM4
	TIM4		TIM1				TIM2					TIM3 						TIM8
	TIM5 		TIM2 				TIM3 					TIM4 						TIM8
 * */

#define	TIMER3_SMCR_TS	 	ITR0
#define ITR0				0x00000000
#define ITR1				0x00000000
#define ITR2				0x00000000
#define ITR3				0x00000000
#define TI1F_ED				0x00000000
#define TI1FP1				0x00000000
#define TI2FP2				0x00000000
#define ETRF				0x00000000


/*
 * Bits 2:0 SMS: Slave mode selection
When external signals are selected the active edge of the trigger signal (TRGI) is linked to
the polarity selected on the external input (see Input Control register and Control Register
description.
000: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal
clock.
001: Encoder mode 1 - Counter counts up/down on TI2FP2 edge depending on TI1FP1
level.
010: Encoder mode 2 - Counter counts up/down on TI1FP1 edge depending on TI2FP2
level.
011: Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges
depending on the level of the other input.
100: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter
and generates an update of the registers.
101: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The
counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of
the counter are controlled.
110: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not
reset). Only the start of the counter is controlled.
111: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.
Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=100).
Indeed, TI1F_ED outputs 1 pulse for ea
 * */
/* ==================================================================== */
/* ==================================================================== */

#define	TIMER3_SMCR_TS	 		Encoder_mode_1
#define Encoder_mode_1			0x00000000
#define Encoder_mode_2			0x00000000
#define Encoder_mode_3			0x00000000
#define	Reset_Mode				0x00000000
#define	Gated_Mode				0x00000000
#define	Trigger_Mode			0x00000000
#define	External_Clock_Mode_1	0x00000000


//# TIMER3_DIER			/*!< TIM control register 2      */

/*
 * Bit 14 TDE: Trigger DMA request enable
0: Trigger DMA request disabled.
1: Trigger DMA request enabled.
*/

#define TIMER3_DIER_TDE		FALSE

/*
 * Bit 12 CC4DE: Capture/Compare 4 DMA request enable
0: CC4 DMA request disabled.
1: CC4 DMA request enabled.
 * */
#define TIMER3_DIER_CC4DE		FALSE

/*
 * Bit 11 CC3DE: Capture/Compare 3 DMA request enable
0: CC3 DMA request disabled.
1: CC3 DMA request enabled.
*/
#define TIMER3_DIER_CC3DE		FALSE


/*
Bit 10 CC2DE: Capture/Compare 2 DMA request enable
0: CC2 DMA request disabled.
1: CC2 DMA request enabled.
*/
#define TIMER3_DIER_CC2DE		FALSE


/*Bit 9 CC1DE: Capture/Compare 1 DMA request enable
0: CC1 DMA request disabled.
1: CC1 DMA request enabled.
 * */
#define TIMER3_DIER_CC1DE		FALSE


/*Bit 8 UDE: Update DMA request enable
0: Update DMA request disabled.
1: Update DMA request enabled.
*/
#define TIMER3_DIER_UDE				FALSE


/*
 * Bit 6 TIE: Trigger interrupt enable
0: Trigger interrupt disabled.
1: Trigger interrupt enabled.
*/
#define TIMER3_DIER_TIE		FALSE



/*Bit 4 CC4IE: Capture/Compare 4 interrupt enable
0: CC4 interrupt disabled.
1: CC4 interrupt enabled.
*
*/
#define TIMER3_DIER_CC4IE		FALSE


/*Bit 3 CC3IE: Capture/Compare 3 interrupt enable
0: CC3 interrupt disabled
1: CC3 interrupt enabled
*/
#define TIMER3_DIER_CC3IE		FALSE



/*Bit 2 CC2IE: Capture/Compare 2 interrupt enable
0: CC2 interrupt disabled
1: CC2 interrupt enabled
*/
#define TIMER3_DIER_CC2IE		FALSE


/*Bit 1 CC1IE: Capture/Compare 1 interrupt enable
0: CC1 interrupt disabled
1: CC1 interrupt enabled
 */
#define TIMER3_DIER_CC1IE		FALSE


/*Bit 0 UIE: Update interrupt enable
0: Update interrupt disabled.
1: Update interrupt enabled.
*/
#define TIMER3_DIER_UIE			FALSE


/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_SR			/*!< TIM control register 2      */

/*
 * Bit 0 UIF: Update interrupt flag
This bit is set by hardware on an update event. It is cleared by software.
0: No update occurred.
1: Update interrupt pending. This bit is set by hardware when the registers are updated:
–At overflow or underflow and if UDIS = 0 in the TIMx_CR1 register.
–When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if
URS = 0 and UDIS = 0 in the TIMx_CR1 register.
 */
#define TIMER3_SR_UIF									FALSE

/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_EGR			/*!< TIM control register 2      */

/*
 * Bit 6 TG: Trigger generation
This bit is set by software in order to generate an event, it is automatically cleared by
hardware.
0: No action
1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if
enabled.
*/
#define TIMER3_EGR_TG							FALSE


/*Bit 4 CC4G: Capture/compare 4 generation
refer to CC1G description
*/
#define TIMER3_EGR_CC4G							FALSE


/*Bit 3 CC3G: Capture/compare 3 generation
refer to CC1G description
*/
#define TIMER3_EGR_CC3G							FALSE


/*Bit 2 CC2G: Capture/compare 2 generation
refer to CC1G description
*/
#define TIMER3_EGR_CC2G							FALSE


/*Bit 1 CC1G: Capture/compare 1 generation
This bit is set by software in order to generate an event, it is automatically cleared by
hardware.
0: No action
1: A capture/compare event is generated on channel 1:
If channel CC1 is configured as output:
CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
If channel CC1 is configured as input:
The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set,
the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the
CC1IF flag was already high
 * */
#define TIMER3_EGR_CC1G							FALSE


/*Bit 0 UG: Update generation
This bit can be set by software, it is automatically cleared by hardware.
0: No action.
1: Re-initializes the timer counter and generates an update of the registers. Note that the
prescaler counter is cleared too (but the prescaler ratio is not affected).*/
#define TIMER3_EGR_UG									FALSE



/* ==================================================================== */
/* ==================================================================== */
//# TIMER3_CCMR1			/*!< TIM control register 2      */




/* ==================================================================== */
/* ==================================================================== */
//# TIMER3_CCMR2			/*!< TIM control register 2      */



/* ==================================================================== */
/* ==================================================================== */
//# TIMER3_CCER			/*!< TIM control register 2      */

/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_PSC			/*!< TIM control register 2      */

/*Bits 15:0 PSC[15:0]: Prescaler value
The counter clock frequency CK_CNT is equal to f(CK_PSC) / (PSC[15:0] + 1).
PSC contains the value to be loaded into the active prescaler register at each update event.
*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER3_PSC_PSC		44999


/* ==================================================================== */
/* ==================================================================== */


//# TIMER3_ARR			/*!< TIM control register 2      */

/*Bits 15:0 ARR[15:0]: Auto-reload value
ARR is the value to be loaded into the actual auto-reload register.
The counter is blocked while the auto-reload value is null.*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER3_ARR_ARR		5000



/* ==================================================================== */
/* ==================================================================== */

//# TIMER3_DCR			/*!< TIMx DMA control register      */



/* ==================================================================== */
/* ==================================================================== */


/*
 * Bits 12:8 DBL[4:0]: DMA burst length
This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer
when a read or a write access is done to the TIMx_DMAR address).
00000: 1 transfer,
00001: 2 transfers,
00010: 3 transfers,
...
10001: 18 transfers.
*/

/*
Bits 4:0 DBA[4:0]: DMA base address
This 5-bit vector defines the base-address for DMA transfers (when read/write access are
done through the TIMx_DMAR address). DBA is defined as an offset starting from the
address of the TIMx_CR1 register.
Example:
00000: TIMx_CR1,
00001: TIMx_CR2,
00010: TIMx_SMCR,
...
Example: Let us consider the following transfer: DBL = 7 transfers & DBA = TIMx
 * */
/* ==================================================================== */
/* ==================================================================== */








/* ==================================================================== */
/* ============================ Timer 4 ================================= */
/* ==================================================================== */

//# TIMER4_CR1			/*!< TIM control register 1      */

/*
 * Bits 9:8 CKD: Clock division
This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and
sampling clock used by the digital filters (ETR, TIx),
00: tDTS = tCK_INT
01: tDTS = 2 × tCK_INT
10: tDTS = 4 × tCK_INT
11: Reserved
*/
#define TIMER4_CR1_CKD			 tCK_INT
#define	tCK_INT					 0x00000000
#define	TWICE_tCK_INT			 0x00000100
#define	FORTH_tCK_INT			 0x00000200

/*Bit 7 ARPE: Auto-reload preload enable
0: TIMx_ARR register is not buffered.
1: TIMx_ARR register is buffered.
*/
#define TIMER4_CR1_ARPE	FALSE



/*
 * Bits 6:5 CMS: Center-aligned mode selection
00: Edge-aligned mode. The counter counts up or down depending on the direction bit
(DIR).
01: Center-aligned mode 1. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
only when the counter is counting down.
10: Center-aligned mode 2. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
only when the counter is counting up.
11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
both when the counter is counting up or down.
Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as
the counter is enabled (CEN=1)
 * */

#define TIMER4_CR1_CMS			 		 CENTER_aligned_mode_3
#define	Edge_aligned_mode				 0x00000000
#define	CENTER_aligned_mode_1			 0x00000020
#define	CENTER_aligned_mode_2			 0x00000040
#define	CENTER_aligned_mode_3			 0x00000060



/*
 * Bit 4 DIR: Direction
0: Counter used as upcounter
1: Counter used as downcounter
Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder
mode.
 * */
#define TIMER4_CR1_DIR	TRUE

/*Bit 3 OPM: One-pulse mode
0: Counter is not stopped at update event
1: Counter stops counting at the next update event (clearing the CEN bit).
*/
#define TIMER4_CR1_OPM	FALSE


/*Bit 2 URS: Update request source
This bit is set and cleared by software to select the UEV event sources.
0: Any of the following events generates an update interrupt or DMA request if enabled.
These events can be:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
*/
#define TIMER4_CR1_URS	FALSE


/*Bit 1 UDIS: Update disable
This bit is set and cleared by software to enable/disable UEV event generation.
0: UEV enabled. The Update (UEV) event is generated by one of the following events:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
Buffered registers are then loaded with their preload values.
1: UEV disabled. The Update event is not generated, shadow registers keep their value
(ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if
a hardware reset is received from the slave mode controller.
*/
#define TIMER4_CR1_UDIS	FALSE



/*Bit 0 CEN: Counter enable
0: Counter disabled
1: Counter enabled
Note: Gated mode can work only if the CEN bit has been previously set by software. However
trigger mode can set the CEN bit automatically by hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
*/
#define TIMER4_CR1_CEN	FALSE



/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_CR2			/*!< TIM control register 2      */

/*Bit 7 TI1S: TI1 selection
				0: The TIMx_CH1 pin is connected to TI1 input
				1: The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination)
*/
#define TIMER4_CR2_TI1S 		FALSE

/*Bits 6:4 MMS: Master mode selection
These bits are used to select the information to be sent in master mode to slave timers for
synchronization (TRGO). The combination is as follows:
000: Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If
reset is generated by the trigger input (slave mode controller configured in reset mode) then
the signal on TRGO is delayed compared to the actual reset.
001: Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is
useful to start several timers at the same time or to control a window in which a slave timer
is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit
and the trigger input when configured in gated mode.
When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO,
except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR
register).
010: Update - The update event is selected as a trigger output (TRGO). For instance a
master timer can then be used as a prescaler for a slave timer.*/
#define TIMER4_CR2_MMS								TIMER4_MMS_Reset
#define TIMER4_MMS_Reset 							0x00000000
#define TIMER4_MMS_Enable 							0x00000010
#define TIMER4_MMS_Update 							0x00000020

/*
 * Bit 3 CCDS: Capture/compare DMA selection
	0: CCx DMA request sent when CCx event occurs
	1: CCx DMA requests sent when update event occurs
 *
 * */
#define	TIMER4_CR2_CCDS		FALSE

/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_SMCR			/*!< TIM control register 2      */

/*
 * Bit 15 ETP: External trigger polarity
This bit selects whether ETR or ETR is used for trigger operations
0: ETR is noninverted, active at high level or rising edge
1: ETR is inverted, active at low level or falling edge
 * */
#define TIMER4_SMCR_ETP	FALSE


/*
 * Bit 14 ECE: External clock enable
This bit enables External clock mode 2.
0: External clock mode 2 disabled
1: External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF
signal.
1: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI
connected to ETRF (SMS=111 and TS=111).
2: It is possible to simultaneously use external clock mode 2 with the following slave modes:
reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to
ETRF in this case (TS bits must not be 111).
3: If external clock mode 1 and external clock mode 2 are enabled at the same time, the
external clock input is ETRF.
 * */

#define TIMER4_SMCR_ECE	FALSE


/*
 * Bits 13:12 ETPS: External trigger prescaler
	External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A
	prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external
	clocks.
	00: Prescaler OFF
	01: ETRP frequency divided by 2
	10: ETRP frequency divided by 4
	11: ETRP frequency divided by 8
 * */
#define TIMER4_SMCR_ETPS	NO_Prescaler
#define frequency_divided_by_2		0x00000000
#define frequency_divided_by_4		0x00000000
#define frequency_divided_by_8		0x00000000


/*
 * Bits 11:8 ETF[3:0]: External trigger filter
	This bit-field then defines the frequency used to sample ETRP signal and the length of the
	digital filter applied to ETRP. The digital filter is made of an event counter in which N events
	are needed to validate a transition on the output:
	0000: No filter, sampling is done at fDTS
	0001: fSAMPLING=fCK_INT, N=2
	0010: fSAMPLING=fCK_INT, N=4
	0011: fSAMPLING=fCK_INT, N=8
	0100: fSAMPLING=fDTS/2, N=6
	0101: fSAMPLING=fDTS/2, N=8
	0110: fSAMPLING=fDTS/4, N=6
	0111: fSAMPLING=fDTS/4, N=8
	1000: fSAMPLING=fDTS/8, N=6
	1001: fSAMPLING=fDTS/8, N=8
	1010: fSAMPLING=fDTS/16, N=5
	1011: fSAMPLING=fDTS/16, N=6
	1100: fSAMPLING=fDTS/16, N=8
	1101: fSAMPLING=fDTS/32, N=5
	1110: fSAMPLING=fDTS/32, N=6
	1111: fSAMPLING=fDTS/32, N=8
 * */
#define TIMER4_SMCR_ETPS	NO_filter
#define NO_filter					0x00000000
#define fCK_INT_N2					0x00000000
#define fCK_INT_N4					0x00000000
#define fCK_INT_N8					0x00000000
#define fCK_INT_over2_N6			0x00000000
#define fCK_INT_over2_N8			0x00000000
#define fCK_INT_over4_N6			0x00000000
#define fCK_INT_over4_N8			0x00000000
#define fCK_INT_over8_N6			0x00000000
#define fCK_INT_over8_N8			0x00000000
#define fCK_INT_over16_N5			0x00000000
#define fCK_INT_over16_N8			0x00000000
#define fCK_INT_over32_N5			0x00000000
#define fCK_INT_over32_N6			0x00000000
#define fCK_INT_over32_N8			0x00000000


/*Bit 7 MSM: Master/Slave mode
0: No action
1: The effect of an event on the trigger input (TRGI) is delayed to allow a perfect
synchronization between the current timer and its slaves (through TRGO). It is useful if we
want to synchronize several timers on a single external event.
 * */
#define	TIMER4_SMCR_MSM 	FALSE

/*Bits 6:4 TS: Trigger selection
This bit-field selects the trigger input to be used to synchronize the counter.
000: Internal Trigger 0 (ITR0)
001: Internal Trigger 1 (ITR1).
010: Internal Trigger 2 (ITR2).
011: Internal Trigger 3 (ITR3).
100: TI1 Edge Detector (TI1F_ED)
101: Filtered Timer Input 1 (TI1FP1)
110: Filtered Timer Input 2 (TI2FP2)
111: External Trigger input (ETRF)
See Table 76: TIMx internal trigger connection on page 463 for more details on ITRx
meaning for each Timer.
Note: These bits must be changed only when they are not used (e.g. when SMS=000) to
avoid wrong edge detections at the transition.
 *
 * */
/*
 * Table 76. TIMx internal trigger connection
Slave TIM  	ITR0 (TS = 000) 	ITR1 (TS = 001)		 ITR2 (TS = 010)		 ITR3 (TS = 011)
	TIM2		TIM1				TIM8					TIM3 						TIM4
	TIM3 		TIM1 				TIM2 					TIM5 						TIM4
	TIM4		TIM1				TIM2					TIM3 						TIM8
	TIM5 		TIM2 				TIM3 					TIM4 						TIM8
 * */

#define	TIMER4_SMCR_TS	 	ITR0
#define ITR0				0x00000000
#define ITR1				0x00000000
#define ITR2				0x00000000
#define ITR3				0x00000000
#define TI1F_ED				0x00000000
#define TI1FP1				0x00000000
#define TI2FP2				0x00000000
#define ETRF				0x00000000


/*
 * Bits 2:0 SMS: Slave mode selection
When external signals are selected the active edge of the trigger signal (TRGI) is linked to
the polarity selected on the external input (see Input Control register and Control Register
description.
000: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal
clock.
001: Encoder mode 1 - Counter counts up/down on TI2FP2 edge depending on TI1FP1
level.
010: Encoder mode 2 - Counter counts up/down on TI1FP1 edge depending on TI2FP2
level.
011: Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges
depending on the level of the other input.
100: Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter
and generates an update of the registers.
101: Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The
counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of
the counter are controlled.
110: Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not
reset). Only the start of the counter is controlled.
111: External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.
Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=100).
Indeed, TI1F_ED outputs 1 pulse for ea
 * */
/* ==================================================================== */
/* ==================================================================== */

#define	TIMER4_SMCR_TS	 		Encoder_mode_1
#define Encoder_mode_1			0x00000000
#define Encoder_mode_2			0x00000000
#define Encoder_mode_3			0x00000000
#define	Reset_Mode				0x00000000
#define	Gated_Mode				0x00000000
#define	Trigger_Mode			0x00000000
#define	External_Clock_Mode_1	0x00000000


//# TIMER4_DIER			/*!< TIM control register 2      */

/*
 * Bit 14 TDE: Trigger DMA request enable
0: Trigger DMA request disabled.
1: Trigger DMA request enabled.
*/

#define TIMER4_DIER_TDE		FALSE

/*
 * Bit 12 CC4DE: Capture/Compare 4 DMA request enable
0: CC4 DMA request disabled.
1: CC4 DMA request enabled.
 * */
#define TIMER4_DIER_CC4DE		FALSE

/*
 * Bit 11 CC3DE: Capture/Compare 3 DMA request enable
0: CC3 DMA request disabled.
1: CC3 DMA request enabled.
*/
#define TIMER4_DIER_CC3DE		FALSE


/*
Bit 10 CC2DE: Capture/Compare 2 DMA request enable
0: CC2 DMA request disabled.
1: CC2 DMA request enabled.
*/
#define TIMER4_DIER_CC2DE		FALSE


/*Bit 9 CC1DE: Capture/Compare 1 DMA request enable
0: CC1 DMA request disabled.
1: CC1 DMA request enabled.
 * */
#define TIMER4_DIER_CC1DE		FALSE


/*Bit 8 UDE: Update DMA request enable
0: Update DMA request disabled.
1: Update DMA request enabled.
*/
#define TIMER4_DIER_UDE				FALSE


/*
 * Bit 6 TIE: Trigger interrupt enable
0: Trigger interrupt disabled.
1: Trigger interrupt enabled.
*/
#define TIMER4_DIER_TIE		FALSE



/*Bit 4 CC4IE: Capture/Compare 4 interrupt enable
0: CC4 interrupt disabled.
1: CC4 interrupt enabled.
*
*/
#define TIMER4_DIER_CC4IE		FALSE


/*Bit 3 CC3IE: Capture/Compare 3 interrupt enable
0: CC3 interrupt disabled
1: CC3 interrupt enabled
*/
#define TIMER4_DIER_CC3IE		FALSE



/*Bit 2 CC2IE: Capture/Compare 2 interrupt enable
0: CC2 interrupt disabled
1: CC2 interrupt enabled
*/
#define TIMER4_DIER_CC2IE		FALSE


/*Bit 1 CC1IE: Capture/Compare 1 interrupt enable
0: CC1 interrupt disabled
1: CC1 interrupt enabled
 */
#define TIMER4_DIER_CC1IE		FALSE


/*Bit 0 UIE: Update interrupt enable
0: Update interrupt disabled.
1: Update interrupt enabled.
*/
#define TIMER4_DIER_UIE			TRUE


/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_SR			/*!< TIM control register 2      */

/*
 * Bit 0 UIF: Update interrupt flag
This bit is set by hardware on an update event. It is cleared by software.
0: No update occurred.
1: Update interrupt pending. This bit is set by hardware when the registers are updated:
–At overflow or underflow and if UDIS = 0 in the TIMx_CR1 register.
–When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if
URS = 0 and UDIS = 0 in the TIMx_CR1 register.
 */
#define TIMER4_SR_UIF									FALSE

/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_EGR			/*!< TIM control register 2      */

/*
 * Bit 6 TG: Trigger generation
This bit is set by software in order to generate an event, it is automatically cleared by
hardware.
0: No action
1: The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if
enabled.
*/
#define TIMER4_EGR_TG							FALSE


/*Bit 4 CC4G: Capture/compare 4 generation
refer to CC1G description
*/
#define TIMER4_EGR_CC4G							FALSE


/*Bit 3 CC3G: Capture/compare 3 generation
refer to CC1G description
*/
#define TIMER4_EGR_CC3G							FALSE


/*Bit 2 CC2G: Capture/compare 2 generation
refer to CC1G description
*/
#define TIMER4_EGR_CC2G							FALSE


/*Bit 1 CC1G: Capture/compare 1 generation
This bit is set by software in order to generate an event, it is automatically cleared by
hardware.
0: No action
1: A capture/compare event is generated on channel 1:
If channel CC1 is configured as output:
CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
If channel CC1 is configured as input:
The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set,
the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the
CC1IF flag was already high
 * */
#define TIMER4_EGR_CC1G							FALSE


/*Bit 0 UG: Update generation
This bit can be set by software, it is automatically cleared by hardware.
0: No action.
1: Re-initializes the timer counter and generates an update of the registers. Note that the
prescaler counter is cleared too (but the prescaler ratio is not affected).*/
#define TIMER4_EGR_UG									FALSE



/* ==================================================================== */
/* ==================================================================== */
//# TIMER4_CCMR1			/*!< TIM control register 2      */




/* ==================================================================== */
/* ==================================================================== */
//# TIMER4_CCMR2			/*!< TIM control register 2      */



/* ==================================================================== */
/* ==================================================================== */
//# TIMER4_CCER			/*!< TIM control register 2      */

/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_PSC			/*!< TIM control register 2      */

/*Bits 15:0 PSC[15:0]: Prescaler value
The counter clock frequency CK_CNT is equal to f(CK_PSC) / (PSC[15:0] + 1).
PSC contains the value to be loaded into the active prescaler register at each update event.
*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER4_PSC_PSC		44999


/* ==================================================================== */
/* ==================================================================== */


//# TIMER4_ARR			/*!< TIM control register 2      */

/*Bits 15:0 ARR[15:0]: Auto-reload value
ARR is the value to be loaded into the actual auto-reload register.
The counter is blocked while the auto-reload value is null.*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER4_ARR_ARR		5000



/* ==================================================================== */
/* ==================================================================== */

//# TIMER4_DCR			/*!< TIMx DMA control register      */



/* ==================================================================== */
/* ==================================================================== */


/*
 * Bits 12:8 DBL[4:0]: DMA burst length
This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer
when a read or a write access is done to the TIMx_DMAR address).
00000: 1 transfer,
00001: 2 transfers,
00010: 3 transfers,
...
10001: 18 transfers.
*/

/*
Bits 4:0 DBA[4:0]: DMA base address
This 5-bit vector defines the base-address for DMA transfers (when read/write access are
done through the TIMx_DMAR address). DBA is defined as an offset starting from the
address of the TIMx_CR1 register.
Example:
00000: TIMx_CR1,
00001: TIMx_CR2,
00010: TIMx_SMCR,
...
Example: Let us consider the following transfer: DBL = 7 transfers & DBA = TIMx
 * */
/* ==================================================================== */
/* ==================================================================== */






/**
 * @}
 */
/**
 * @}
 */
/**
 * @}
 */

#endif /* INC_DEBUG_GPT_2TO5_CFG_H_ */
