

/*******************************************************************************
 * @file    Basic_Timer_Cfg.h
 * @author  Ahmed Wasfy
 * @email   ahmedessam0128@gmail.com
 * @website 
 * @date    Sep 27, 2019
 *
 * @brief   Basic_Timer_Cfg.h example using ST virtual COM port (VCP)
 * @note
 *
@verbatim
Copyright (C) Ahnmed Wasfy 2019

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.
@endverbatim
*******************************************************************************/

/* Define to prevent recursive inclusion */
/*
 * Basic_Timer_Cfg.h
 *
 *  Created on: Sep 27, 2019
 *      Author: Ahmed Wasfy
 */

#ifndef INC_BASIC_TIMER_CFG_H_
#define INC_BASIC_TIMER_CFG_H_

/* C++ detection */
#ifdef __cplusplus
extern "C" {
#endif



/* @prog __ApplicationName ****************************************************
**
** __ShortDescription__
**
******************************************************************************/
	





/* Includes */
#include "Std_Types.h"
#include"Timer_regesters.h"
#include "Basic_Timer_Cfg.h"

/**
 * @addtogroup stm32_examples
 * @{
 */

/* ==================================================================== */
/* ============================ Timer 6 ================================= */
/* ==================================================================== */

//# TIMER6_CR1			/*!< TIM control register 1      */


/*Bit 7 ARPE: Auto-reload preload enable
0: TIMx_ARR register is not buffered.
1: TIMx_ARR register is buffered.
*/
#define TIMER6_CR1_ARPE	FALSE



/*Bit 3 OPM: One-pulse mode
0: Counter is not stopped at update event
1: Counter stops counting at the next update event (clearing the CEN bit).
*/
#define TIMER6_CR1_OPM	FALSE


/*Bit 2 URS: Update request source
This bit is set and cleared by software to select the UEV event sources.
0: Any of the following events generates an update interrupt or DMA request if enabled.
These events can be:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
*/
#define TIMER6_CR1_URS	FALSE


/*Bit 1 UDIS: Update disable
This bit is set and cleared by software to enable/disable UEV event generation.
0: UEV enabled. The Update (UEV) event is generated by one of the following events:
– Counter overflow/underflow
– Setting the UG bit
– Update generation through the slave mode controller
Buffered registers are then loaded with their preload values.
1: UEV disabled. The Update event is not generated, shadow registers keep their value
(ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if
a hardware reset is received from the slave mode controller.
*/
#define TIMER6_CR1_UDIS	FALSE



/*Bit 0 CEN: Counter enable
0: Counter disabled
1: Counter enabled
Note: Gated mode can work only if the CEN bit has been previously set by software. However
trigger mode can set the CEN bit automatically by hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
*/
#define TIMER6_CR1_CEN	TRUE



/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_CR2			/*!< TIM control register 2      */

/*Bits 6:4 MMS: Master mode selection
These bits are used to select the information to be sent in master mode to slave timers for
synchronization (TRGO). The combination is as follows:
000: Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If
reset is generated by the trigger input (slave mode controller configured in reset mode) then
the signal on TRGO is delayed compared to the actual reset.
001: Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is
useful to start several timers at the same time or to control a window in which a slave timer
is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit
and the trigger input when configured in gated mode.
When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO,
except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR
register).
010: Update - The update event is selected as a trigger output (TRGO). For instance a
master timer can then be used as a prescaler for a slave timer.*/
#define TIMER6_CR2_MMS									TIMER6_MMS_Reset
#define TIMER6_MMS_Reset 							0x00000000
#define TIMER6_MMS_Enable 							0x00000010
#define TIMER6_MMS_Update 							0x00000020


/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_DIER			/*!< TIM control register 2      */



/*Bit 8 UDE: Update DMA request enable
0: Update DMA request disabled.
1: Update DMA request enabled.
*/
#define TIMER6_DIER_UDE									FALSE


/*Bit 0 UIE: Update interrupt enable
0: Update interrupt disabled.
1: Update interrupt enabled.
*/
#define TIMER6_DIER_UIE									FALSE


/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_SR			/*!< TIM control register 2      */

/*
 * Bit 0 UIF: Update interrupt flag
This bit is set by hardware on an update event. It is cleared by software.
0: No update occurred.
1: Update interrupt pending. This bit is set by hardware when the registers are updated:
–At overflow or underflow and if UDIS = 0 in the TIMx_CR1 register.
–When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if
URS = 0 and UDIS = 0 in the TIMx_CR1 register.
 */
#define TIMER6_SR_UIF									FALSE

/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_EGR			/*!< TIM control register 2      */


/*Bit 0 UG: Update generation
This bit can be set by software, it is automatically cleared by hardware.
0: No action.
1: Re-initializes the timer counter and generates an update of the registers. Note that the
prescaler counter is cleared too (but the prescaler ratio is not affected).*/
#define TIMER6_EGR_UG									FALSE



/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_PSC			/*!< TIM control register 2      */

/*Bits 15:0 PSC[15:0]: Prescaler value
The counter clock frequency CK_CNT is equal to f(CK_PSC) / (PSC[15:0] + 1).
PSC contains the value to be loaded into the active prescaler register at each update event.
*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER6_PSC_PSC		44999

/* ==================================================================== */
/* ==================================================================== */


//# TIMER6_ARR			/*!< TIM control register 2      */

/*Bits 15:0 ARR[15:0]: Auto-reload value
ARR is the value to be loaded into the actual auto-reload register.
The counter is blocked while the auto-reload value is null.*/

/* CK_CNT = 45000000 / (44999 + 1) -> 1000 Hz -> time base = 1 ms */

#define TIMER6_ARR_ARR		5000


#endif /* INC_BASIC_TIMER_CFG_H_ */
